[
    {
        "id": "71d3bf2af11879c6",
        "type": "tab",
        "label": "ESP8266",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "789388216fe20387",
        "type": "tab",
        "label": "TCP Java",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6f0cb3806d1189ec",
        "type": "tab",
        "label": "SensorSelector",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d2a47ac10a411bde",
        "type": "tab",
        "label": "SensorsLightsSimulator",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4cd6f9c966c96220",
        "type": "tab",
        "label": "ThermostatSimulator",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "77555c522654b2a9",
        "type": "tab",
        "label": "HumiditySimulator",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "03cc99a78ba06168",
        "type": "tab",
        "label": "AlarmSimulator",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9e7c62f885313afd",
        "type": "tab",
        "label": "MeterSimulator",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3ba8bb4804053fbb",
        "type": "tab",
        "label": "MeterHistory",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "04d92452ee88f484",
        "type": "tab",
        "label": "LoginDashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "16afc9a5b3891ca7",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "064d98e4210d441f",
        "type": "tab",
        "label": "DashboardHistory",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f32af1824fc8b3a9",
        "type": "subflow",
        "name": "AES",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 160,
                "wires": [
                    {
                        "id": "e7cf828e0379f45a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 160,
                "wires": [
                    {
                        "id": "ae2e5fbcbbddb088",
                        "port": 0
                    },
                    {
                        "id": "7d5e97506a350bef",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "mode",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-bars",
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Encrypt"
                                },
                                "v": "encrypt"
                            },
                            {
                                "l": {
                                    "en-US": "Decrypt"
                                },
                                "v": "decrypt"
                            }
                        ]
                    }
                }
            },
            {
                "name": "key",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-key"
                }
            }
        ],
        "meta": {},
        "color": "#FFCC66",
        "icon": "font-awesome/fa-key"
    },
    {
        "id": "d522a859f14a5802",
        "type": "ui_group",
        "name": "Stairways",
        "tab": "6580db574c65b058",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3ca655c4e9ec67e4",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "15a23a76210a3108",
        "type": "mqtt-broker",
        "name": "Mosquitto",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "405da9c1f5793bcf",
        "type": "websocket-listener",
        "path": "/home",
        "wholemsg": "false"
    },
    {
        "id": "b35451f1ed04aecc",
        "type": "mongodb4-client",
        "name": "MongoDB Database",
        "protocol": "mongodb",
        "hostname": "",
        "port": "",
        "dbName": "Test-d",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "mongodb://localhost:27017",
        "advanced": "{}",
        "uriTabActive": "tab-uri-advanced"
    },
    {
        "id": "60fbdd21e3048103",
        "type": "mongodb4-client",
        "name": "myHome",
        "protocol": "mongodb",
        "hostname": "",
        "port": "",
        "dbName": "Smarthome",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "mongodb://iot:iot@centore.synology.me:27017/",
        "advanced": "{}",
        "uriTabActive": "tab-uri-advanced"
    },
    {
        "id": "6580db574c65b058",
        "type": "ui_tab",
        "name": "Dashboard Home A",
        "icon": "fa-home",
        "order": 3,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "63129cfd88f33a1f",
        "type": "ui_group",
        "name": "Livingroom",
        "tab": "6580db574c65b058",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b6bdf8e4202b23aa",
        "type": "ui_group",
        "name": "Bedroom",
        "tab": "6580db574c65b058",
        "order": 3,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "834524af513d499a",
        "type": "ui_group",
        "name": "Bathroom",
        "tab": "6580db574c65b058",
        "order": 4,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f1d3bb24ddf3b7a8",
        "type": "ui_group",
        "name": "Kitchen",
        "tab": "6580db574c65b058",
        "order": 5,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b85050740fbca42e",
        "type": "ui_tab",
        "name": "Dashboard Home B",
        "icon": "fa-home",
        "order": 6,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "f823859dcc051cff",
        "type": "ui_group",
        "name": "Stairways",
        "tab": "b85050740fbca42e",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f079f8659d276c2f",
        "type": "ui_group",
        "name": "Hallway",
        "tab": "b85050740fbca42e",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9991a1f951da63bc",
        "type": "ui_group",
        "name": "Livingroom",
        "tab": "b85050740fbca42e",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "91a0e30a03bbc122",
        "type": "ui_group",
        "name": "Bedroom",
        "tab": "b85050740fbca42e",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e8a7acec31bd9eab",
        "type": "ui_group",
        "name": "Bathroom",
        "tab": "b85050740fbca42e",
        "order": 5,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e37e4a5fb3a97099",
        "type": "ui_group",
        "name": "Kitchen",
        "tab": "b85050740fbca42e",
        "order": 6,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "235055ef76e0540c",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "9991a1f951da63bc",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "292af24cd47bfff0",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "f823859dcc051cff",
        "order": 5,
        "width": "1",
        "height": "3"
    },
    {
        "id": "1d6291427cb9c775",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "f079f8659d276c2f",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "db42be43104629e7",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "91a0e30a03bbc122",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "6882e3c5f40891d9",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "e8a7acec31bd9eab",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "f94bb515988acb3f",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "e37e4a5fb3a97099",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "35cd3e1049f7a2da",
        "type": "ui_tab",
        "name": "Home A Consumption",
        "icon": "fa-info",
        "order": 4,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "1f2b193cd8e98344",
        "type": "ui_group",
        "name": "Stairways",
        "tab": "35cd3e1049f7a2da",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6c55d7ebc9043bb8",
        "type": "ui_group",
        "name": "Livingroom",
        "tab": "35cd3e1049f7a2da",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "446ed46087bb1d1d",
        "type": "ui_group",
        "name": "Bedroom",
        "tab": "35cd3e1049f7a2da",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1357d66c0cde404a",
        "type": "ui_group",
        "name": "Bathroom",
        "tab": "35cd3e1049f7a2da",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "35d16b4ded9940a4",
        "type": "ui_group",
        "name": "Kitchen",
        "tab": "35cd3e1049f7a2da",
        "order": 5,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "78c279e84e760c61",
        "type": "ui_tab",
        "name": "Home B Consumption",
        "icon": "fa-info",
        "order": 7,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "ceadd350aa1a6b5c",
        "type": "ui_group",
        "name": "Stairways",
        "tab": "78c279e84e760c61",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d466612b0e177435",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "1357d66c0cde404a",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "630a0b46771788f9",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "446ed46087bb1d1d",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "21a456237aee776c",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "6c55d7ebc9043bb8",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "f6b38e94bbce14aa",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "1f2b193cd8e98344",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "233893e6bac0fe16",
        "type": "ui_group",
        "name": "Hallway",
        "tab": "78c279e84e760c61",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "461ea8191f77224a",
        "type": "ui_group",
        "name": "Livingroom",
        "tab": "78c279e84e760c61",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8451d1b9b67f42e8",
        "type": "ui_group",
        "name": "Bedroom",
        "tab": "78c279e84e760c61",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0e858b590a5dd6bc",
        "type": "ui_group",
        "name": "Bathroom",
        "tab": "78c279e84e760c61",
        "order": 5,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "11e6037da70e14a7",
        "type": "ui_group",
        "name": "Kitchen",
        "tab": "78c279e84e760c61",
        "order": 6,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c5ead36f34db7439",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "233893e6bac0fe16",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "7383913f55c4201d",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "233893e6bac0fe16",
        "order": 3,
        "width": "1",
        "height": "3"
    },
    {
        "id": "125bafc9b85b6807",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "ceadd350aa1a6b5c",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "d8629ba4b49023db",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "461ea8191f77224a",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "3d34cff7f9ee9cd8",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "8451d1b9b67f42e8",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "e38a9f9cbb45b1e6",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "0e858b590a5dd6bc",
        "order": 4,
        "width": "1",
        "height": "1"
    },
    {
        "id": "9379261fa1b32620",
        "type": "ui_tab",
        "name": "Home",
        "icon": "fa-bar-chart",
        "order": 2,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "631a411bae7eac16",
        "type": "ui_group",
        "name": "Login",
        "tab": "e4f779a5d991cdea",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8419912140f081ad",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "d522a859f14a5802",
        "order": 2,
        "width": "1",
        "height": "3"
    },
    {
        "id": "f1ab537f61d5d941",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "63129cfd88f33a1f",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "5572112e702b15c2",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "b6bdf8e4202b23aa",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "83d19ece8098f5eb",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "834524af513d499a",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "84722738c4b056a9",
        "type": "ui_spacer",
        "z": "16afc9a5b3891ca7",
        "name": "spacer",
        "group": "f1d3bb24ddf3b7a8",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "e4f779a5d991cdea",
        "type": "ui_tab",
        "name": "Login",
        "icon": "fa-user-circle",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7df3b75bbf8bc260",
        "type": "ui_group",
        "name": "Stats",
        "tab": "9379261fa1b32620",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1b88d39bbc7c01f5",
        "type": "ui_spacer",
        "z": "064d98e4210d441f",
        "name": "spacer",
        "group": "1357d66c0cde404a",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "3b1135bca1ef7977",
        "type": "ui_spacer",
        "z": "064d98e4210d441f",
        "name": "spacer",
        "group": "35d16b4ded9940a4",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "4126247b669e79d4",
        "type": "ui_spacer",
        "z": "064d98e4210d441f",
        "name": "spacer",
        "group": "1357d66c0cde404a",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "3b9341cd067ca883",
        "type": "ui_spacer",
        "z": "064d98e4210d441f",
        "name": "spacer",
        "group": "1357d66c0cde404a",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "8d46389347062294",
        "type": "ui_spacer",
        "z": "3ba8bb4804053fbb",
        "name": "spacer",
        "group": "8451d1b9b67f42e8",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "35c801d41ad6f8fe",
        "type": "ui_group",
        "name": "Bathroom Month Consumption",
        "tab": "35cd3e1049f7a2da",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7b772cbcfe439096",
        "type": "ui_tab",
        "name": "Home A History",
        "icon": "fa-history",
        "order": 5,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "e2d8566ae76138a2",
        "type": "ui_group",
        "name": "Bathroom Month Consumption",
        "tab": "7b772cbcfe439096",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cec57d203691c372",
        "type": "ui_group",
        "name": "Kitchen Month Consumption",
        "tab": "7b772cbcfe439096",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "30c66edc1c32d01e",
        "type": "ui_group",
        "name": "Stairways Month Consumption",
        "tab": "7b772cbcfe439096",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4076fe71ca426db9",
        "type": "ui_group",
        "name": "Livingroom Month Consumption",
        "tab": "7b772cbcfe439096",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d2100cf234423876",
        "type": "ui_group",
        "name": "Bedroom Month Consumption",
        "tab": "7b772cbcfe439096",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3045e260fafab1fe",
        "type": "ui_tab",
        "name": "Home B History",
        "icon": "fa-history",
        "disabled": false,
        "hidden": true
    },
    {
        "id": "5d5b8d305ad6d842",
        "type": "ui_group",
        "name": "Bathroom Month Consumption",
        "tab": "3045e260fafab1fe",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1fe21f09c22f860e",
        "type": "ui_group",
        "name": "Kitchen Month Consumption",
        "tab": "3045e260fafab1fe",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "07c0bee22839a08a",
        "type": "ui_group",
        "name": "Stairways Month Consumption",
        "tab": "3045e260fafab1fe",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f07648551db59537",
        "type": "ui_group",
        "name": "Livingroom Month Consumption",
        "tab": "3045e260fafab1fe",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dabc92ecc390ce9f",
        "type": "ui_group",
        "name": "Bedroom Month Consumption",
        "tab": "3045e260fafab1fe",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "06f4d4a886b979c3",
        "type": "ui_group",
        "name": "Hallway Month Consumption",
        "tab": "3045e260fafab1fe",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e7cf828e0379f45a",
        "type": "switch",
        "z": "f32af1824fc8b3a9",
        "name": "",
        "property": "mode",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "encrypt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "decrypt",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 160,
        "wires": [
            [
                "ae2e5fbcbbddb088"
            ],
            [
                "7d5e97506a350bef"
            ]
        ]
    },
    {
        "id": "ae2e5fbcbbddb088",
        "type": "function",
        "z": "f32af1824fc8b3a9",
        "name": "Encryption",
        "func": "var key = CryptoJs.enc.Base64.parse(env.get('key'));\nvar srcs = CryptoJs.enc.Utf8.parse(msg.payload);\nvar encrypted = CryptoJs.AES.encrypt(srcs, key, { mode: CryptoJs.mode.ECB, padding: CryptoJs.pad.Pkcs7 });\nmsg.payload = encrypted.toString();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CryptoJs",
                "module": "crypto-js"
            }
        ],
        "x": 430,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7d5e97506a350bef",
        "type": "function",
        "z": "f32af1824fc8b3a9",
        "name": "Decryption",
        "func": "var key = CryptoJs.enc.Base64.parse(env.get('key'));\nvar decrypted = CryptoJs.AES.decrypt(msg.payload, key, { mode: CryptoJs.mode.ECB, padding: CryptoJs.pad.Pkcs7 });\nmsg.payload = CryptoJs.enc.Utf8.stringify(decrypted).toString();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CryptoJs",
                "module": "crypto-js"
            }
        ],
        "x": 430,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d985d29e4f6315b3",
        "type": "tcp in",
        "z": "71d3bf2af11879c6",
        "name": "",
        "server": "server",
        "host": "",
        "port": "8888",
        "datamode": "single",
        "datatype": "utf8",
        "newline": "",
        "topic": "",
        "trim": false,
        "base64": false,
        "tls": "",
        "x": 520,
        "y": 280,
        "wires": [
            [
                "b630a82928986c8d",
                "24951ecc08131056"
            ]
        ]
    },
    {
        "id": "34efaf1de2a8f531",
        "type": "ui_gauge",
        "z": "71d3bf2af11879c6",
        "name": "",
        "group": "7df3b75bbf8bc260",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "wave",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 980,
        "y": 180,
        "wires": []
    },
    {
        "id": "b630a82928986c8d",
        "type": "function",
        "z": "71d3bf2af11879c6",
        "name": "3 way split",
        "func": "var msg1 = {}; //humidity\nvar msg2 = {}; //temperature\nvar msg3 = {}; //light\n\nvar array = msg.payload.split('%');\n\nmsg1.payload = array[0];\nmsg2.payload = array[1];\nmsg3.payload = array[2];\n\nreturn [msg1, msg2, msg3];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 280,
        "wires": [
            [
                "3aa8c2fc.c7a1be",
                "34efaf1de2a8f531"
            ],
            [
                "4ad5996b.afabd",
                "b593bae79b4ea1a5"
            ],
            [
                "5977b03f.2464a8",
                "5b7f833df3aac51e"
            ]
        ]
    },
    {
        "id": "3aa8c2fc.c7a1be",
        "type": "debug",
        "z": "71d3bf2af11879c6",
        "name": "Humidity",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "4ad5996b.afabd",
        "type": "debug",
        "z": "71d3bf2af11879c6",
        "name": "Termperature",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 300,
        "wires": []
    },
    {
        "id": "5977b03f.2464a8",
        "type": "debug",
        "z": "71d3bf2af11879c6",
        "name": "Light intensity",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 380,
        "wires": []
    },
    {
        "id": "b593bae79b4ea1a5",
        "type": "ui_gauge",
        "z": "71d3bf2af11879c6",
        "name": "",
        "group": "7df3b75bbf8bc260",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#15abdd",
            "#5b9f4a",
            "#ff6702"
        ],
        "seg1": "18",
        "seg2": "27",
        "diff": false,
        "className": "",
        "x": 990,
        "y": 260,
        "wires": []
    },
    {
        "id": "5b7f833df3aac51e",
        "type": "ui_gauge",
        "z": "71d3bf2af11879c6",
        "name": "",
        "group": "7df3b75bbf8bc260",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Light intensity",
        "label": "RAW",
        "format": "{{value}}",
        "min": 0,
        "max": "1024",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1000,
        "y": 340,
        "wires": []
    },
    {
        "id": "3f84b61ffa414f8c",
        "type": "mongodb4",
        "z": "71d3bf2af11879c6",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "myHome",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "myHome",
        "x": 980,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "24951ecc08131056",
        "type": "function",
        "z": "71d3bf2af11879c6",
        "name": "parser",
        "func": "var array = msg.payload.split('%');\n\nmsg.payload = [{\n    temperature: {\n        value: parseFloat(array[1]),\n        unit: \"°C\"\n    }, humidity: {\n        value: parseFloat(array[0]),\n        unit: \"%\"\n    }, light: {\n        value: parseInt(array[2]),\n        unit: \"RAW\"\n    }}];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 440,
        "wires": [
            [
                "3f84b61ffa414f8c"
            ]
        ]
    },
    {
        "id": "deeb12fc62d9129f",
        "type": "tcp in",
        "z": "789388216fe20387",
        "name": "",
        "server": "server",
        "host": "127.0.0.1",
        "port": "9091",
        "datamode": "single",
        "datatype": "utf8",
        "newline": "",
        "topic": "",
        "trim": false,
        "base64": false,
        "tls": "",
        "x": 530,
        "y": 380,
        "wires": [
            [
                "0ef93e7c6a1cf39f"
            ]
        ]
    },
    {
        "id": "2a3399ced5b71183",
        "type": "change",
        "z": "789388216fe20387",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "ip",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "port",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_session",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_msgid",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 380,
        "wires": [
            [
                "b55f94be10462a0b"
            ]
        ]
    },
    {
        "id": "b55f94be10462a0b",
        "type": "switch",
        "z": "789388216fe20387",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "LOGIN \\w+ \\w+",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "SET",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "REQ",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1050,
        "y": 380,
        "wires": [
            [
                "2d0e3bb89626b1fc"
            ],
            [
                "a531378ae6e6e362"
            ],
            [
                "3c09eeaee9d548fc"
            ]
        ],
        "outputLabels": [
            "LOGIN",
            "SET",
            "REQ"
        ]
    },
    {
        "id": "2d0e3bb89626b1fc",
        "type": "function",
        "z": "789388216fe20387",
        "name": "prepareFind",
        "func": "const query = {\n  username: msg.payload.split(\" \")[1],\n  password: msg.payload.split(\" \")[2]\n};\n\nconst options = {\n  projection: {_id: 0, home: 1}\n};\n\nmsg.payload = [query, options];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 360,
        "wires": [
            [
                "1fde9c424068c7af"
            ]
        ]
    },
    {
        "id": "1fde9c424068c7af",
        "type": "mongodb4",
        "z": "789388216fe20387",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "Users",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1430,
        "y": 360,
        "wires": [
            [
                "1f14470a8f8fd7b8"
            ]
        ]
    },
    {
        "id": "1f14470a8f8fd7b8",
        "type": "function",
        "z": "789388216fe20387",
        "name": "checkResult",
        "func": "if (msg.payload && msg.payload.length > 0) {\n    msg.payload = \"LOGIN OK \" + msg.payload[0].home;\n} else {\n    msg.payload = \"LOGIN KO\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 360,
        "wires": [
            [
                "6a54f48f5a4cbfdb"
            ]
        ]
    },
    {
        "id": "d0feac426f96cd4d",
        "type": "tcp out",
        "z": "789388216fe20387",
        "name": "",
        "host": "127.0.0.1",
        "port": "9090",
        "beserver": "client",
        "base64": false,
        "end": true,
        "tls": "",
        "x": 4130,
        "y": 100,
        "wires": []
    },
    {
        "id": "a531378ae6e6e362",
        "type": "function",
        "z": "789388216fe20387",
        "name": "splitter",
        "func": "let splitted = msg.payload.split(\" \")\n\nmsg.object = {\"command\": splitted[0],\n              \"id\": splitted[1],\n              \"home\": splitted[2],\n              \"room\": splitted[3],\n              \"value\": splitted[4]}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 460,
        "wires": [
            [
                "ce24b2f70515de9d"
            ]
        ]
    },
    {
        "id": "ab6a7e97e0d6d9f4",
        "type": "mongodb4",
        "z": "789388216fe20387",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "HVAC",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 2050,
        "y": 580,
        "wires": [
            [
                "c5c8e02ac8cf7b76"
            ]
        ]
    },
    {
        "id": "bf338d047d0ca196",
        "type": "function",
        "z": "789388216fe20387",
        "name": "prepareUpdate",
        "func": "const query = {\n    idx: parseInt(msg.object.id),\n    home: msg.object.home,\n    room: msg.object.room\n}\nconst update = {\n    $set: { setpoint: parseFloat(msg.object.value) }\n};\n\nmsg.payload = [query, update];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 580,
        "wires": [
            [
                "ab6a7e97e0d6d9f4"
            ]
        ]
    },
    {
        "id": "de95eaa3e9b3e7a7",
        "type": "switch",
        "z": "789388216fe20387",
        "name": "selectDevice",
        "property": "object.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "btwn",
                "v": "70",
                "vt": "num",
                "v2": "71",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "120",
                "vt": "num",
                "v2": "137",
                "v2t": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1630,
        "y": 460,
        "wires": [
            [
                "9e07db9dbafd40b3"
            ],
            [
                "bf338d047d0ca196"
            ]
        ],
        "outputLabels": [
            "Alarm A",
            "Temp & Hum"
        ]
    },
    {
        "id": "ce24b2f70515de9d",
        "type": "change",
        "z": "789388216fe20387",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 460,
        "wires": [
            [
                "de95eaa3e9b3e7a7"
            ]
        ]
    },
    {
        "id": "1c6577e1adc407ed",
        "type": "change",
        "z": "789388216fe20387",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "object.value",
                "pt": "msg",
                "to": "ARMED",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2480,
        "y": 440,
        "wires": [
            [
                "74454c91a3a11009"
            ]
        ]
    },
    {
        "id": "4e369f5f676a0d03",
        "type": "change",
        "z": "789388216fe20387",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "object.value",
                "pt": "msg",
                "to": "DEACTIVATED",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2480,
        "y": 480,
        "wires": [
            [
                "74454c91a3a11009"
            ]
        ]
    },
    {
        "id": "040e3f3208641683",
        "type": "mongodb4",
        "z": "789388216fe20387",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "alarm",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 2150,
        "y": 460,
        "wires": [
            [
                "6c1f25f3b99b6242"
            ]
        ]
    },
    {
        "id": "ddbdba1e3d8dc9a4",
        "type": "template",
        "z": "789388216fe20387",
        "name": "alarmTemplate",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SET {{object.id}} {{object.home}} {{object.room}} {{object.value}} undefined undefined",
        "output": "str",
        "x": 3580,
        "y": 500,
        "wires": [
            [
                "068885da577a950f",
                "11056f91194ae282"
            ]
        ]
    },
    {
        "id": "e0fa37b1d0ce7858",
        "type": "comment",
        "z": "789388216fe20387",
        "name": "ALARM",
        "info": "",
        "x": 1830,
        "y": 420,
        "wires": []
    },
    {
        "id": "7d438fb55c3bec69",
        "type": "comment",
        "z": "789388216fe20387",
        "name": "TEMP & HUM",
        "info": "",
        "x": 1850,
        "y": 540,
        "wires": []
    },
    {
        "id": "9e07db9dbafd40b3",
        "type": "switch",
        "z": "789388216fe20387",
        "name": "",
        "property": "object.value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "TOGGLE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1830,
        "y": 460,
        "wires": [
            [
                "644af7d437b4fb61"
            ]
        ]
    },
    {
        "id": "644af7d437b4fb61",
        "type": "function",
        "z": "789388216fe20387",
        "name": "prepareFind",
        "func": "const query = {\n    idx: parseInt(msg.object.id),\n    home: msg.object.home\n};\n\nconst options = {};\n\nmsg.payload = [query, options];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 460,
        "wires": [
            [
                "040e3f3208641683"
            ]
        ]
    },
    {
        "id": "6c1f25f3b99b6242",
        "type": "switch",
        "z": "789388216fe20387",
        "name": "",
        "property": "payload[0].status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DEACTIVATED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ARMED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2290,
        "y": 460,
        "wires": [
            [
                "1c6577e1adc407ed"
            ],
            [
                "4e369f5f676a0d03"
            ]
        ],
        "outputLabels": [
            "DEACTIVATED",
            "ARMED"
        ]
    },
    {
        "id": "68c2a434611251de",
        "type": "function",
        "z": "789388216fe20387",
        "name": "prepareUpdate",
        "func": "const query = {\n    idx: parseInt(msg.object.id),\n    home: msg.object.home\n};\n\nconst update = {\n    $set: { status: msg.object.value }\n};\n\nmsg.payload = [query, update];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2840,
        "y": 460,
        "wires": [
            [
                "485351191ae8db33"
            ]
        ]
    },
    {
        "id": "485351191ae8db33",
        "type": "mongodb4",
        "z": "789388216fe20387",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "alarm",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 3010,
        "y": 460,
        "wires": [
            [
                "e4b7cdd1b0fc6a2d"
            ]
        ]
    },
    {
        "id": "e4b7cdd1b0fc6a2d",
        "type": "switch",
        "z": "789388216fe20387",
        "name": "",
        "property": "payload.modifiedCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3170,
        "y": 460,
        "wires": [
            [
                "5dac4432af6f4c68"
            ]
        ]
    },
    {
        "id": "5dac4432af6f4c68",
        "type": "change",
        "z": "789388216fe20387",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3350,
        "y": 460,
        "wires": [
            [
                "ddbdba1e3d8dc9a4",
                "a4c8dbacfb6bb22b"
            ]
        ]
    },
    {
        "id": "c5c8e02ac8cf7b76",
        "type": "switch",
        "z": "789388216fe20387",
        "name": "",
        "property": "payload.modifiedCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2210,
        "y": 580,
        "wires": [
            [
                "bb1359564177e507"
            ]
        ]
    },
    {
        "id": "84234ac53fcc39d3",
        "type": "mongodb4",
        "z": "789388216fe20387",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "HVAC",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 2530,
        "y": 580,
        "wires": [
            [
                "f76c0b4322562771"
            ]
        ]
    },
    {
        "id": "bb1359564177e507",
        "type": "function",
        "z": "789388216fe20387",
        "name": "prepareFind",
        "func": "const query = {\n    idx: parseInt(msg.object.id),\n    home: msg.object.home,\n    room: msg.object.room\n}\n\nconst options = {};\n\nmsg.payload = [query, options];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 580,
        "wires": [
            [
                "84234ac53fcc39d3"
            ]
        ]
    },
    {
        "id": "f76c0b4322562771",
        "type": "change",
        "z": "789388216fe20387",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "object",
                "pt": "msg"
            },
            {
                "t": "move",
                "p": "payload[0]",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2700,
        "y": 580,
        "wires": [
            [
                "6a46b8bb9ba803f7"
            ]
        ]
    },
    {
        "id": "802e7a075073610c",
        "type": "function",
        "z": "789388216fe20387",
        "name": "ToggleTemp",
        "func": "if(msg.payload.current < msg.payload.setpoint) {\n    msg.payload.status = true;\n} else {\n    msg.payload.status = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 560,
        "wires": [
            [
                "94853dbb03301de7"
            ]
        ]
    },
    {
        "id": "94853dbb03301de7",
        "type": "template",
        "z": "789388216fe20387",
        "name": "HVACTemplate",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SET {{payload.idx}} {{payload.home}} {{payload.room}} {{payload.status}} {{payload.current}} {{payload.setpoint}}",
        "output": "str",
        "x": 3280,
        "y": 580,
        "wires": [
            [
                "0337db0fe2882b31"
            ]
        ]
    },
    {
        "id": "3c09eeaee9d548fc",
        "type": "function",
        "z": "789388216fe20387",
        "name": "splitter",
        "func": "let splitted = msg.payload.split(\" \")\n\nmsg.object = {\"command\": splitted[0],\n              \"home\": splitted[1],\n              \"value\": splitted[2]}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 680,
        "wires": [
            [
                "b90bfeb236b276b6"
            ]
        ]
    },
    {
        "id": "b90bfeb236b276b6",
        "type": "change",
        "z": "789388216fe20387",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 680,
        "wires": [
            [
                "543a53edd5d6a0cf"
            ]
        ]
    },
    {
        "id": "7c3c6c0273432ece",
        "type": "mongodb4",
        "z": "789388216fe20387",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "alarm",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 1830,
        "y": 680,
        "wires": [
            [
                "fa2250a62f601e63"
            ]
        ]
    },
    {
        "id": "543a53edd5d6a0cf",
        "type": "function",
        "z": "789388216fe20387",
        "name": "prepareFindAlarm",
        "func": "const query = {\n    home: msg.object.home\n};\n\nconst options = {};\n\nmsg.payload = [query, options];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 680,
        "wires": [
            [
                "7c3c6c0273432ece"
            ]
        ]
    },
    {
        "id": "fa2250a62f601e63",
        "type": "change",
        "z": "789388216fe20387",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload[0]",
                "pt": "msg",
                "to": "alarm",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "alarm._id",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2000,
        "y": 680,
        "wires": [
            [
                "cbade30de6f4cf5c"
            ]
        ]
    },
    {
        "id": "cbade30de6f4cf5c",
        "type": "function",
        "z": "789388216fe20387",
        "name": "prepareFindHVAC",
        "func": "const query = {\n    home: msg.object.home\n};\n\nconst options = {};\n\nmsg.payload = [query, options];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 680,
        "wires": [
            [
                "4a2833cbfd5e4527"
            ]
        ]
    },
    {
        "id": "4a2833cbfd5e4527",
        "type": "mongodb4",
        "z": "789388216fe20387",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "HVAC",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 2390,
        "y": 680,
        "wires": [
            [
                "d978d44d271b3e33"
            ]
        ]
    },
    {
        "id": "d978d44d271b3e33",
        "type": "change",
        "z": "789388216fe20387",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "object",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2570,
        "y": 680,
        "wires": [
            [
                "76c7afc4230e239d",
                "c3b127d2cf265883"
            ]
        ]
    },
    {
        "id": "76c7afc4230e239d",
        "type": "template",
        "z": "789388216fe20387",
        "name": "alarmTemplate",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SET {{alarm.idx}} {{alarm.home}} undefined {{alarm.status}} undefined undefined",
        "output": "str",
        "x": 2780,
        "y": 720,
        "wires": [
            [
                "6462b7e1a19a435f"
            ]
        ]
    },
    {
        "id": "c3b127d2cf265883",
        "type": "split",
        "z": "789388216fe20387",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2750,
        "y": 680,
        "wires": [
            [
                "6a46b8bb9ba803f7"
            ]
        ]
    },
    {
        "id": "068885da577a950f",
        "type": "link out",
        "z": "789388216fe20387",
        "name": "SEND TCP",
        "mode": "link",
        "links": [
            "e70522d9e895fe52"
        ],
        "x": 3705,
        "y": 500,
        "wires": []
    },
    {
        "id": "0337db0fe2882b31",
        "type": "link out",
        "z": "789388216fe20387",
        "name": "SEND TCP",
        "mode": "link",
        "links": [
            "e70522d9e895fe52"
        ],
        "x": 3405,
        "y": 580,
        "wires": []
    },
    {
        "id": "6a54f48f5a4cbfdb",
        "type": "link out",
        "z": "789388216fe20387",
        "name": "SEND TCP",
        "mode": "link",
        "links": [
            "e70522d9e895fe52"
        ],
        "x": 1715,
        "y": 360,
        "wires": []
    },
    {
        "id": "6462b7e1a19a435f",
        "type": "link out",
        "z": "789388216fe20387",
        "name": "SEND TCP",
        "mode": "link",
        "links": [
            "e70522d9e895fe52"
        ],
        "x": 2915,
        "y": 720,
        "wires": []
    },
    {
        "id": "e70522d9e895fe52",
        "type": "link in",
        "z": "789388216fe20387",
        "name": "TCP",
        "links": [
            "0337db0fe2882b31",
            "068885da577a950f",
            "6462b7e1a19a435f",
            "6a54f48f5a4cbfdb"
        ],
        "x": 3675,
        "y": 100,
        "wires": [
            [
                "d8351c442c7cd43f"
            ]
        ]
    },
    {
        "id": "593527a32292e699",
        "type": "delay",
        "z": "789388216fe20387",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3930,
        "y": 100,
        "wires": [
            [
                "d0feac426f96cd4d"
            ]
        ]
    },
    {
        "id": "0d37253fbd99b75f",
        "type": "comment",
        "z": "789388216fe20387",
        "name": "device latency emulation",
        "info": "",
        "x": 3970,
        "y": 60,
        "wires": []
    },
    {
        "id": "6a46b8bb9ba803f7",
        "type": "switch",
        "z": "789388216fe20387",
        "name": "",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Temperature",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Humidity",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2930,
        "y": 580,
        "wires": [
            [
                "802e7a075073610c"
            ],
            [
                "bb05e72a63a4f53d"
            ]
        ]
    },
    {
        "id": "bb05e72a63a4f53d",
        "type": "function",
        "z": "789388216fe20387",
        "name": "ToggleHum",
        "func": "if(msg.payload.current < msg.payload.setpoint*0.90 || msg.payload.current > msg.payload.setpoint*1.1) {\n    msg.payload.status = true;\n} else {\n    msg.payload.status = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 600,
        "wires": [
            [
                "94853dbb03301de7"
            ]
        ]
    },
    {
        "id": "a4c8dbacfb6bb22b",
        "type": "function",
        "z": "789388216fe20387",
        "name": "setAlarmStatus",
        "func": "global.set('Alarm_status_' + msg.object.home, msg.object.value)",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3580,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "0ef93e7c6a1cf39f",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "789388216fe20387",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 710,
        "y": 380,
        "wires": [
            [
                "2a3399ced5b71183"
            ]
        ]
    },
    {
        "id": "d8351c442c7cd43f",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "789388216fe20387",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 3770,
        "y": 100,
        "wires": [
            [
                "593527a32292e699"
            ]
        ]
    },
    {
        "id": "74454c91a3a11009",
        "type": "function",
        "z": "789388216fe20387",
        "name": "getTime",
        "func": "//ottieni lo stato corrente dell'allarme\nlet alarmState = msg.object.value;\nlet home = msg.object.home; \n\n//timestamp corrente\nlet currentTimestamp = Date.now();\n\n//variabile globale da usare in base alla smart home\nlet globalVarName = (home === 'A') ? \"alarmDataA\" : \"alarmDataB\";\nlet alarmData = global.get(globalVarName) || {};\n\n//se lo stato è \"armed\", salva il timestamp di inizio\nif (alarmState === \"ARMED\") {\n    alarmData.startTime = currentTimestamp;\n    node.warn(\"Alarm armed at \" + new Date(currentTimestamp).toLocaleString() + \" for home \" + home);\n    msg.goCons = false;\n}\n\n// Se lo stato è \"disarmed\", calcola la differenza di tempo\nif (alarmState === \"DEACTIVATED\" && alarmData.startTime) {\n    let durationMs = currentTimestamp - alarmData.startTime;\n\n    //conversione in ore, minuti e secondi\n    let durationSeconds = Math.floor(durationMs / 1000);\n    let durationMinutes = Math.floor(durationSeconds / 60);\n    let durationHours = Math.floor(durationMinutes / 60);\n    durationMinutes = durationMinutes % 60;\n    durationSeconds = durationSeconds % 60;\n\n    // Salvataggio durata nel log globale\n    alarmData.duration = {\n        hours: durationHours,\n        minutes: durationMinutes,\n        seconds: durationSeconds\n    };\n\n    node.warn(\"Alarm disarmed after \" + durationHours + \" hours, \" + durationMinutes + \" minutes, and \" + durationSeconds + \" seconds for home \" + home);\n\n    // Resetta il tempo di inizio\n    alarmData.startTime = null;\n\n    msg.goCons = true; //vai a calcolare il consumo energetico\n}\n\n// Salva la variabile globale aggiornata\nglobal.set(globalVarName, alarmData);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2660,
        "y": 460,
        "wires": [
            [
                "68c2a434611251de",
                "f4c21751d240c1b3"
            ]
        ]
    },
    {
        "id": "f4c21751d240c1b3",
        "type": "switch",
        "z": "789388216fe20387",
        "name": "",
        "property": "goCons",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2810,
        "y": 420,
        "wires": [
            [
                "273cc149f43f7033"
            ]
        ]
    },
    {
        "id": "273cc149f43f7033",
        "type": "link out",
        "z": "789388216fe20387",
        "name": "AlarmSysOut",
        "mode": "link",
        "links": [
            "95c1084253b564a8",
            "e7f924cbf467f6a3"
        ],
        "x": 2895,
        "y": 420,
        "wires": []
    },
    {
        "id": "6b66e220b215c9a6",
        "type": "comment",
        "z": "789388216fe20387",
        "name": "va a generare il consumo",
        "info": "",
        "x": 2870,
        "y": 380,
        "wires": []
    },
    {
        "id": "8caf5872d7163e0a",
        "type": "link in",
        "z": "789388216fe20387",
        "name": "link in 1",
        "links": [
            "18307357188002b6"
        ],
        "x": 3105,
        "y": 520,
        "wires": [
            [
                "9227aefe529e4149"
            ]
        ]
    },
    {
        "id": "9227aefe529e4149",
        "type": "switch",
        "z": "789388216fe20387",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ALARM HOME A: Intrusion Detected!",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ALARM HOME B: Intrusion Detected!",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3210,
        "y": 520,
        "wires": [
            [
                "a17359f21d2225f7"
            ],
            [
                "8d1f1375c45bc257"
            ]
        ]
    },
    {
        "id": "a17359f21d2225f7",
        "type": "change",
        "z": "789388216fe20387",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "object.id",
                "pt": "msg",
                "to": "70",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "object.home",
                "pt": "msg",
                "to": "A",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "object.room",
                "pt": "msg",
                "to": "LIVINGROOM",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "object.value",
                "pt": "msg",
                "to": "ALARM",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3370,
        "y": 500,
        "wires": [
            [
                "ddbdba1e3d8dc9a4"
            ]
        ]
    },
    {
        "id": "8d1f1375c45bc257",
        "type": "change",
        "z": "789388216fe20387",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "object.id",
                "pt": "msg",
                "to": "71",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "object.home",
                "pt": "msg",
                "to": "B",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "object.room",
                "pt": "msg",
                "to": "HALLWAY",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "object.value",
                "pt": "msg",
                "to": "ALARM",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3370,
        "y": 540,
        "wires": [
            [
                "ddbdba1e3d8dc9a4"
            ]
        ]
    },
    {
        "id": "11056f91194ae282",
        "type": "debug",
        "z": "789388216fe20387",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3710,
        "y": 540,
        "wires": []
    },
    {
        "id": "017af295e3aae899",
        "type": "comment",
        "z": "6f0cb3806d1189ec",
        "name": "presenceSensor 0-10",
        "info": "",
        "x": 1040,
        "y": 340,
        "wires": []
    },
    {
        "id": "1d57538f5cba3153",
        "type": "comment",
        "z": "6f0cb3806d1189ec",
        "name": "Thermostat 20-28",
        "info": "",
        "x": 1030,
        "y": 440,
        "wires": []
    },
    {
        "id": "424c2bad229fc429",
        "type": "comment",
        "z": "6f0cb3806d1189ec",
        "name": "Humidity 30-38",
        "info": "",
        "x": 1020,
        "y": 540,
        "wires": []
    },
    {
        "id": "e6a9adb405a54500",
        "type": "comment",
        "z": "6f0cb3806d1189ec",
        "name": "Meter 40-53",
        "info": "",
        "x": 1010,
        "y": 640,
        "wires": []
    },
    {
        "id": "f228a36aa4929475",
        "type": "comment",
        "z": "6f0cb3806d1189ec",
        "name": "Water 60-63",
        "info": "",
        "x": 1010,
        "y": 740,
        "wires": []
    },
    {
        "id": "a0770de77162e9cb",
        "type": "function",
        "z": "6f0cb3806d1189ec",
        "name": "setHome",
        "func": "let idx = msg.idx;\nlet smartHome = null;\nlet room = null;\n\nif(idx >= 0 && idx <= 4) {\n    smartHome = 'A';\n\n    // Mappa l'indice alle stanze corrispondenti\n    switch (idx) {\n        case 0:\n            room = 'livingroom';\n            break;\n        case 1:\n            room = 'bathroom';\n            break;\n        case 2:\n            room = 'kitchen';\n            break;\n        case 3:\n            room = 'stairways';\n            break;\n        case 4:\n            room = 'bedroom';\n            break;\n        default:\n            room = 'unknown';  // Caso di sicurezza\n    }\n} \nelse if(idx >= 5 && idx <= 10) {\n    smartHome = 'B'\n\n    // Mappa l'indice alle stanze corrispondenti\n    switch (idx) {\n        case 5:\n            room = 'livingroom';\n            break;\n        case 6:\n            room = 'bathroom';\n            break;\n        case 7:\n            room = 'kitchen';\n            break;\n        case 8:\n            room = 'stairways';\n            break;\n        case 9:\n            room = 'hallway';\n            break;\n        case 10:\n            room = 'bedroom';\n            break;\n        default:\n            room = 'unknown';  // Caso di sicurezza\n    }\n}\n\nmsg.home = smartHome;\nmsg.room = room;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 380,
        "wires": [
            [
                "a48f95f7b2ea3a0e"
            ]
        ]
    },
    {
        "id": "acf8cefccd8389ef",
        "type": "function",
        "z": "6f0cb3806d1189ec",
        "name": "setHome",
        "func": "let idx = msg.idx;\nlet smartHome = null;\nlet room = null;\n\nif (idx >= 20 && idx <= 23) {\n    smartHome = 'A';\n\n    // Mappa l'indice alle stanze corrispondenti\n    switch (idx) {\n        case 20:\n            room = 'livingroom';\n            break;\n        case 21:\n            room = 'bathroom';\n            break;\n        case 22:\n            room = 'kitchen';\n            break;\n        case 23:\n            room = 'bedroom';\n            break;\n        default:\n            room = 'unknown';  // Caso di sicurezza\n    }\n}\n\nelse if (idx >= 24 && idx <= 28) {\n    smartHome = 'B'\n\n    // Mappa l'indice alle stanze corrispondenti\n    switch (idx) {\n        case 24:\n            room = 'livingroom';\n            break;\n        case 25:\n            room = 'bathroom';\n            break;\n        case 26:\n            room = 'kitchen';\n            break;\n        case 27:\n            room = 'hallway';\n            break;\n        case 28:\n            room = 'bedroom';\n            break;\n        default:\n            room = 'unknown';  // Caso di sicurezza\n    }\n}\n\nmsg.home = smartHome;\nmsg.room = room;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 480,
        "wires": [
            [
                "7b3ab8b45f58e2ff"
            ]
        ]
    },
    {
        "id": "57433e0f57b263a4",
        "type": "function",
        "z": "6f0cb3806d1189ec",
        "name": "setHome",
        "func": "let idx = msg.idx;\nlet smartHome = null;\nlet room = null;\n\nif (idx >= 30 && idx <= 33) {\n    smartHome = 'A';\n\n    // Mappa l'indice alle stanze corrispondenti\n    switch (idx) {\n        case 30:\n            room = 'livingroom';\n            break;\n        case 31:\n            room = 'bathroom';\n            break;\n        case 32:\n            room = 'kitchen';\n            break;\n        case 33:\n            room = 'bedroom';\n            break;\n        default:\n            room = 'unknown';  // Caso di sicurezza\n    }\n}\n\nelse if (idx >= 34 && idx <= 38) {\n    smartHome = 'B'\n\n    // Mappa l'indice alle stanze corrispondenti\n    switch (idx) {\n        case 34:\n            room = 'livingroom';\n            break;\n        case 35:\n            room = 'bathroom';\n            break;\n        case 36:\n            room = 'kitchen';\n            break;\n        case 37:\n            room = 'hallway';\n            break;\n        case 38:\n            room = 'bedroom';\n            break;\n        default:\n            room = 'unknown';  // Caso di sicurezza\n    }\n}\n\nmsg.home = smartHome;\nmsg.room = room;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 580,
        "wires": [
            [
                "1a2211f3d92198b5"
            ]
        ]
    },
    {
        "id": "a48f95f7b2ea3a0e",
        "type": "link out",
        "z": "6f0cb3806d1189ec",
        "name": "PresenceSensorOut",
        "mode": "link",
        "links": [
            "13f1b5ce469218c7"
        ],
        "x": 1105,
        "y": 380,
        "wires": []
    },
    {
        "id": "7b3ab8b45f58e2ff",
        "type": "link out",
        "z": "6f0cb3806d1189ec",
        "name": "ThermostatOut",
        "mode": "link",
        "links": [
            "b46d2c6c1c5d5755"
        ],
        "x": 1105,
        "y": 480,
        "wires": []
    },
    {
        "id": "1a2211f3d92198b5",
        "type": "link out",
        "z": "6f0cb3806d1189ec",
        "name": "HumidityOut",
        "mode": "link",
        "links": [
            "a3ee9af55558d2f2"
        ],
        "x": 1105,
        "y": 580,
        "wires": []
    },
    {
        "id": "5cd5cf35ecb7eb9d",
        "type": "function",
        "z": "6f0cb3806d1189ec",
        "name": "setHome",
        "func": "let idx = msg.idx;\nlet smartHome = null;\nlet room = null;\nlet item = null;\n\nif(idx >= 40 && idx <= 46) {\n    smartHome = 'A';\n\n    // Mappa l'indice alle stanze corrispondenti\n    switch (idx) {\n        case 40:\n            room = 'livingroom';\n            item = 'air_conditioning';\n            break;\n        case 41:\n            room = 'livingroom';\n            item = 'home_theater';\n            break;\n        case 42:\n            room = 'bathroom';\n            item = 'laundry_machine';\n            break;\n        case 43:\n            room = 'kitchen';\n            item = 'stove';\n            break;\n        case 44:\n            room = 'kitchen';\n            item = 'oven';\n            break;\n        case 45:\n            room = 'bedroom';\n            item = 'air_conditioning';\n            break;\n        case 46:\n            room = 'bedroom';\n            item = 'smart_tv';\n            break;\n        default:\n            room = 'unknown';  // Caso di sicurezza\n            item = 'unknown'; \n    }\n} \nelse if(idx >= 47 && idx <= 53) {\n    smartHome = 'B'\n\n    // Mappa l'indice alle stanze corrispondenti\n    switch (idx) {\n        case 47:\n            room = 'livingroom';\n            item = 'air_conditioning';\n            break;\n        case 48:\n            room = 'livingroom';\n            item = 'home_theater';\n            break;\n        case 49:\n            room = 'bathroom';\n            item = 'laundry_machine';\n            break;\n        case 50:\n            room = 'kitchen';\n            item = 'stove';\n            break;\n        case 51:\n            room = 'kitchen';\n            item = 'oven';\n            break;\n        case 52:\n            room = 'bedroom';\n            item = 'air_conditioning';\n            break;\n        case 53:\n            room = 'bedroom';\n            item = 'smart_tv';\n            break;\n        default:\n            room = 'unknown';  // Caso di sicurezza\n            item = 'unknown';\n    }\n}\n\nmsg.home = smartHome;\nmsg.room = room;\nmsg.item = item;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 680,
        "wires": [
            [
                "46e5ae9686e531fb"
            ]
        ]
    },
    {
        "id": "46e5ae9686e531fb",
        "type": "link out",
        "z": "6f0cb3806d1189ec",
        "name": "MeterOut",
        "mode": "link",
        "links": [
            "4e722b8691aa83f3"
        ],
        "x": 1105,
        "y": 680,
        "wires": []
    },
    {
        "id": "f5c283cd13e01e68",
        "type": "function",
        "z": "6f0cb3806d1189ec",
        "name": "setHome",
        "func": "let idx = msg.idx;\nlet smartHome = null;\nlet room = null;\nlet item = 'water';;\n\nif(idx == 60 || idx == 61) {\n    smartHome = 'A';\n\n    // Mappa l'indice alle stanze corrispondenti\n    switch (idx) {\n        case 60:\n            room = 'bathroom';\n            break;\n        case 61:\n            room = 'kitchen';\n            break;\n        default:\n            room = 'unknown';  // Caso di sicurezza \n    }\n} \nelse if(idx == 62 || idx <= 63) {\n    smartHome = 'B'\n\n    // Mappa l'indice alle stanze corrispondenti\n    switch (idx) {\n        case 62:\n            room = 'bathroom';\n            break;\n        case 63:\n            room = 'kitchen';\n            break;\n        default:\n            room = 'unknown';  // Caso di sicurezza \n    }\n}\n\nmsg.home = smartHome;\nmsg.room = room;\nmsg.item = item;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 780,
        "wires": [
            [
                "4507d4146040f7bd"
            ]
        ]
    },
    {
        "id": "4507d4146040f7bd",
        "type": "link out",
        "z": "6f0cb3806d1189ec",
        "name": "MeterOut",
        "mode": "link",
        "links": [
            "4e722b8691aa83f3"
        ],
        "x": 1105,
        "y": 780,
        "wires": []
    },
    {
        "id": "67d3484f3b7932b1",
        "type": "random",
        "z": "6f0cb3806d1189ec",
        "name": "presenceSensor",
        "low": "0",
        "high": "10",
        "inte": "true",
        "property": "idx",
        "x": 840,
        "y": 380,
        "wires": [
            [
                "a0770de77162e9cb"
            ]
        ]
    },
    {
        "id": "a6a4905d4835cf4c",
        "type": "random",
        "z": "6f0cb3806d1189ec",
        "name": "Thermostat",
        "low": "20",
        "high": "28",
        "inte": "true",
        "property": "idx",
        "x": 830,
        "y": 480,
        "wires": [
            [
                "acf8cefccd8389ef"
            ]
        ]
    },
    {
        "id": "2a410a8912165fb6",
        "type": "random",
        "z": "6f0cb3806d1189ec",
        "name": "Humidity",
        "low": "30",
        "high": "38",
        "inte": "true",
        "property": "idx",
        "x": 820,
        "y": 580,
        "wires": [
            [
                "57433e0f57b263a4"
            ]
        ]
    },
    {
        "id": "093139f9abe6a305",
        "type": "random",
        "z": "6f0cb3806d1189ec",
        "name": "Meter",
        "low": "40",
        "high": "53",
        "inte": "true",
        "property": "idx",
        "x": 810,
        "y": 680,
        "wires": [
            [
                "5cd5cf35ecb7eb9d"
            ]
        ]
    },
    {
        "id": "b1d29c161f63c9bc",
        "type": "random",
        "z": "6f0cb3806d1189ec",
        "name": "Water",
        "low": "60",
        "high": "63",
        "inte": "true",
        "property": "idx",
        "x": 810,
        "y": 780,
        "wires": [
            [
                "f5c283cd13e01e68"
            ]
        ]
    },
    {
        "id": "123fc4414361dcae",
        "type": "inject",
        "z": "6f0cb3806d1189ec",
        "name": "randomizeSensor",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 650,
        "y": 380,
        "wires": [
            [
                "67d3484f3b7932b1"
            ]
        ]
    },
    {
        "id": "6401b7a655c2ecc7",
        "type": "inject",
        "z": "6f0cb3806d1189ec",
        "name": "randomizeSensor",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 650,
        "y": 480,
        "wires": [
            [
                "a6a4905d4835cf4c"
            ]
        ]
    },
    {
        "id": "0e074e06c7b06f28",
        "type": "inject",
        "z": "6f0cb3806d1189ec",
        "name": "randomizeSensor",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 650,
        "y": 580,
        "wires": [
            [
                "2a410a8912165fb6"
            ]
        ]
    },
    {
        "id": "d60cb8d5e4b8affa",
        "type": "inject",
        "z": "6f0cb3806d1189ec",
        "name": "randomizeSensor",
        "props": [],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 650,
        "y": 680,
        "wires": [
            [
                "093139f9abe6a305"
            ]
        ]
    },
    {
        "id": "852f4672cbca60e3",
        "type": "inject",
        "z": "6f0cb3806d1189ec",
        "name": "randomizeSensor",
        "props": [],
        "repeat": "1800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 650,
        "y": 780,
        "wires": [
            [
                "b1d29c161f63c9bc"
            ]
        ]
    },
    {
        "id": "e6fd21418c046c41",
        "type": "random",
        "z": "d2a47ac10a411bde",
        "name": "sensorStatus",
        "low": "0",
        "high": "1",
        "inte": "true",
        "property": "status",
        "x": 490,
        "y": 420,
        "wires": [
            [
                "7e356f7a84747adc"
            ]
        ]
    },
    {
        "id": "7e356f7a84747adc",
        "type": "change",
        "z": "d2a47ac10a411bde",
        "name": "int to boolean",
        "rules": [
            {
                "t": "change",
                "p": "status",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "change",
                "p": "status",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 420,
        "wires": [
            [
                "35f6b5180597ba7d"
            ]
        ]
    },
    {
        "id": "35f6b5180597ba7d",
        "type": "switch",
        "z": "d2a47ac10a411bde",
        "name": "On/Off",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 420,
        "wires": [
            [
                "644a39f5abec7c8a"
            ],
            [
                "2463b95af6444f55"
            ]
        ]
    },
    {
        "id": "30d0bc1575415f83",
        "type": "mongodb4",
        "z": "d2a47ac10a411bde",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "myHome",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindLightIntensity",
        "x": 1170,
        "y": 420,
        "wires": [
            [
                "be8f6b6eeca0725a"
            ]
        ]
    },
    {
        "id": "644a39f5abec7c8a",
        "type": "function",
        "z": "d2a47ac10a411bde",
        "name": "QueryLightInt",
        "func": "// find query argument\nconst query = {};\n\n// find option argument\nconst options = {\n    sort: {\"_id\": -1 },\n    projection: {\"light.value\": 1},\n    limit: 1\n};\n\n// payload for mongodb4 node\nmsg.payload = [query, options];\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 420,
        "wires": [
            [
                "30d0bc1575415f83"
            ]
        ]
    },
    {
        "id": "13f1b5ce469218c7",
        "type": "link in",
        "z": "d2a47ac10a411bde",
        "name": "PresenceSensorIn",
        "links": [
            "a48f95f7b2ea3a0e"
        ],
        "x": 375,
        "y": 420,
        "wires": [
            [
                "e6fd21418c046c41"
            ]
        ]
    },
    {
        "id": "be8f6b6eeca0725a",
        "type": "function",
        "z": "d2a47ac10a411bde",
        "name": "ExtractLightInt",
        "func": "// Estrai l'oggetto light dall'array risultato\nlet result = msg.payload[0].light.value;\n\n// Imposta il risultato come il nuovo payload\nmsg.payload = result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 420,
        "wires": [
            [
                "df55c5f6ccd2115e"
            ]
        ]
    },
    {
        "id": "df55c5f6ccd2115e",
        "type": "function",
        "z": "d2a47ac10a411bde",
        "name": "IntensityConversion",
        "func": "// Ottieni il valore originale (range 0-1024)\nlet originalValue = msg.payload;\n\n// Esegui la proporzione per trasformarlo in un range 0-1\nlet convertedValue = 1 - (originalValue / 1024);\n\n// Tronca il valore agli ultimi 2 decimali\nconvertedValue = parseFloat(convertedValue.toFixed(2));\n\n// Imposta il risultato come nuovo payload\nmsg.intensity = convertedValue;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 420,
        "wires": [
            [
                "8d1b062e4214d740",
                "46336b6671465d73",
                "6074529663b89257"
            ]
        ]
    },
    {
        "id": "8d1b062e4214d740",
        "type": "link out",
        "z": "d2a47ac10a411bde",
        "name": "LightsOut",
        "mode": "link",
        "links": [
            "25198eafa31e46b5"
        ],
        "x": 1725,
        "y": 420,
        "wires": []
    },
    {
        "id": "30085c804f49efff",
        "type": "mqtt out",
        "z": "d2a47ac10a411bde",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1660,
        "y": 600,
        "wires": []
    },
    {
        "id": "46336b6671465d73",
        "type": "function",
        "z": "d2a47ac10a411bde",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet intensity = msg.intensity;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/light/intensity`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    intensity: intensity,    // Valore dell'intensità\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 540,
        "wires": [
            [
                "3d3660ad33c43d65"
            ]
        ]
    },
    {
        "id": "b7460753758a4d15",
        "type": "function",
        "z": "d2a47ac10a411bde",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet status = false;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/light/status`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    status: status\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 660,
        "wires": [
            [
                "443361a5fdda72f1"
            ]
        ]
    },
    {
        "id": "3d3660ad33c43d65",
        "type": "template",
        "z": "d2a47ac10a411bde",
        "name": "intensity",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.intensity}}",
        "output": "str",
        "x": 1360,
        "y": 540,
        "wires": [
            [
                "9a41082e8dac9025"
            ]
        ]
    },
    {
        "id": "2fffdd9bdebef413",
        "type": "function",
        "z": "d2a47ac10a411bde",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet intensity = 0;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/light/intensity`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    intensity: intensity,    // Valore dell'intensità\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 620,
        "wires": [
            [
                "3d3660ad33c43d65"
            ]
        ]
    },
    {
        "id": "6074529663b89257",
        "type": "function",
        "z": "d2a47ac10a411bde",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet status = true;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/light/status`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    status: status\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 580,
        "wires": [
            [
                "443361a5fdda72f1"
            ]
        ]
    },
    {
        "id": "443361a5fdda72f1",
        "type": "template",
        "z": "d2a47ac10a411bde",
        "name": "status",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.status}}",
        "output": "str",
        "x": 1350,
        "y": 640,
        "wires": [
            [
                "9a41082e8dac9025"
            ]
        ]
    },
    {
        "id": "9a41082e8dac9025",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "d2a47ac10a411bde",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1490,
        "y": 600,
        "wires": [
            [
                "30085c804f49efff"
            ]
        ]
    },
    {
        "id": "282a3aac456b191c",
        "type": "debug",
        "z": "d2a47ac10a411bde",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 480,
        "wires": []
    },
    {
        "id": "2463b95af6444f55",
        "type": "function",
        "z": "d2a47ac10a411bde",
        "name": "Info",
        "func": "msg.payload = `The ${msg.room}'s light (idx = ${msg.idx}) is OFF.`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 480,
        "wires": [
            [
                "2fffdd9bdebef413",
                "b7460753758a4d15",
                "282a3aac456b191c"
            ]
        ]
    },
    {
        "id": "c676c7719b78efe5",
        "type": "mongodb4",
        "z": "4cd6f9c966c96220",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "myHome",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindTemp",
        "x": 360,
        "y": 360,
        "wires": [
            [
                "da3b2c4e4161acc6"
            ]
        ]
    },
    {
        "id": "c6130c4b0f1de3f7",
        "type": "random",
        "z": "4cd6f9c966c96220",
        "name": "RandomValue",
        "low": "-4",
        "high": "4",
        "inte": "false",
        "property": "randomValue",
        "x": 760,
        "y": 360,
        "wires": [
            [
                "5069d91b3cf2f834"
            ]
        ]
    },
    {
        "id": "5069d91b3cf2f834",
        "type": "function",
        "z": "4cd6f9c966c96220",
        "name": "CreateFinalTempValue",
        "func": "//valore temperature reale\nlet tempReal = msg.realValue;\n\n//valore casuale generato dal nodo random\nlet randomValue = msg.randomValue;\n\n//temperatura finale da passare a java sommando i due valori\nlet finalTemp = tempReal + randomValue;\nfinalTemp = parseFloat(finalTemp.toFixed(1));\n\n// Imposta la temperatura finale\nmsg.value = finalTemp;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 460,
        "wires": [
            [
                "72b6b43154411a88",
                "490a1fa66678a41b",
                "da34df00de8cd32f"
            ]
        ]
    },
    {
        "id": "7a6cbb4ac5a2bc3e",
        "type": "function",
        "z": "4cd6f9c966c96220",
        "name": "QueryTempValue",
        "func": "// find query argument\nconst query = {};\n\n// find option argument\nconst options = {\n    sort: {\"_id\": -1 },\n    projection: {\"temperature.value\": 1},\n    limit: 1\n};\n\n// payload for mongodb4 node\nmsg.payload = [query, options];\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 360,
        "wires": [
            [
                "c676c7719b78efe5"
            ]
        ]
    },
    {
        "id": "da3b2c4e4161acc6",
        "type": "function",
        "z": "4cd6f9c966c96220",
        "name": "ExtractTempValue",
        "func": "// Estrai l'oggetto dall'array risultato\nlet result = msg.payload[0].temperature.value;\n\n// Imposta il risultato come il nuovo payload\nmsg.realValue = result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 360,
        "wires": [
            [
                "c6130c4b0f1de3f7"
            ]
        ]
    },
    {
        "id": "c7999d4d2b983633",
        "type": "comment",
        "z": "4cd6f9c966c96220",
        "name": "[-4 +4] random value",
        "info": "",
        "x": 770,
        "y": 320,
        "wires": []
    },
    {
        "id": "b46d2c6c1c5d5755",
        "type": "link in",
        "z": "4cd6f9c966c96220",
        "name": "ThermostatIn",
        "links": [
            "7b3ab8b45f58e2ff"
        ],
        "x": 45,
        "y": 360,
        "wires": [
            [
                "7a6cbb4ac5a2bc3e"
            ]
        ]
    },
    {
        "id": "da34df00de8cd32f",
        "type": "function",
        "z": "4cd6f9c966c96220",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet value = msg.value;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/temperature`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // Valore della temperatura\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 600,
        "wires": [
            [
                "99ebca8a13ecee63"
            ]
        ]
    },
    {
        "id": "99ebca8a13ecee63",
        "type": "template",
        "z": "4cd6f9c966c96220",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 600,
        "y": 600,
        "wires": [
            [
                "54e78c6fc09b7ecb"
            ]
        ]
    },
    {
        "id": "72b6b43154411a88",
        "type": "function",
        "z": "4cd6f9c966c96220",
        "name": "prepareUpdate",
        "func": "const room = msg.room;\n\nconst query = {\n    idx: parseInt(msg.idx)+100,\n    home: msg.home,\n    room: room.toUpperCase()\n}\nconst update = {\n    $set: { current: parseFloat(msg.value) }\n};\n\nmsg.payload = [query, update];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 480,
        "wires": [
            [
                "e1f98dfc2ddc50d0"
            ]
        ]
    },
    {
        "id": "e1f98dfc2ddc50d0",
        "type": "mongodb4",
        "z": "4cd6f9c966c96220",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "HVAC",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 630,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "490a1fa66678a41b",
        "type": "function",
        "z": "4cd6f9c966c96220",
        "name": "prepareFind",
        "func": "const query = {\n    idx: parseInt(msg.idx) + 100,\n    home: msg.home,\n    room: msg.room.toUpperCase()\n}\nconst option = {\n    projection: {setpoint: 1}\n};\n\nmsg.payload = [query, option];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 540,
        "wires": [
            [
                "2263fb1f93a564f7"
            ]
        ]
    },
    {
        "id": "2263fb1f93a564f7",
        "type": "mongodb4",
        "z": "4cd6f9c966c96220",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "HVAC",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 590,
        "y": 540,
        "wires": [
            [
                "4f9b3bf6dd8f8d6c"
            ]
        ]
    },
    {
        "id": "4f9b3bf6dd8f8d6c",
        "type": "function",
        "z": "4cd6f9c966c96220",
        "name": "ToggleTemp",
        "func": "if(msg.value < msg.payload[0].setpoint) {\n    msg.status = true;\n} else {\n    msg.status = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 540,
        "wires": [
            [
                "5ac771515c386a9c",
                "27e0b033df515110"
            ]
        ]
    },
    {
        "id": "5ac771515c386a9c",
        "type": "function",
        "z": "4cd6f9c966c96220",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet status = msg.status;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/temperature/status`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: status\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 540,
        "wires": [
            [
                "772125bfa444bf26"
            ]
        ]
    },
    {
        "id": "eb02ade7b63b0406",
        "type": "mqtt out",
        "z": "4cd6f9c966c96220",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1220,
        "y": 600,
        "wires": []
    },
    {
        "id": "772125bfa444bf26",
        "type": "template",
        "z": "4cd6f9c966c96220",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1060,
        "y": 540,
        "wires": [
            [
                "54e78c6fc09b7ecb"
            ]
        ]
    },
    {
        "id": "54e78c6fc09b7ecb",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "4cd6f9c966c96220",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1050,
        "y": 600,
        "wires": [
            [
                "eb02ade7b63b0406"
            ]
        ]
    },
    {
        "id": "27e0b033df515110",
        "type": "switch",
        "z": "4cd6f9c966c96220",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 890,
        "y": 480,
        "wires": [
            [
                "0ca5c8376fe41f77"
            ]
        ]
    },
    {
        "id": "8444a8d2f26b1857",
        "type": "comment",
        "z": "4cd6f9c966c96220",
        "name": "if active, create consumption",
        "info": "",
        "x": 960,
        "y": 440,
        "wires": []
    },
    {
        "id": "0ca5c8376fe41f77",
        "type": "link out",
        "z": "4cd6f9c966c96220",
        "name": "TempSysOut",
        "mode": "link",
        "links": [
            "a3a4d3243a1d873f"
        ],
        "x": 975,
        "y": 480,
        "wires": []
    },
    {
        "id": "3079b7af77458b86",
        "type": "function",
        "z": "77555c522654b2a9",
        "name": "QueryHumidityValue",
        "func": "// find query argument\nconst query = {};\n\n// find option argument\nconst options = {\n    sort: {\"_id\": -1 },\n    projection: {\"humidity.value\": 1},\n    limit: 1\n};\n\n// payload for mongodb4 node\nmsg.payload = [query, options];\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 100,
        "wires": [
            [
                "fbc2ce5aebee1139"
            ]
        ]
    },
    {
        "id": "fbc2ce5aebee1139",
        "type": "mongodb4",
        "z": "77555c522654b2a9",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "myHome",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindHumidity",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "254d51c1723ccd39"
            ]
        ]
    },
    {
        "id": "254d51c1723ccd39",
        "type": "function",
        "z": "77555c522654b2a9",
        "name": "ExtractHumidityValue",
        "func": "// Estrai l'oggetto dall'array risultato\nlet result = msg.payload[0].humidity.value;\n\n// Imposta il risultato come il nuovo payload\nmsg.humidityReal = result+40;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 100,
        "wires": [
            [
                "3a262f47d06365d8"
            ]
        ]
    },
    {
        "id": "3a262f47d06365d8",
        "type": "random",
        "z": "77555c522654b2a9",
        "name": "RandomValue",
        "low": "-4",
        "high": "4",
        "inte": "false",
        "property": "randomHumidityValue",
        "x": 840,
        "y": 100,
        "wires": [
            [
                "83b1d9eebe2ab967"
            ]
        ]
    },
    {
        "id": "f664734b2eb5093e",
        "type": "comment",
        "z": "77555c522654b2a9",
        "name": "[-4 +4] random value",
        "info": "",
        "x": 850,
        "y": 60,
        "wires": []
    },
    {
        "id": "83b1d9eebe2ab967",
        "type": "function",
        "z": "77555c522654b2a9",
        "name": "CreateFinalHumidityValue",
        "func": "//valore temperature reale\nlet humidityReal = msg.humidityReal;\n\n//valore casuale generato dal nodo random\nlet humidityRandom = msg.randomHumidityValue;\n\n//temperatura finale da passare a java sommando i due valori\nlet finalHumidity = humidityReal + humidityRandom;\nfinalHumidity = parseFloat(finalHumidity.toFixed(1));\n\n// Imposta la temperatura finale\nmsg.value = finalHumidity;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 180,
        "wires": [
            [
                "c279bfe589c64d06",
                "3f45442bbd2fcb97",
                "63a52fc44e59d9fb"
            ]
        ]
    },
    {
        "id": "a3ee9af55558d2f2",
        "type": "link in",
        "z": "77555c522654b2a9",
        "name": "HumidityIn",
        "links": [
            "1a2211f3d92198b5"
        ],
        "x": 55,
        "y": 100,
        "wires": [
            [
                "3079b7af77458b86"
            ]
        ]
    },
    {
        "id": "c279bfe589c64d06",
        "type": "function",
        "z": "77555c522654b2a9",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet value = msg.value;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/humidity`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // Valore dell'umidità\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 300,
        "wires": [
            [
                "028b1b8e3ff659ab"
            ]
        ]
    },
    {
        "id": "3e4192defd37396e",
        "type": "mqtt out",
        "z": "77555c522654b2a9",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1260,
        "y": 300,
        "wires": []
    },
    {
        "id": "028b1b8e3ff659ab",
        "type": "template",
        "z": "77555c522654b2a9",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 640,
        "y": 300,
        "wires": [
            [
                "0f9dc45cee66bb8e"
            ]
        ]
    },
    {
        "id": "3f45442bbd2fcb97",
        "type": "function",
        "z": "77555c522654b2a9",
        "name": "prepareUpdate",
        "func": "const room = msg.room;\n\nconst query = {\n    idx: parseInt(msg.idx) + 100,\n    home: msg.home,\n    room: room.toUpperCase()\n}\nconst update = {\n    $set: { current: parseFloat(msg.value) }\n};\n\nmsg.payload = [query, update];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "473f1a0b5395ed08"
            ]
        ]
    },
    {
        "id": "473f1a0b5395ed08",
        "type": "mongodb4",
        "z": "77555c522654b2a9",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "HVAC",
        "operation": "updateOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 670,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "63a52fc44e59d9fb",
        "type": "function",
        "z": "77555c522654b2a9",
        "name": "prepareFind",
        "func": "const query = {\n    idx: parseInt(msg.idx) + 100,\n    home: msg.home,\n    room: msg.room.toUpperCase()\n}\nconst option = {\n    projection: {setpoint: 1}\n};\n\nmsg.payload = [query, option];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 240,
        "wires": [
            [
                "6a27038c22529316"
            ]
        ]
    },
    {
        "id": "6a27038c22529316",
        "type": "mongodb4",
        "z": "77555c522654b2a9",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "HVAC",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 630,
        "y": 240,
        "wires": [
            [
                "941c890bb0c925f0"
            ]
        ]
    },
    {
        "id": "941c890bb0c925f0",
        "type": "function",
        "z": "77555c522654b2a9",
        "name": "ToggleHum",
        "func": "if(msg.value < msg.payload[0].setpoint*0.90 || msg.value > msg.payload[0].setpoint*1.1) {\n    msg.status = true;\n} else {\n    msg.status = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 240,
        "wires": [
            [
                "04dd9e1c45643f70",
                "e85a0f5af9489186"
            ]
        ]
    },
    {
        "id": "04dd9e1c45643f70",
        "type": "function",
        "z": "77555c522654b2a9",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet status = msg.status;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/humidity/status`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: status\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 240,
        "wires": [
            [
                "b4d52cfc469a090d"
            ]
        ]
    },
    {
        "id": "b4d52cfc469a090d",
        "type": "template",
        "z": "77555c522654b2a9",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1100,
        "y": 240,
        "wires": [
            [
                "0f9dc45cee66bb8e"
            ]
        ]
    },
    {
        "id": "0f9dc45cee66bb8e",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "77555c522654b2a9",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1090,
        "y": 300,
        "wires": [
            [
                "3e4192defd37396e"
            ]
        ]
    },
    {
        "id": "e85a0f5af9489186",
        "type": "debug",
        "z": "77555c522654b2a9",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 380,
        "wires": []
    },
    {
        "id": "c30444e7e3a8287d",
        "type": "function",
        "z": "03cc99a78ba06168",
        "name": "IntrusionSimulator",
        "func": "const statusA = global.get('Alarm_status_A');\nconst statusB = global.get('Alarm_status_B');\n\n// Probabilità di intrusione (1%)\nconst intrusionProbability = 0.01;\n\n// Simula l'intrusione\nconst isIntrusion = Math.random() < intrusionProbability;\n\nif(isIntrusion) {\n    const now = new Date();\n    const formattedDate = now.toLocaleString('it-IT', { timeZone: 'Europe/Rome' });\n\n    // Simula alcuni dettagli dell'intrusione con i sensori specificati\n    const sensorTriggered = ['hallway', 'kitchen', 'livingroom', 'bedroom', 'bathroom'][Math.floor(Math.random() * 5)];\n\n    msg.payload = `\n    \nWARNING: Intrusion Detected in Home Alarm System\n\nDate and Time: ${ formattedDate }\nSensor Triggered: ${ sensorTriggered }\n\nEvent Details:\n- Suspicious activity has been detected by the alarm system.\n- The sensor in \"${sensorTriggered}\" has registered an unauthorized trigger.\n- It is advisable to check the situation immediately.\n\nRecommended Actions:\n1. Check security cameras, if available.\n2. Contact law enforcement immediately if you confirm an intrusion.\n3. Do not enter the home if you suspect the presence of intruders.\n\nThis is an automatic message generated by your home alarm system. \nPlease do not reply to this email.`;\n\n    if (statusA == 'ARMED') {\n        msg.topic = 'ALARM HOME A: Intrusion Detected!';\n        return msg;\n    } else if (statusB === 'ARMED') {\n        msg.topic = 'ALARM HOME B: Intrusion Detected!';\n        return msg;\n    }\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 260,
        "wires": [
            [
                "d3c0c51e22c27c2f",
                "18307357188002b6"
            ]
        ]
    },
    {
        "id": "d3c0c51e22c27c2f",
        "type": "e-mail",
        "z": "03cc99a78ba06168",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "gsassi2@studenti.uninsubria.it",
        "dname": "AlarmNotification",
        "x": 870,
        "y": 260,
        "wires": []
    },
    {
        "id": "05753aa4d9ccb76d",
        "type": "inject",
        "z": "03cc99a78ba06168",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "c30444e7e3a8287d"
            ]
        ]
    },
    {
        "id": "f178a99247c4cda8",
        "type": "comment",
        "z": "03cc99a78ba06168",
        "name": "Intrusion detection",
        "info": "",
        "x": 490,
        "y": 220,
        "wires": []
    },
    {
        "id": "18307357188002b6",
        "type": "link out",
        "z": "03cc99a78ba06168",
        "name": "ALARM",
        "mode": "link",
        "links": [
            "8caf5872d7163e0a"
        ],
        "x": 805,
        "y": 320,
        "wires": []
    },
    {
        "id": "0ed9a10c3addecf6",
        "type": "change",
        "z": "9e7c62f885313afd",
        "name": "int to boolean",
        "rules": [
            {
                "t": "change",
                "p": "status",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "change",
                "p": "status",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 160,
        "wires": [
            [
                "440eb9f344e26329"
            ]
        ]
    },
    {
        "id": "440eb9f344e26329",
        "type": "switch",
        "z": "9e7c62f885313afd",
        "name": "On/Off",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 530,
        "y": 160,
        "wires": [
            [
                "934ae422ea9fae2b"
            ]
        ]
    },
    {
        "id": "934ae422ea9fae2b",
        "type": "switch",
        "z": "9e7c62f885313afd",
        "name": "",
        "property": "idx",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "42",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "51",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "40",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "45",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "49",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "54",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "41",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "50",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "46",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "55",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "43",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "52",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "44",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "53",
                "vt": "num"
            },
            {
                "t": "btwn",
                "v": "60",
                "vt": "num",
                "v2": "61",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "62",
                "vt": "num",
                "v2": "63",
                "v2t": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 16,
        "x": 690,
        "y": 160,
        "wires": [
            [
                "d12ba5e6cdff0cbb"
            ],
            [
                "d12ba5e6cdff0cbb"
            ],
            [
                "bcf138e0fb0766bb"
            ],
            [
                "bcf138e0fb0766bb"
            ],
            [
                "bcf138e0fb0766bb"
            ],
            [
                "bcf138e0fb0766bb"
            ],
            [
                "59a3a5fe0344ec72"
            ],
            [
                "59a3a5fe0344ec72"
            ],
            [
                "17ae2fe1acaae55d"
            ],
            [
                "17ae2fe1acaae55d"
            ],
            [
                "f7a2adb90217af03"
            ],
            [
                "f7a2adb90217af03"
            ],
            [
                "e814e9d6760ecf81"
            ],
            [
                "e814e9d6760ecf81"
            ],
            [
                "210f45fa71520845"
            ],
            [
                "210f45fa71520845"
            ]
        ]
    },
    {
        "id": "4e722b8691aa83f3",
        "type": "link in",
        "z": "9e7c62f885313afd",
        "name": "MeterIn",
        "links": [
            "4507d4146040f7bd",
            "46e5ae9686e531fb"
        ],
        "x": 85,
        "y": 160,
        "wires": [
            [
                "1c27a7a0b37d5548"
            ]
        ]
    },
    {
        "id": "3587269c5761c1e6",
        "type": "link in",
        "z": "9e7c62f885313afd",
        "name": "LaundryMachineIn",
        "links": [
            "d12ba5e6cdff0cbb"
        ],
        "x": 95,
        "y": 420,
        "wires": [
            [
                "2272a0acce54a4b7"
            ]
        ]
    },
    {
        "id": "d12ba5e6cdff0cbb",
        "type": "link out",
        "z": "9e7c62f885313afd",
        "name": "LaundryMachineOut",
        "mode": "link",
        "links": [
            "3587269c5761c1e6"
        ],
        "x": 925,
        "y": 60,
        "wires": []
    },
    {
        "id": "d040e2f6176bf599",
        "type": "comment",
        "z": "9e7c62f885313afd",
        "name": "LaundryMachine",
        "info": "Mediamente una lavatrice consuma in media tra 0.5 e 1 kwH per lavaggio, noi creaiamo il consumo considerando fattori come:\n1. Potenza di base\n2. Fattore di consumo del ciclo utilizzato\n3. Temperatura acqua \n4. Tempo di utilizzo = calcolato casualmente in base ad un range di tempo",
        "x": 160,
        "y": 380,
        "wires": []
    },
    {
        "id": "1744c4e8ca08963a",
        "type": "comment",
        "z": "9e7c62f885313afd",
        "name": "On/Off simulation",
        "info": "",
        "x": 160,
        "y": 120,
        "wires": []
    },
    {
        "id": "0f0d690e2c8382c8",
        "type": "comment",
        "z": "9e7c62f885313afd",
        "name": "Oven",
        "info": "Il consumo energetico del forno viene calcolato in base a:\n- Potenza di base\n- Tempo di utilizzo (da 1 minuto a 2 ore) randomicamente\n- Modalita del forno\n- Temperatura di cottura",
        "x": 130,
        "y": 1580,
        "wires": []
    },
    {
        "id": "5199a27677481f79",
        "type": "comment",
        "z": "9e7c62f885313afd",
        "name": "AlarmSystem",
        "info": "",
        "x": 150,
        "y": 1820,
        "wires": []
    },
    {
        "id": "0fb29ba1c45f4bab",
        "type": "comment",
        "z": "9e7c62f885313afd",
        "name": "TemperatureSystem",
        "info": "Per generare i consumi di un sistema di temperatura, in base all'accensione o meno del riscaldamento, si considera.\n1. Potenza di base.\n2. Incremento di consumo in base alla zona da riscaldare = stanze piu grandi richiedono piu energia.\n3. Tempo randomico di utilizzo.",
        "x": 150,
        "y": 2100,
        "wires": []
    },
    {
        "id": "0d24fded635ff2db",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "QueryInsertCons",
        "func": "let item = \"laundry_machine\";\n// Valore del consumo dinamico da msg.value\nlet consumptionValue = msg.value;\n\n// Prepara il payload per l'inserimento\nmsg.payload = [{\n    item: item,\n    value: consumptionValue,\n    addedAt: new Date() // MongoDB inserirà questo valore come un ISODate\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 500,
        "wires": [
            [
                "17f7dc019542f0d3"
            ]
        ]
    },
    {
        "id": "db8838a90feac5ce",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsA",
        "x": 770,
        "y": 480,
        "wires": [
            [
                "fe5b9fba84bcb842"
            ]
        ]
    },
    {
        "id": "17f7dc019542f0d3",
        "type": "switch",
        "z": "9e7c62f885313afd",
        "name": "checkHome",
        "property": "home",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "B",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 500,
        "wires": [
            [
                "db8838a90feac5ce"
            ],
            [
                "ea81730a20fcaa58"
            ]
        ]
    },
    {
        "id": "ea81730a20fcaa58",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsB",
        "x": 770,
        "y": 540,
        "wires": [
            [
                "fe5b9fba84bcb842"
            ]
        ]
    },
    {
        "id": "bcf138e0fb0766bb",
        "type": "link out",
        "z": "9e7c62f885313afd",
        "name": "AirConditioningOut",
        "mode": "link",
        "links": [
            "bd9035e32405da31"
        ],
        "x": 925,
        "y": 100,
        "wires": []
    },
    {
        "id": "bd9035e32405da31",
        "type": "link in",
        "z": "9e7c62f885313afd",
        "name": "AirConditioningIn",
        "links": [
            "bcf138e0fb0766bb"
        ],
        "x": 95,
        "y": 660,
        "wires": [
            [
                "f9d85342816ce5b2"
            ]
        ]
    },
    {
        "id": "0f0840735346eec1",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "setting",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 310,
        "y": 660,
        "wires": [
            [
                "95b91c1250e555d4"
            ]
        ]
    },
    {
        "id": "0883aedd6bdb3fb7",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "QueryInsertCons",
        "func": "let room = msg.room;\nlet item = 'air_conditioning';\n// Valore del consumo dinamico da msg.value\nlet consumptionValue = msg.value;\n\n// Prepara il payload per l'inserimento\nmsg.payload = [{\n    room: room,\n    item: item,\n    value: consumptionValue,\n    addedAt: new Date() // MongoDB inserirà questo valore come un ISODate\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 740,
        "wires": [
            [
                "a332cfcd780607b6"
            ]
        ]
    },
    {
        "id": "a332cfcd780607b6",
        "type": "switch",
        "z": "9e7c62f885313afd",
        "name": "checkHome",
        "property": "home",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "B",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 740,
        "wires": [
            [
                "64872fcf62f83bbf"
            ],
            [
                "6f6d587220ab7777"
            ]
        ]
    },
    {
        "id": "64872fcf62f83bbf",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsA",
        "x": 730,
        "y": 720,
        "wires": [
            [
                "ecbddcc47d21372c"
            ]
        ]
    },
    {
        "id": "6f6d587220ab7777",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsB",
        "x": 730,
        "y": 780,
        "wires": [
            [
                "ecbddcc47d21372c"
            ]
        ]
    },
    {
        "id": "59a3a5fe0344ec72",
        "type": "link out",
        "z": "9e7c62f885313afd",
        "name": "HomeTheaterOut",
        "mode": "link",
        "links": [
            "0c319edc54bdfb3f"
        ],
        "x": 925,
        "y": 140,
        "wires": []
    },
    {
        "id": "0c319edc54bdfb3f",
        "type": "link in",
        "z": "9e7c62f885313afd",
        "name": "HomeTheaterIn",
        "links": [
            "59a3a5fe0344ec72"
        ],
        "x": 95,
        "y": 900,
        "wires": [
            [
                "55a59192b0f67047"
            ]
        ]
    },
    {
        "id": "2879b15a7eea2bf0",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "QueryInsertCons",
        "func": "let item = 'home_theater';\n// Valore del consumo dinamico da msg.value\nlet consumptionValue = msg.value;\n\n// Prepara il payload per l'inserimento\nmsg.payload = [{\n    item: item,\n    value: consumptionValue,\n    addedAt: new Date() // MongoDB inserirà questo valore come un ISODate\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 980,
        "wires": [
            [
                "ba3a28ca47d80e43"
            ]
        ]
    },
    {
        "id": "ba3a28ca47d80e43",
        "type": "switch",
        "z": "9e7c62f885313afd",
        "name": "checkHome",
        "property": "home",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "B",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 980,
        "wires": [
            [
                "30781296f032cd91"
            ],
            [
                "4195b4439dc05ba1"
            ]
        ]
    },
    {
        "id": "30781296f032cd91",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsA",
        "x": 690,
        "y": 960,
        "wires": [
            [
                "86f05801be1b19da"
            ]
        ]
    },
    {
        "id": "4195b4439dc05ba1",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsB",
        "x": 690,
        "y": 1020,
        "wires": [
            [
                "86f05801be1b19da"
            ]
        ]
    },
    {
        "id": "17ae2fe1acaae55d",
        "type": "link out",
        "z": "9e7c62f885313afd",
        "name": "SmartTVOut",
        "mode": "link",
        "links": [
            "e6bd4f2d09927c1a"
        ],
        "x": 925,
        "y": 180,
        "wires": []
    },
    {
        "id": "e6bd4f2d09927c1a",
        "type": "link in",
        "z": "9e7c62f885313afd",
        "name": "SmartTVIn",
        "links": [
            "17ae2fe1acaae55d"
        ],
        "x": 95,
        "y": 1140,
        "wires": [
            [
                "0c0adf861213b98b"
            ]
        ]
    },
    {
        "id": "34b454bf69ab64d9",
        "type": "link in",
        "z": "9e7c62f885313afd",
        "name": "StoveIn",
        "links": [
            "f7a2adb90217af03"
        ],
        "x": 95,
        "y": 1380,
        "wires": [
            [
                "373fa9173f9f6041"
            ]
        ]
    },
    {
        "id": "f7a2adb90217af03",
        "type": "link out",
        "z": "9e7c62f885313afd",
        "name": "StoveOut",
        "mode": "link",
        "links": [
            "34b454bf69ab64d9"
        ],
        "x": 925,
        "y": 220,
        "wires": []
    },
    {
        "id": "5c86b067a3f52e6a",
        "type": "link in",
        "z": "9e7c62f885313afd",
        "name": "OvenIn",
        "links": [
            "e814e9d6760ecf81"
        ],
        "x": 95,
        "y": 1620,
        "wires": [
            [
                "b468e3eade16c1fe"
            ]
        ]
    },
    {
        "id": "a3a4d3243a1d873f",
        "type": "link in",
        "z": "9e7c62f885313afd",
        "name": "TempSysIn",
        "links": [
            "0ca5c8376fe41f77"
        ],
        "x": 75,
        "y": 2140,
        "wires": [
            [
                "f5654fc56a7e2db1"
            ]
        ]
    },
    {
        "id": "e814e9d6760ecf81",
        "type": "link out",
        "z": "9e7c62f885313afd",
        "name": "OvenOut",
        "mode": "link",
        "links": [
            "5c86b067a3f52e6a"
        ],
        "x": 925,
        "y": 260,
        "wires": []
    },
    {
        "id": "cfbd71b0bdac97e6",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "QueryInsertCons",
        "func": "let item = 'smart_tv';\n// Valore del consumo dinamico da msg.value\nlet consumptionValue = msg.value;\n\n// Prepara il payload per l'inserimento\nmsg.payload = [{\n    item: item,\n    value: consumptionValue,\n    addedAt: new Date() // MongoDB inserirà questo valore come un ISODate\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1220,
        "wires": [
            [
                "8a3296077602cf1a"
            ]
        ]
    },
    {
        "id": "8a3296077602cf1a",
        "type": "switch",
        "z": "9e7c62f885313afd",
        "name": "checkHome",
        "property": "home",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "B",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 1220,
        "wires": [
            [
                "3a55d17d5c1a0a73"
            ],
            [
                "368ddf61e15eee5a"
            ]
        ]
    },
    {
        "id": "3a55d17d5c1a0a73",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsA",
        "x": 650,
        "y": 1200,
        "wires": [
            [
                "f8d4e3ade69a4694"
            ]
        ]
    },
    {
        "id": "368ddf61e15eee5a",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsB",
        "x": 650,
        "y": 1260,
        "wires": [
            [
                "f8d4e3ade69a4694"
            ]
        ]
    },
    {
        "id": "69d5fb6e78c0f62c",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "QueryInsertCons",
        "func": "let item = 'stove';\n// Valore del consumo dinamico da msg.value\nlet consumptionValue = msg.value;\n\n// Prepara il payload per l'inserimento\nmsg.payload = [{\n    item: item,\n    value: consumptionValue,\n    addedAt: new Date() // MongoDB inserirà questo valore come un ISODate\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1460,
        "wires": [
            [
                "b7f2a5fcc2ea2917"
            ]
        ]
    },
    {
        "id": "b7f2a5fcc2ea2917",
        "type": "switch",
        "z": "9e7c62f885313afd",
        "name": "checkHome",
        "property": "home",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "B",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 1460,
        "wires": [
            [
                "44dc36760d166558"
            ],
            [
                "ca412f3236619839"
            ]
        ]
    },
    {
        "id": "44dc36760d166558",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsA",
        "x": 670,
        "y": 1440,
        "wires": [
            [
                "f3bbed4f17fe5910"
            ]
        ]
    },
    {
        "id": "ca412f3236619839",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsB",
        "x": 670,
        "y": 1500,
        "wires": [
            [
                "f3bbed4f17fe5910"
            ]
        ]
    },
    {
        "id": "e18689444a1bdd7c",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "QueryInsertCons",
        "func": "let item = 'oven';\n// Valore del consumo dinamico da msg.value\nlet consumptionValue = msg.value;\n\n// Prepara il payload per l'inserimento\nmsg.payload = [{\n    item: item,\n    value: consumptionValue,\n    addedAt: new Date() // MongoDB inserirà questo valore come un ISODate\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1700,
        "wires": [
            [
                "5e3d5cd8b06cce2f"
            ]
        ]
    },
    {
        "id": "5e3d5cd8b06cce2f",
        "type": "switch",
        "z": "9e7c62f885313afd",
        "name": "checkHome",
        "property": "home",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "B",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 1700,
        "wires": [
            [
                "87bd8ba2788467a9"
            ],
            [
                "dcb694081e64f2cd"
            ]
        ]
    },
    {
        "id": "87bd8ba2788467a9",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsA",
        "x": 610,
        "y": 1680,
        "wires": [
            [
                "04983d60a775b0df"
            ]
        ]
    },
    {
        "id": "dcb694081e64f2cd",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsB",
        "x": 610,
        "y": 1740,
        "wires": [
            [
                "04983d60a775b0df"
            ]
        ]
    },
    {
        "id": "0efd694337c6e37a",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "setting",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 310,
        "y": 1860,
        "wires": [
            [
                "b199210a9cc22611"
            ]
        ]
    },
    {
        "id": "e60e663a9da8f413",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "CreateConsumption",
        "func": "let home = msg.object.home;  //controlla di quale casa si tratta\nlet globalVarName = (home === 'A') ? \"alarmDataA\" : \"alarmDataB\";\nlet alarmData = global.get(globalVarName); //recupera info in base alla smarthome\n\n//Converte il tempo trascorso in ore\nlet durationHours = alarmData.duration.hours + (alarmData.duration.minutes / 60) + (alarmData.duration.seconds / 3600);\n\n//ottieni la potenza base dell'antifurto (in kW)\nlet basePower = msg.power || 0.05; //se non specificato c'è una potenza base\n\n//calcola il consumo in kWh\nlet energyConsumed = basePower * durationHours;\nenergyConsumed = parseFloat(energyConsumed.toFixed(4));\n\n// Salva il consumo nel messaggio\nmsg.value = energyConsumed;\n\nmsg.payload = `The alarm system for home ${home} was active for ${durationHours.toFixed(2)} hours, consuming ${msg.value} kWh.`\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1860,
        "wires": [
            [
                "dd52cbd28cda06f5",
                "804db3b3d7c10473"
            ]
        ]
    },
    {
        "id": "dd52cbd28cda06f5",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "QueryInsertCons",
        "func": "let item = 'alarm_system';\n// Valore del consumo dinamico da msg.value\nlet consumptionValue = msg.value;\n\n// Prepara il payload per l'inserimento\nmsg.payload = [{\n    item: item,\n    value: consumptionValue,\n    addedAt: new Date() // MongoDB inserirà questo valore come un ISODate\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1980,
        "wires": [
            [
                "60cf28b36c018a6a"
            ]
        ]
    },
    {
        "id": "60cf28b36c018a6a",
        "type": "switch",
        "z": "9e7c62f885313afd",
        "name": "checkHome",
        "property": "object.home",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "B",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 1980,
        "wires": [
            [
                "86de2405c388acea"
            ],
            [
                "e2c6179b9fd68586"
            ]
        ]
    },
    {
        "id": "86de2405c388acea",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsA",
        "x": 610,
        "y": 1940,
        "wires": [
            [
                "89a3c9d794229918"
            ]
        ]
    },
    {
        "id": "e2c6179b9fd68586",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsB",
        "x": 610,
        "y": 2000,
        "wires": [
            [
                "89a3c9d794229918"
            ]
        ]
    },
    {
        "id": "de95d42c3d46b19f",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "QueryInsertCons",
        "func": "let item = 'temperature_system';\n// Valore del consumo dinamico da msg.value\nlet consumptionValue = msg.value;\n\n// Prepara il payload per l'inserimento\nmsg.payload = [{\n    item: item,\n    value: consumptionValue,\n    addedAt: new Date() // MongoDB inserirà questo valore come un ISODate\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2260,
        "wires": [
            [
                "a2b9ac672b482f6c"
            ]
        ]
    },
    {
        "id": "a2b9ac672b482f6c",
        "type": "switch",
        "z": "9e7c62f885313afd",
        "name": "checkHome",
        "property": "home",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "B",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 2260,
        "wires": [
            [
                "9089d8c9ca35c3e8"
            ],
            [
                "894ba49e66c642a5"
            ]
        ]
    },
    {
        "id": "9089d8c9ca35c3e8",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsA",
        "x": 610,
        "y": 2220,
        "wires": [
            [
                "97d4a51a3a5d16e7"
            ]
        ]
    },
    {
        "id": "894ba49e66c642a5",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsB",
        "x": 610,
        "y": 2280,
        "wires": [
            [
                "97d4a51a3a5d16e7"
            ]
        ]
    },
    {
        "id": "95c1084253b564a8",
        "type": "link in",
        "z": "9e7c62f885313afd",
        "name": "AlarmSysIn",
        "links": [
            "30639955e7875002",
            "8fbb8895a31586b6",
            "d8da5c878ada3660",
            "273cc149f43f7033",
            "571231c2f379fba8"
        ],
        "x": 95,
        "y": 1860,
        "wires": [
            [
                "19c9bd2e2513b864"
            ]
        ]
    },
    {
        "id": "ca26958365b12f6f",
        "type": "comment",
        "z": "9e7c62f885313afd",
        "name": "Lights",
        "info": "Il consumo delle luce viene generato considerando:\n1. Potenza in watt delle lampadine, differente in base alla stanza\n2. Intensità della luce\n3. Tempo randomico di accensione",
        "x": 110,
        "y": 2400,
        "wires": []
    },
    {
        "id": "25198eafa31e46b5",
        "type": "link in",
        "z": "9e7c62f885313afd",
        "name": "LightsIn",
        "links": [
            "8d1b062e4214d740"
        ],
        "x": 75,
        "y": 2440,
        "wires": [
            [
                "3a3026e06fbb0127"
            ]
        ]
    },
    {
        "id": "be2b40834f357765",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "QueryInsertCons",
        "func": "let room = msg.room;\nlet item = 'light';\n// Valore del consumo dinamico da msg.value\nlet consumptionValue = msg.value;\n\n// Prepara il payload per l'inserimento\nmsg.payload = [{\n    room: room,\n    item: item,\n    value: consumptionValue,\n    addedAt: new Date() // MongoDB inserirà questo valore come un ISODate\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2440,
        "wires": [
            [
                "f6e7cd7e4a033b0c"
            ]
        ]
    },
    {
        "id": "f6e7cd7e4a033b0c",
        "type": "switch",
        "z": "9e7c62f885313afd",
        "name": "checkHome",
        "property": "home",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "B",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 2440,
        "wires": [
            [
                "76df15df2aaa5624"
            ],
            [
                "c15aae2655d52d94"
            ]
        ]
    },
    {
        "id": "76df15df2aaa5624",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsA",
        "x": 770,
        "y": 2400,
        "wires": [
            [
                "d5206abbab54459f"
            ]
        ]
    },
    {
        "id": "c15aae2655d52d94",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsB",
        "x": 770,
        "y": 2480,
        "wires": [
            [
                "d5206abbab54459f"
            ]
        ]
    },
    {
        "id": "d5206abbab54459f",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet value = msg.value;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/consumption/light`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2440,
        "wires": [
            [
                "29404eba43ee0b8f"
            ]
        ]
    },
    {
        "id": "fe5b9fba84bcb842",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet value = msg.value;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/consumption/laundry_machine`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 500,
        "wires": [
            [
                "b4cb3b3b57da4790"
            ]
        ]
    },
    {
        "id": "da67704b4b11659d",
        "type": "mqtt out",
        "z": "9e7c62f885313afd",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1380,
        "y": 500,
        "wires": []
    },
    {
        "id": "ecbddcc47d21372c",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet value = msg.value;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/consumption/air_conditioning`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 760,
        "wires": [
            [
                "68f26436af0dd6cf"
            ]
        ]
    },
    {
        "id": "86f05801be1b19da",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet value = msg.value;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/consumption/home_theater`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 980,
        "wires": [
            [
                "d2054be905eb4445"
            ]
        ]
    },
    {
        "id": "f8d4e3ade69a4694",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet value = msg.value;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/consumption/smartTV`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1220,
        "wires": [
            [
                "a81a629f44990f0d"
            ]
        ]
    },
    {
        "id": "f3bbed4f17fe5910",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet value = msg.value;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/consumption/stove`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1480,
        "wires": [
            [
                "863c06a9726993c8"
            ]
        ]
    },
    {
        "id": "04983d60a775b0df",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet value = msg.value;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/consumption/oven`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1700,
        "wires": [
            [
                "5a62d5d4974d7765"
            ]
        ]
    },
    {
        "id": "89a3c9d794229918",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.object.home;\nlet value = msg.value;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/stairways/consumption/alarm_system`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1960,
        "wires": [
            [
                "8b438338ba05e01d"
            ]
        ]
    },
    {
        "id": "97d4a51a3a5d16e7",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet value = msg.value;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/stairways/consumption/temperature_system`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2240,
        "wires": [
            [
                "a82408a0402b7959"
            ]
        ]
    },
    {
        "id": "1c27a7a0b37d5548",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "Random Value",
        "func": "// Genera un numero casuale intero da 0 a 1\nmsg.status = Math.floor(Math.random() * 2);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 160,
        "wires": [
            [
                "0ed9a10c3addecf6"
            ]
        ]
    },
    {
        "id": "210f45fa71520845",
        "type": "link out",
        "z": "9e7c62f885313afd",
        "name": "WaterOut",
        "mode": "link",
        "links": [
            "6e23be6d84ab6051"
        ],
        "x": 925,
        "y": 300,
        "wires": []
    },
    {
        "id": "03badf41a872fffd",
        "type": "comment",
        "z": "9e7c62f885313afd",
        "name": "Water",
        "info": "Generazione dei consumi dell'acqua tenendo conto di:\n1. ConsumoMinimo: potrebbe rappresentare un lavandino o una doccia a basso flusso.\n2. ConsumoMassimo: potrebbe rappresentare una doccia ad alto flusso o il riempimento di una vasca.\n3. Durata Massima: piu realistica per la maggior parte degli usi domestici\n\n",
        "x": 110,
        "y": 2620,
        "wires": []
    },
    {
        "id": "6e23be6d84ab6051",
        "type": "link in",
        "z": "9e7c62f885313afd",
        "name": "WaterIn",
        "links": [
            "210f45fa71520845"
        ],
        "x": 75,
        "y": 2660,
        "wires": [
            [
                "6e890f7ed2ec921c"
            ]
        ]
    },
    {
        "id": "a88bb5294d880250",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "QueryInsertCons",
        "func": "let room = msg.room;\nlet item = 'water';\n// Valore del consumo dinamico da msg.value\nlet consumptionValue = msg.value;\n\n// Prepara il payload per l'inserimento\nmsg.payload = [{\n    room: room,\n    item: item,\n    value: consumptionValue,\n    addedAt: new Date() // MongoDB inserirà questo valore come un ISODate\n}];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2740,
        "wires": [
            [
                "d32e5998c6aef0bf"
            ]
        ]
    },
    {
        "id": "d32e5998c6aef0bf",
        "type": "switch",
        "z": "9e7c62f885313afd",
        "name": "checkHome",
        "property": "home",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "B",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 2740,
        "wires": [
            [
                "45a53bd861f025a8"
            ],
            [
                "8212a6a9f0ce7c8b"
            ]
        ]
    },
    {
        "id": "45a53bd861f025a8",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsA",
        "x": 690,
        "y": 2720,
        "wires": [
            [
                "73f6a4b0f7e4870e"
            ]
        ]
    },
    {
        "id": "8212a6a9f0ce7c8b",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "insertConsB",
        "x": 690,
        "y": 2780,
        "wires": [
            [
                "73f6a4b0f7e4870e"
            ]
        ]
    },
    {
        "id": "73f6a4b0f7e4870e",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "MsgFormat",
        "func": "//Questa funzione serve per generare dinamicamente i topic in base alle scelte\nlet home = msg.home;\nlet room = msg.room;\nlet value = msg.value;\n\n// Costruzione dinamica del topic MQTT\nmsg.topic = `smart_home/${home}/${room}/consumption/water`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2740,
        "wires": [
            [
                "c8c60821c4faa2ba"
            ]
        ]
    },
    {
        "id": "b4cb3b3b57da4790",
        "type": "template",
        "z": "9e7c62f885313afd",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1100,
        "y": 500,
        "wires": [
            [
                "f7c49d49101f8379"
            ]
        ]
    },
    {
        "id": "68f26436af0dd6cf",
        "type": "template",
        "z": "9e7c62f885313afd",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1080,
        "y": 760,
        "wires": [
            [
                "cdbd220bd73809ca"
            ]
        ]
    },
    {
        "id": "d2054be905eb4445",
        "type": "template",
        "z": "9e7c62f885313afd",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1020,
        "y": 980,
        "wires": [
            [
                "debc47b14d54b5f0"
            ]
        ]
    },
    {
        "id": "a81a629f44990f0d",
        "type": "template",
        "z": "9e7c62f885313afd",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 960,
        "y": 1220,
        "wires": [
            [
                "54db102e8adb606e"
            ]
        ]
    },
    {
        "id": "863c06a9726993c8",
        "type": "template",
        "z": "9e7c62f885313afd",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1020,
        "y": 1480,
        "wires": [
            [
                "8a6276bdf9e9d830"
            ]
        ]
    },
    {
        "id": "5a62d5d4974d7765",
        "type": "template",
        "z": "9e7c62f885313afd",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 960,
        "y": 1700,
        "wires": [
            [
                "a061f93e4e7df6b5"
            ]
        ]
    },
    {
        "id": "8b438338ba05e01d",
        "type": "template",
        "z": "9e7c62f885313afd",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 960,
        "y": 1960,
        "wires": [
            [
                "79d9a7c6ad67aecb"
            ]
        ]
    },
    {
        "id": "a82408a0402b7959",
        "type": "template",
        "z": "9e7c62f885313afd",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 960,
        "y": 2240,
        "wires": [
            [
                "7c8b43c3e69f5fa6"
            ]
        ]
    },
    {
        "id": "29404eba43ee0b8f",
        "type": "template",
        "z": "9e7c62f885313afd",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1060,
        "y": 2480,
        "wires": [
            [
                "3c0f5f90b3fb4a92"
            ]
        ]
    },
    {
        "id": "c8c60821c4faa2ba",
        "type": "template",
        "z": "9e7c62f885313afd",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1020,
        "y": 2740,
        "wires": [
            [
                "ada10a739921f928"
            ]
        ]
    },
    {
        "id": "f2b235ab62a60358",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "CreateConsumption",
        "func": "let basePower = msg.power; // Potenza base in kW\nlet cycle = msg.cycle; // Tipo di ciclo\nlet temperatures = msg.temperatures; // Temperatura in gradi Celsius\n\n// Fattori di consumo basati sul ciclo\nconst cyclesCons = {\n    \"cotton\": 1,\n    \"synthetics\": 0.8,\n    \"eco\": 0.5,\n    \"quick\": 0.6,\n    \"delicates\": 0.4,\n    \"wool\": 0.7,\n    \"mixed\": 0.9,\n};\n\n// Fattori di consumo basati sulla temperatura\nlet tempFattore = temperatures / 60; // Assume che il consumo aumenti proporzionalmente alla temperatura\n\nlet totPower = basePower * cyclesCons[cycle] * tempFattore;\nlet hourTime = msg.time / 60; //tempo da minuti a ore\n\n// Calcolo il consumo in kWh\nlet cons = totPower * hourTime;\ncons = parseFloat(cons.toFixed(2));\nmsg.value = cons;\n\nmsg.payload = `The laundry machine (idx = ${msg.idx}), ran for ${msg.time} minutes on ${cycle} at ${temperatures}°C with a consumption of ${msg.value} kWh.`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 420,
        "wires": [
            [
                "0d24fded635ff2db",
                "065de8fa3f00c2a9"
            ]
        ]
    },
    {
        "id": "762478acb5a02a17",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "ExtractParameters",
        "func": "let document = msg.payload[0];\n\n// Estrae i valori dalla struttura JSON\nmsg.power = parseFloat(document.laundry_machine.power);\nlet maxTime = parseInt(document.laundry_machine.maxTime); // massimo tempo di funzionamento in minuti\nlet minTime = parseInt(document.laundry_machine.minTime);  // minimo tempo di funzionamento in minuti\n// Lista dei cicli di lavaggio disponibili\nlet cycles = document.laundry_machine.cycles;\nlet temperatures = document.laundry_machine.temperatures;\n\n// Genera un indice casuale basato sulla lunghezza dell'array dei cicli\nlet randomIndex = Math.floor(Math.random() * cycles.length);\n// Genera un indice casuale basato sulla lunghezza dell'array delle temperature\nlet randomIndexT = Math.floor(Math.random() * temperatures.length);\n// Seleziona casualmente un ciclo di lavaggio dalla lista\nmsg.cycle = cycles[randomIndex];\n// Seleziona casualmente una temperatura di lavaggio dalla lista\nmsg.temperatures = temperatures[randomIndexT];\n\n// Genera un tempo di funzionamento casuale\nmsg.time = Math.floor(Math.random() * (maxTime - minTime + 1)) + minTime;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 420,
        "wires": [
            [
                "f2b235ab62a60358"
            ]
        ]
    },
    {
        "id": "f1cfe0888b4c57e2",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "setting",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 310,
        "y": 420,
        "wires": [
            [
                "762478acb5a02a17"
            ]
        ]
    },
    {
        "id": "2272a0acce54a4b7",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "Query",
        "func": "const query = {\n    \"laundry_machine\": { $exists: true }\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 420,
        "wires": [
            [
                "f1cfe0888b4c57e2"
            ]
        ]
    },
    {
        "id": "065de8fa3f00c2a9",
        "type": "debug",
        "z": "9e7c62f885313afd",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 420,
        "wires": []
    },
    {
        "id": "f9d85342816ce5b2",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "Query",
        "func": "const query = {\n    \"air_conditioning\": { $exists: true }\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 660,
        "wires": [
            [
                "0f0840735346eec1"
            ]
        ]
    },
    {
        "id": "e59e747f6862d89f",
        "type": "debug",
        "z": "9e7c62f885313afd",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 660,
        "wires": []
    },
    {
        "id": "95b91c1250e555d4",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "ExtractParameters",
        "func": "\nlet document = msg.payload[0];\n\n// Estrae i valori dalla struttura JSON\nmsg.power = parseFloat(document.air_conditioning.power);\nlet maxTemp = parseInt(document.air_conditioning.temperatures.maxTemp); // massima temperature settabile\nlet minTemp = parseInt(document.air_conditioning.temperatures.minTemp);  // minima temperature settabile\n// Lista delle modalità disponibili\nlet modes = document.air_conditioning.modes;\n//lista delle modalità di fan disponibili\nlet fanSpeeds = document.air_conditioning.fanSpeeds;\n\n// Genera un indice casuale basato sulla lunghezza dell'array delle modalità disponibili\nlet randomIndex = Math.floor(Math.random() * modes.length);\n// Genera un indice casuale basato sulla lunghezza dell'array delle fan\nlet randomIndexF = Math.floor(Math.random() * fanSpeeds.length);\n// Seleziona casualmente una modalità\nmsg.mode = modes[randomIndex];\n// Seleziona casualmente una modalità delle fan\nmsg.fanSpeed = fanSpeeds[randomIndexF];\n\n// Genera una temperatura casuale del condizionatore\nmsg.temp = Math.floor(Math.random() * (maxTemp - minTemp + 1)) + minTemp;\nmsg.minTemp = minTemp;\nmsg.maxTemp = maxTemp;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 660,
        "wires": [
            [
                "0ccb49c7a793a5f1"
            ]
        ]
    },
    {
        "id": "0ccb49c7a793a5f1",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "CreateConsumption",
        "func": "let basePower = msg.power; // Potenza base in kW\nlet mode = msg.mode; // modalità\nlet fanSpeed = msg.fanSpeed; //modalità fan\nlet temperature = msg.temp; // Temperatura\n\n// Fattori di consumo basati sulla modalità\nconst modesCons = {\n    \"cooling\": 1,\n    \"heating\": 1.2,\n    \"fan_only\": 0.3,\n    \"dry\": 0.8,\n};\n\nconst fanSpeedsCons = {\n    \"low\": 0.7,\n    \"medium\": 1.0,\n    \"high\": 1.2,\n};\n\n// Fattori di consumo effettivi modalita e temperatura\nlet tempFactor = (temperature - msg.minTemp) / (msg.maxTemp - msg.minTemp);\nlet modeFactor = modesCons[mode] * fanSpeedsCons[fanSpeed];\n\nlet totalConsumption = basePower * tempFactor * modeFactor;\ntotalConsumption = parseFloat(totalConsumption.toFixed(2));\nmsg.value = totalConsumption;\n\nmsg.payload = `The air conditioning (idx = ${msg.idx}), ran on ${mode} mode, with ${fanSpeed} fan speed at ${temperature} with a consumption of ${msg.value} kWh.`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 660,
        "wires": [
            [
                "0883aedd6bdb3fb7",
                "e59e747f6862d89f"
            ]
        ]
    },
    {
        "id": "e4d877d02a07b887",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "setting",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 310,
        "y": 1140,
        "wires": [
            [
                "8253cb3ad9742cb1"
            ]
        ]
    },
    {
        "id": "0c0adf861213b98b",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "Query",
        "func": "const query = {\n    \"smart_tv\": { $exists: true }\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1140,
        "wires": [
            [
                "e4d877d02a07b887"
            ]
        ]
    },
    {
        "id": "8253cb3ad9742cb1",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "ExtractParameters",
        "func": "let document = msg.payload[0];\n// Estrae i valori dalla struttura JSON\nmsg.power = parseFloat(document.smart_tv.power);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1140,
        "wires": [
            [
                "bb6566cc158d772f"
            ]
        ]
    },
    {
        "id": "bb6566cc158d772f",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "CreateConsumption",
        "func": "let basePower = msg.power; // Potenza base in kW\n\n// Ottieni l'ora attuale e il giorno della settimana\nlet now = new Date();\nlet currentHour = now.getHours();\nlet currentDay = now.getDay(); // 0 = Domenica, 6 = Sabato\n\nlet minUsage, maxUsage;\n\n//Randomizzazione del tempo di utilizzo basata su fasce orarie e giorni\nif (currentDay === 0 || currentDay === 6) {\n    // Weekend (Sabato e Domenica)\n    if (currentHour >= 18 || currentHour < 6) {\n        // Sera/Notte\n        minUsage = 3;\n        maxUsage = 6;\n    } else if (currentHour >= 6 && currentHour < 18) {\n        // Giorno\n        minUsage = 2;\n        maxUsage = 4;\n    }\n} else {\n    // Giorni feriali (Lunedì - Venerdì)\n    if (currentHour >= 18 || currentHour < 6) {\n        // Sera/Notte\n        minUsage = 2;\n        maxUsage = 4;\n    } else if (currentHour >= 6 && currentHour < 18) {\n        // Giorno\n        minUsage = 0.5;\n        maxUsage = 2;\n    }\n}\n\n// Generazione casuale del tempo di utilizzo\nvar randomTime = Math.random() * (maxUsage - minUsage) + minUsage;\nrandomTime = parseFloat(randomTime.toFixed(2));\n\n// Calcolo del consumo energetico\nlet totalConsumption = basePower * randomTime; // Consumo in kWh\ntotalConsumption = parseFloat(totalConsumption.toFixed(2));\nmsg.value = totalConsumption;\n\nlet day = (currentDay === 0 || currentDay === 6) ? \"Weekend\" : \"Weekday\";\nlet timeOfDay = (currentHour >= 18 || currentHour < 6) ? \"Evening/Night\" : \"Day\";\n\nmsg.payload = `The smart tv (idx = ${msg.idx}), ran for ${randomTime} in the ${day} at ${timeOfDay}, with a consumption of ${msg.value} kWh.`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1140,
        "wires": [
            [
                "0417058d8a4a98f9",
                "cfbd71b0bdac97e6"
            ]
        ]
    },
    {
        "id": "0417058d8a4a98f9",
        "type": "debug",
        "z": "9e7c62f885313afd",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1140,
        "wires": []
    },
    {
        "id": "d49759d568cf945c",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "setting",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 310,
        "y": 1380,
        "wires": [
            [
                "4f44759c9702e0a7"
            ]
        ]
    },
    {
        "id": "373fa9173f9f6041",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "Query",
        "func": "const query = {\n    \"stove\": { $exists: true }\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1380,
        "wires": [
            [
                "d49759d568cf945c"
            ]
        ]
    },
    {
        "id": "4f44759c9702e0a7",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "ExtractParameters",
        "func": "let document = msg.payload[0];\n\n//Estrae i valori dalla struttura JSON\n//aree di cottura\nmsg.cookingAreas = document.stove.cooking_areas;\n//min e max potenza\nmsg.minPower = parseFloat(document.stove.minPower);\nmsg.maxPower = parseInt(document.stove.maxPower)\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1380,
        "wires": [
            [
                "c8d14565954e16af"
            ]
        ]
    },
    {
        "id": "c8d14565954e16af",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "CreateConsumption",
        "func": "let cookingAreas = msg.cookingAreas;\nlet maxPowerKw = msg.maxPower; // Potenza massima di ciascun fornello in kW\nlet minPowerKw = msg.minPower; // Potenza minima di ciascun fornello in kW\n\nlet totalEnergyConsumptionKwh = 0;\nlet fornelli = []; // Array per memorizzare i dati di ciascun fornello\n\n// Generazione casuale del numero di fornelli da accendere (da 0 a 4)\nvar numAccesi = Math.floor(Math.random() * cookingAreas.length) + 1;\n\n// Seleziona casualmente i fornelli da accendere\nvar accesi = [];\nwhile (accesi.length < numAccesi) {\n    var randomIndex = Math.floor(Math.random() * cookingAreas.length);\n    if (!accesi.includes(cookingAreas[randomIndex])) {\n        accesi.push(cookingAreas[randomIndex]);\n    }\n}\n\n// Simulazione del consumo per i fornelli accesi\naccesi.forEach(function (area) {\n    // Generazione casuale del tempo di utilizzo per ciascun fornello (da 0 a 2 ore)\n    var usageTimeHours = Math.random() * 2; // Ogni fornello può rimanere acceso da 0 a 2 ore\n\n    // Suddivisione del tempo di utilizzo in due fasi: iniziale e fuoco lento\n    var initialPhaseTime = usageTimeHours * 0.2; // 20% del tempo totale nella fase iniziale\n    var slowCookingPhaseTime = usageTimeHours * 0.8; // 80% del tempo totale a fuoco lento\n\n    // Calcolo del consumo energetico nella fase iniziale (80%-100% della potenza massima)\n    var initialPhasePower = Math.random() * (maxPowerKw * 0.2) + (maxPowerKw * 0.8); // Potenza variabile tra 80%-100%\n    var initialPhaseConsumption = initialPhasePower * initialPhaseTime;\n\n    // Calcolo del consumo energetico nella fase di fuoco lento (50%-100% della potenza minima)\n    var slowCookingPower = Math.random() * (minPowerKw * 0.5) + (minPowerKw * 0.5); // Potenza variabile tra 50%-100%\n    var slowCookingConsumption = slowCookingPower * slowCookingPhaseTime;\n\n    // Somma dei consumi delle due fasi\n    var energyConsumptionKwh = initialPhaseConsumption + slowCookingConsumption;\n\n    //aggiungo consumo energetico del fornello al consumo totale\n    totalEnergyConsumptionKwh += energyConsumptionKwh;\n\n    // Memorizzo i dati del fornello corrente\n    fornelli.push({\n        area: area,\n        usageTime: usageTimeHours.toFixed(2) + \" hours\",\n        consumption: energyConsumptionKwh.toFixed(2) + \" kWh\"\n    });\n});\n\nmsg.value = totalEnergyConsumptionKwh.toFixed(2);\nvar message = `The induction (idx = ${msg.idx}) with ` + accesi.length + ` stoves turned on (ID: ` + fornelli.map(f => f.area).join(`, `) + `) has consumed ` + msg.value + ` kWh.`;\n\n//dettagli dei fornelli\nmessage += `Usage details: `;\nfornelli.forEach(function (f) {\n    message += `Cooker ID ` + f.area + `: turned on for ` + f.usageTime + `, consumption: ` + f.consumption + `. `;\n});\n\nmsg.payload = message;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1380,
        "wires": [
            [
                "812efa607bb9e851",
                "69d5fb6e78c0f62c"
            ]
        ]
    },
    {
        "id": "812efa607bb9e851",
        "type": "debug",
        "z": "9e7c62f885313afd",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1380,
        "wires": []
    },
    {
        "id": "32c395a1acdbf2f4",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "setting",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 310,
        "y": 1620,
        "wires": [
            [
                "3b979d629588b26c"
            ]
        ]
    },
    {
        "id": "b468e3eade16c1fe",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "Query",
        "func": "const query = {\n    \"oven\": { $exists: true }\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1620,
        "wires": [
            [
                "32c395a1acdbf2f4"
            ]
        ]
    },
    {
        "id": "3b979d629588b26c",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "ExtractParameters",
        "func": "let document = msg.payload[0];\n\n//Estrae i valori dalla struttura JSON\n//potenza\nmsg.power = document.oven.power;\n//modalità\nlet modes = document.oven.modes;\n//temperature\nlet temperatures = document.oven.temperatures;\n\n// Genera un indice casuale basato sulla lunghezza dell'array delle modalità disponibili\nlet randomIndex = Math.floor(Math.random() * modes.length);\n// Genera un indice casuale basato sulla lunghezza dell'array delle temperature\nlet randomIndexT = Math.floor(Math.random() * temperatures.length);\n// Seleziona casualmente una modalità\nmsg.mode = modes[randomIndex];\n// Seleziona casualmente una temperatura\nmsg.temperature = temperatures[randomIndexT];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1620,
        "wires": [
            [
                "a78b9494d8fcfecd"
            ]
        ]
    },
    {
        "id": "a78b9494d8fcfecd",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "CreateConsumption",
        "func": "let basePower = msg.power; // Potenza base in kW\nlet mode = msg.mode; // modalità\nlet temperature = msg.temperature; // Temperatura\nconst minTime = 1;\nconst maxTime = 120;\n\n// Fattori di consumo basati sulla modalità\nconst modesCons = {\n    \"standard\": 1,\n    \"grill\": 1.2,\n    \"ventilated\": 1.1,\n};\n\nconst temperatureCons = [\n    { max: 100, factor: 1.0 },\n    { max: 150, factor: 1.1 },\n    { max: 200, factor: 1.2 },\n    { max: 250, factor: 1.3 },\n    { max: 300, factor: 1.4 }\n];\n\n// Fattori di consumo effettivi modalita e temperatura\nlet modesFactor = modesCons[mode];\n\nlet tempFactor;\nfor (const interval of temperatureCons) {\n    if (temperature <= interval.max) {\n        tempFactor = interval.factor;\n        break;\n    }\n}\n\n//tempo di utilizzo casuale\nlet time = Math.floor(Math.random() * (maxTime - minTime + 1)) + minTime;\ntime = time/60;\ntime = parseFloat(time.toFixed(2))\n\nlet totalConsumption = basePower * time * modesFactor * tempFactor;\ntotalConsumption = parseFloat(totalConsumption.toFixed(2));\nmsg.value = totalConsumption;\n\nmsg.payload = `The oven (idx = ${msg.idx}), ran for ${time} hours on ${mode} mode, at ${temperature}°, with a consumption of ${msg.value} kWh.`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1620,
        "wires": [
            [
                "3b6528a1c1255bca",
                "e18689444a1bdd7c"
            ]
        ]
    },
    {
        "id": "3b6528a1c1255bca",
        "type": "debug",
        "z": "9e7c62f885313afd",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1620,
        "wires": []
    },
    {
        "id": "57135409efb36ad5",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "setting",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 290,
        "y": 2660,
        "wires": [
            [
                "749d9e9932729cc1"
            ]
        ]
    },
    {
        "id": "6e890f7ed2ec921c",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "Query",
        "func": "const query = {\n    \"water\": { $exists: true }\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 2660,
        "wires": [
            [
                "57135409efb36ad5"
            ]
        ]
    },
    {
        "id": "749d9e9932729cc1",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "ExtractParameters",
        "func": "let document = msg.payload[0];\n\n//Estrae i valori dalla struttura JSON\n//min e max consumption\nmsg.minCons = parseInt(document.water.minConsumption);\nmsg.maxCons = parseInt(document.water.maxConsumption);\n//massima durata\nmsg.maxDuration = parseInt(document.water.maxDuration);\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2660,
        "wires": [
            [
                "b0879e9f623f7301"
            ]
        ]
    },
    {
        "id": "b0879e9f623f7301",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "CreateConsumption",
        "func": "let minCons = msg.minCons;\nlet maxCons = msg.maxCons;\nlet maxDuration = msg.maxDuration;\n\n// Genera un consumo casuale tra minimo e massimo\nlet consLMinutes = Math.random() * (maxCons - minCons) + minCons;\nconsLMinutes = parseFloat(consLMinutes).toFixed(2);\n// Genera una durata casuale fino a maxDuration\nlet time = Math.random() * maxDuration;\ntime = parseFloat(time).toFixed(2);\n\nlet consumoTotale = consLMinutes * time;\nconsumoTotale = parseFloat(consumoTotale.toFixed(2));\n\nmsg.value = consumoTotale;\n\nmsg.payload = `The water (idx = ${msg.idx}) was used for ${time} minutes with a consumption of ${consLMinutes} L/min. The total consumption is ${msg.value} L.`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 2660,
        "wires": [
            [
                "c285dc2be7bc08a4",
                "a88bb5294d880250"
            ]
        ]
    },
    {
        "id": "c285dc2be7bc08a4",
        "type": "debug",
        "z": "9e7c62f885313afd",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2660,
        "wires": []
    },
    {
        "id": "f7c49d49101f8379",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "9e7c62f885313afd",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1230,
        "y": 500,
        "wires": [
            [
                "da67704b4b11659d"
            ]
        ]
    },
    {
        "id": "10684a71aabe4ee0",
        "type": "mqtt out",
        "z": "9e7c62f885313afd",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1360,
        "y": 760,
        "wires": []
    },
    {
        "id": "cdbd220bd73809ca",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "9e7c62f885313afd",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1210,
        "y": 760,
        "wires": [
            [
                "10684a71aabe4ee0"
            ]
        ]
    },
    {
        "id": "1763068c7889d994",
        "type": "mqtt out",
        "z": "9e7c62f885313afd",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1300,
        "y": 980,
        "wires": []
    },
    {
        "id": "debc47b14d54b5f0",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "9e7c62f885313afd",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1150,
        "y": 980,
        "wires": [
            [
                "1763068c7889d994"
            ]
        ]
    },
    {
        "id": "8b3c345dd4b7fd6e",
        "type": "mqtt out",
        "z": "9e7c62f885313afd",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1240,
        "y": 1220,
        "wires": []
    },
    {
        "id": "54db102e8adb606e",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "9e7c62f885313afd",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1090,
        "y": 1220,
        "wires": [
            [
                "8b3c345dd4b7fd6e"
            ]
        ]
    },
    {
        "id": "e3d774c25749529c",
        "type": "mqtt out",
        "z": "9e7c62f885313afd",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1300,
        "y": 1480,
        "wires": []
    },
    {
        "id": "8a6276bdf9e9d830",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "9e7c62f885313afd",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1150,
        "y": 1480,
        "wires": [
            [
                "e3d774c25749529c"
            ]
        ]
    },
    {
        "id": "b2aeac524f66e111",
        "type": "mqtt out",
        "z": "9e7c62f885313afd",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1260,
        "y": 1700,
        "wires": []
    },
    {
        "id": "a061f93e4e7df6b5",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "9e7c62f885313afd",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1110,
        "y": 1700,
        "wires": [
            [
                "b2aeac524f66e111"
            ]
        ]
    },
    {
        "id": "170705b6dba27dcb",
        "type": "mqtt out",
        "z": "9e7c62f885313afd",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1280,
        "y": 1960,
        "wires": []
    },
    {
        "id": "79d9a7c6ad67aecb",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "9e7c62f885313afd",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1110,
        "y": 1960,
        "wires": [
            [
                "170705b6dba27dcb"
            ]
        ]
    },
    {
        "id": "0a186d365ec2bc08",
        "type": "mqtt out",
        "z": "9e7c62f885313afd",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1280,
        "y": 2240,
        "wires": []
    },
    {
        "id": "7c8b43c3e69f5fa6",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "9e7c62f885313afd",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1110,
        "y": 2240,
        "wires": [
            [
                "0a186d365ec2bc08"
            ]
        ]
    },
    {
        "id": "eb7bd77a3f9b363d",
        "type": "mqtt out",
        "z": "9e7c62f885313afd",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1340,
        "y": 2480,
        "wires": []
    },
    {
        "id": "3c0f5f90b3fb4a92",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "9e7c62f885313afd",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1190,
        "y": 2480,
        "wires": [
            [
                "eb7bd77a3f9b363d"
            ]
        ]
    },
    {
        "id": "695c83513d4ed3db",
        "type": "mqtt out",
        "z": "9e7c62f885313afd",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1300,
        "y": 2740,
        "wires": []
    },
    {
        "id": "ada10a739921f928",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "9e7c62f885313afd",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1150,
        "y": 2740,
        "wires": [
            [
                "695c83513d4ed3db"
            ]
        ]
    },
    {
        "id": "3a3026e06fbb0127",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "CreateConsumption",
        "func": "// Definisci la potenza di base per ogni stanza\nlet powerBase;\nswitch (msg.room) {\n    case 'livingroom':\n        powerBase = 60; // watt\n        break;\n    case 'kitchen':\n        powerBase = 100; // watt\n        break;\n    case 'bedroom':\n        powerBase = 40; // watt\n        break;\n    case 'bathroom':\n        powerBase = 75; // watt\n        break;\n    default:\n        powerBase = 50; // watt di default\n        break;\n}\n\nlet intensity = msg.intensity; \n\n//Potenza effettiva in base all'intensità\nlet actualPower = powerBase * intensity; //watt\n\n//Limiti di tempo in millisecondi\nlet minTimeMs = 1 * 60 * 1000; // 1 minuto\nlet maxTimeMs = 3 * 60 * 60 * 1000; // 3 ore\n\n// Genera un tempo randomico di accensione\nlet randomTimeMs = Math.random() * (maxTimeMs - minTimeMs) + minTimeMs;\n\n// Conversione per il calcolo del consumo energetico\nlet durationHours = randomTimeMs / (1000 * 60 * 60); // tempo in ore\ndurationHours = parseFloat(durationHours.toFixed(2));\n\n//consumo in kWh\nlet energyConsumed = (actualPower * durationHours) / 1000;\nenergyConsumed = parseFloat(energyConsumed.toFixed(4))\n\n// Aggiungi il tempo di accensione e il consumo al messaggio in output\nmsg.value = energyConsumed;\n\nmsg.payload = `The ${msg.room}'s light (idx = ${msg.idx}), ran for ${durationHours} hours, with a consumption of ${msg.value} kWh.`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2440,
        "wires": [
            [
                "be2b40834f357765",
                "6d2709ceac830a94"
            ]
        ]
    },
    {
        "id": "6d2709ceac830a94",
        "type": "debug",
        "z": "9e7c62f885313afd",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 2480,
        "wires": []
    },
    {
        "id": "23b94769059c9172",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "setting",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 290,
        "y": 2140,
        "wires": [
            [
                "ea6a7ddc388ed402"
            ]
        ]
    },
    {
        "id": "f5654fc56a7e2db1",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "Query",
        "func": "const query = {\n    \"temperature_system\": { $exists: true }\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 2140,
        "wires": [
            [
                "23b94769059c9172"
            ]
        ]
    },
    {
        "id": "ea6a7ddc388ed402",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "ExtractParameters",
        "func": "let document = msg.payload[0];\n\n//Estrae i valori dalla struttura JSON\n//potenza\nmsg.power = document.temperature_system.power;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2140,
        "wires": [
            [
                "82121c68af92a92c"
            ]
        ]
    },
    {
        "id": "82121c68af92a92c",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "CreateConsumption",
        "func": "// Potenza base in kilowatt (kW)\nlet basePower = msg.power; // Potenza base in kW\n\n// Stanza dove si è acceso il riscaldamento\nlet room = msg.room;\n\n// Moltiplicatori di consumo in base alla grandezza della stanza\nlet sizeMultiplier;\nswitch (room) {\n    case 'kitchen':\n        sizeMultiplier = 1.2; // 20% in più\n        break;\n    case 'hallway':\n        sizeMultiplier = 0.8; // 20% in meno\n        break;\n    case 'stairways':\n        sizeMultiplier = 0.9; // 10% in meno\n        break;\n    case 'bedroom':\n        sizeMultiplier = 1.1; // 10% in più\n        break;\n    case 'livingroom':\n        sizeMultiplier = 1.5; // 50% in più\n        break;\n    case 'bathroom':\n        sizeMultiplier = 1.3; // 30% in più\n        break;\n    default:\n        sizeMultiplier = 1.0; // Default (nessuna modifica)\n        break;\n}\n\n// Potenza effettiva in base alla grandezza della stanza (in kW)\nlet actualPower = basePower * sizeMultiplier;\n\n// Tempo randomico per la durata dell'accensione, da 15 minuti a 4 ore\nlet minTimeMs = 15 * 60 * 1000; // 15 minuti\nlet maxTimeMs = 4 * 60 * 60 * 1000; // 4 ore\nlet randomTimeMs = Math.random() * (maxTimeMs - minTimeMs) + minTimeMs;\n\n// Conversione in ore per il calcolo del consumo energetico\nlet durationHours = randomTimeMs / (1000 * 60 * 60);\ndurationHours = parseFloat(durationHours.toFixed(2));\n\n// Calcolo del consumo in kWh\nlet energyConsumed = actualPower * durationHours;\nenergyConsumed = parseFloat(energyConsumed.toFixed(2));\n\nmsg.value = energyConsumed;\n\nmsg.payload = `The temperature system (home = ${msg.home}) activated to heat ${room} for ${durationHours} hours, consumed ${msg.value} kWh.`;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 2140,
        "wires": [
            [
                "de95d42c3d46b19f",
                "45fdc2f94ad2f317"
            ]
        ]
    },
    {
        "id": "45fdc2f94ad2f317",
        "type": "debug",
        "z": "9e7c62f885313afd",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2140,
        "wires": []
    },
    {
        "id": "1486c78a0ac16044",
        "type": "mongodb4",
        "z": "9e7c62f885313afd",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "setting",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 310,
        "y": 900,
        "wires": [
            [
                "b5424593ebf8300f"
            ]
        ]
    },
    {
        "id": "55a59192b0f67047",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "Query",
        "func": "const query = {\n    \"home_theater\": { $exists: true }\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 900,
        "wires": [
            [
                "1486c78a0ac16044"
            ]
        ]
    },
    {
        "id": "b5424593ebf8300f",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "ExtractParameters",
        "func": "let document = msg.payload[0];\n\n// Estrae i valori dalla struttura JSON\nmsg.maxPower = parseInt(document.home_theater.maxPower); \nmsg.minPower = parseInt(document.home_theater.minPower); \n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 900,
        "wires": [
            [
                "84e8ec8a0a6df47d"
            ]
        ]
    },
    {
        "id": "84e8ec8a0a6df47d",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "CreateConsumption",
        "func": "//potenza random\nlet randomPower = Math.random() * (msg.maxPower - msg.minPower) + msg.minPower;\n\n//tempo randomico per la durata di utilizzo, da 30 minuti a 3 ore\nlet minTimeMs = 30 * 60 * 1000; // 30 minuti\nlet maxTimeMs = 3 * 60 * 60 * 1000; // 3 ore\nlet randomTimeMs = Math.random() * (maxTimeMs - minTimeMs) + minTimeMs;\n\n//conversione in ore\nlet durationHours = randomTimeMs / (1000 * 60 * 60);\ndurationHours = parseFloat(durationHours.toFixed(2));\n\nlet energyConsumed = randomPower * durationHours;\nenergyConsumed = parseFloat(energyConsumed.toFixed(2));\n\nmsg.value = energyConsumed;\n\nmsg.payload = `The home theater (idx = ${msg.idx}), ran for ${msg.value} hours with a consumption of ${energyConsumed} kWh.`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 900,
        "wires": [
            [
                "3c7a47b525f0af4d",
                "2879b15a7eea2bf0"
            ]
        ]
    },
    {
        "id": "3c7a47b525f0af4d",
        "type": "debug",
        "z": "9e7c62f885313afd",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 900,
        "wires": []
    },
    {
        "id": "19c9bd2e2513b864",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "Query",
        "func": "const query = {\n    \"alarm_system\": { $exists: true }\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1860,
        "wires": [
            [
                "0efd694337c6e37a"
            ]
        ]
    },
    {
        "id": "b199210a9cc22611",
        "type": "function",
        "z": "9e7c62f885313afd",
        "name": "ExtractParameters",
        "func": "let document = msg.payload[0];\n\n//Estrae i valori dalla struttura JSON\n//potenza \nmsg.power = document.alarm_system.power;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1860,
        "wires": [
            [
                "e60e663a9da8f413"
            ]
        ]
    },
    {
        "id": "804db3b3d7c10473",
        "type": "debug",
        "z": "9e7c62f885313afd",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1860,
        "wires": []
    },
    {
        "id": "132f26a422180fcb",
        "type": "comment",
        "z": "9e7c62f885313afd",
        "name": "AirConditioning",
        "info": "Mediamente un condizionatore consuma tra 0.7 e 0.85 kwh, noi generiamo il consumo in base a:\n1. Potenza di base\n2. Fattore di consumo in base a modalita del condizionatore\n3. Fattore di consumo in base a modalita delle ventole \n4. Temperatura del condizionatore",
        "x": 160,
        "y": 620,
        "wires": []
    },
    {
        "id": "aad9e048c7d566a6",
        "type": "comment",
        "z": "9e7c62f885313afd",
        "name": "HomeTheater",
        "info": "Per il consumo di una home theater si considera:\n1. Min e Max Power = generalmente va da 500 w a 1000 w di picco\n2. Tempo di consumo random",
        "x": 150,
        "y": 860,
        "wires": []
    },
    {
        "id": "12ced62a1c648c08",
        "type": "comment",
        "z": "9e7c62f885313afd",
        "name": "SmartTV",
        "info": "Per calcolare il consumo della smartTV si considera.\n1. Potenza di base;\n2. Tempo di utilizzo\nPer rendere la simulazione dei consumi piu veritiera e realistica, ho creato una randomizzazione\navanzata del tempo di utilizzo basandomi su giorno e ora corrente distinguendo in base a:\n1. Weekend,weekday\n2. Giorno,sera",
        "x": 140,
        "y": 1100,
        "wires": []
    },
    {
        "id": "fe7761e6402ce8b1",
        "type": "comment",
        "z": "9e7c62f885313afd",
        "name": "Stove",
        "info": "Per calcolare il consumo del fornello ad induzione, viene utilizzata questa logica, tenendo conto di:\n1. minPower;\n2. maxPower;\n3. cooking_areas (generalmente un piano ne ha 4)\n\nIn modo casuale viene determinato quanti fornelli si accenderanno (da 1 a 4).\nUna stabilito il numero, con il while seleziono casualmente gli id di quelli da accendere.\nAvviene la simulazione di ciascun fornello, contando un tempo casuale di accensione e calcolando il consumo conteggiando una suddivisione del tempo totale:\n1. 20% del tempo per la fase iniziale (es bollitura dell'acqua), dove il fornello funzina ad una potenza compresa tra 80 e 100% della potenza massima\n2. 80% del tempo per la fase di cottura a fuoco lento, dove la potenza è compresa tra 50 e 100% della potenza minima.\nMano a mano poi si costruisce il consumo dei singoli fornelli e poi quello totale.",
        "x": 130,
        "y": 1340,
        "wires": []
    },
    {
        "id": "8019c6553b4dc897",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"laundry_machine\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 200,
        "wires": [
            [
                "4d2addc47a944a46"
            ]
        ]
    },
    {
        "id": "4d2addc47a944a46",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 480,
        "y": 200,
        "wires": [
            [
                "11763b32d53e4d5d"
            ]
        ]
    },
    {
        "id": "af892bb0a3c1b939",
        "type": "inject",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "8019c6553b4dc897"
            ]
        ]
    },
    {
        "id": "11763b32d53e4d5d",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionLaundry",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsLaundryA = 0;\n        return msg;\n    }\n\n    msg.dayConsLaundryA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsLaundryA = Math.round(msg.dayConsLaundryA * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLaundryAD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 200,
        "wires": [
            [
                "5822d25721a9d30d"
            ]
        ]
    },
    {
        "id": "5822d25721a9d30d",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"bathroom\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 280,
        "wires": [
            [
                "201ba961e56f2e0e"
            ]
        ]
    },
    {
        "id": "201ba961e56f2e0e",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 320,
        "y": 280,
        "wires": [
            [
                "e802ec28d3e7fe44"
            ]
        ]
    },
    {
        "id": "e802ec28d3e7fe44",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsLightAB = 0;\n        return msg;\n    }\n\n    msg.dayConsLightAB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsLightAB = Math.round(msg.dayConsLightAB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightABD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 280,
        "wires": [
            [
                "b7c605158ac11c17",
                "752e56a92e29a809"
            ]
        ]
    },
    {
        "id": "439ef63b29bba457",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "SmartHome A",
        "info": "",
        "x": 130,
        "y": 80,
        "wires": []
    },
    {
        "id": "115a4aa56f757d3f",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Bathroom-Day",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo giornaliero degli item per la stanza bathroom.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1.  Laundry Machine;\n 2. Light\n 3. Water\n Sommando questi consumi, ho il totale dei cosumi giornalieri del bagno",
        "x": 140,
        "y": 140,
        "wires": []
    },
    {
        "id": "b7c605158ac11c17",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"bathroom\",\n    \"item\": \"water\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 360,
        "wires": [
            [
                "1a506c7030966886"
            ]
        ]
    },
    {
        "id": "1a506c7030966886",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 320,
        "y": 360,
        "wires": [
            [
                "597b621637063a73"
            ]
        ]
    },
    {
        "id": "597b621637063a73",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionWater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.totDayConsWaterAB = 0;\n        return msg;\n    }\n\n    msg.totDayConsWaterAB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.totDayConsWaterAB = Math.round(msg.totDayConsWaterAB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountWaterABD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 360,
        "wires": [
            [
                "769cc4f6e20a8670"
            ]
        ]
    },
    {
        "id": "752e56a92e29a809",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotDayConsBathroom",
        "func": "let dayLightAB = msg.dayConsLightAB;\nlet dayLaundryA = msg.dayConsLaundryA;\n\nmsg.totDayConsBathroomA = parseFloat((dayLightAB + dayLaundryA)).toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 280,
        "wires": [
            [
                "94e05473a80c2929"
            ]
        ]
    },
    {
        "id": "94e05473a80c2929",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsBathroomA;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/A/bathroom/consumption/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 280,
        "wires": [
            [
                "c1735c9fc55b3408"
            ]
        ]
    },
    {
        "id": "769cc4f6e20a8670",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsWaterAB;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/A/bathroom/consumption/water/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 360,
        "wires": [
            [
                "b654025c83c9f85a"
            ]
        ]
    },
    {
        "id": "886f18f9730ed4a9",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1260,
        "y": 280,
        "wires": []
    },
    {
        "id": "6259b4d0b5794ec8",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1180,
        "y": 360,
        "wires": []
    },
    {
        "id": "d891dacceaef612e",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Bathroom-Month",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo giornaliero degli item per la stanza bathroom.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Laundry Machine;\n 2. Light\n 3. Water\n Sommando questi consumi, ho il totale dei cosumi giornalieri del bagno",
        "x": 1500,
        "y": 140,
        "wires": []
    },
    {
        "id": "a2299778c92c9c4e",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"laundry_machine\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 200,
        "wires": [
            [
                "d6532f08a3f15004"
            ]
        ]
    },
    {
        "id": "d6532f08a3f15004",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1910,
        "y": 200,
        "wires": [
            [
                "60531a11437adc55"
            ]
        ]
    },
    {
        "id": "60531a11437adc55",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionLaundry",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsLaundryA = 0;\n        return msg;\n    }\n\n    msg.monthConsLaundryA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsLaundryA = Math.round(msg.monthConsLaundryA * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLaundryAM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 200,
        "wires": [
            [
                "fc3b091741e87055"
            ]
        ]
    },
    {
        "id": "fc3b091741e87055",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"bathroom\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 280,
        "wires": [
            [
                "f06cc13b3b137393"
            ]
        ]
    },
    {
        "id": "f06cc13b3b137393",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1750,
        "y": 280,
        "wires": [
            [
                "f7d411b7cdd1d6b1"
            ]
        ]
    },
    {
        "id": "f7d411b7cdd1d6b1",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsLightAB = 0;\n        return msg;\n    }\n\n    msg.monthConsLightAB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsLightAB = Math.round(msg.monthConsLightAB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightABM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 280,
        "wires": [
            [
                "585de753e5d44dc0"
            ]
        ]
    },
    {
        "id": "40e03a063991ac41",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"bathroom\",\n    \"item\": \"water\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 360,
        "wires": [
            [
                "30fee11308634b5e"
            ]
        ]
    },
    {
        "id": "30fee11308634b5e",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1750,
        "y": 360,
        "wires": [
            [
                "2552af0ec512c62d"
            ]
        ]
    },
    {
        "id": "2552af0ec512c62d",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionWater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsWaterAB = 0;\n        return msg;\n    }\n\n    msg.monthConsWaterAB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsWaterAB = Math.round(msg.monthConsWaterAB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountWaterABM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 360,
        "wires": [
            [
                "6587628ad91fe3d5"
            ]
        ]
    },
    {
        "id": "585de753e5d44dc0",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotMonthConsBathroom",
        "func": "let monthLightAB = msg.monthConsLightAB;\nlet monthLaundryA = msg.monthConsLaundryA;\n\nmsg.totMonthConsBathroomA = monthLightAB + monthLaundryA;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 280,
        "wires": [
            [
                "40e03a063991ac41"
            ]
        ]
    },
    {
        "id": "1d368b4e68e904e6",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Kitchen-Day",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo giornaliero degli item per la stanza kitchen.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Stove;\n 3. Oven;\n 4. Water\n Sommando questi consumi, ho il totale dei cosumi giornalieri del bagno",
        "x": 130,
        "y": 480,
        "wires": []
    },
    {
        "id": "dc7488718b8949b5",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"kitchen\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 540,
        "wires": [
            [
                "3b1857a8fe940d63"
            ]
        ]
    },
    {
        "id": "3b1857a8fe940d63",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 480,
        "y": 540,
        "wires": [
            [
                "d0c7d3453d92201d"
            ]
        ]
    },
    {
        "id": "0cdc969bf7be38f3",
        "type": "inject",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "dc7488718b8949b5"
            ]
        ]
    },
    {
        "id": "d0c7d3453d92201d",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsLightAK = 0;\n        return msg;\n    }\n\n    msg.dayConsLightAK = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsLightAK = Math.round(msg.dayConsLightAK * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightAKD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 540,
        "wires": [
            [
                "30cbb82564229d73"
            ]
        ]
    },
    {
        "id": "30cbb82564229d73",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"stove\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 620,
        "wires": [
            [
                "768cd2ed60f68358"
            ]
        ]
    },
    {
        "id": "768cd2ed60f68358",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 320,
        "y": 620,
        "wires": [
            [
                "45a97335e4774877"
            ]
        ]
    },
    {
        "id": "45a97335e4774877",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionStove",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsStoveA = 0;\n        return msg;\n    }\n\n    msg.dayConsStoveA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n \n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountStoveAD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 620,
        "wires": [
            [
                "bbb750ae4a93ba01"
            ]
        ]
    },
    {
        "id": "024795852bc489ef",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"kitchen\",\n    \"item\": \"water\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 820,
        "wires": [
            [
                "fc7f7ca16cd6f692"
            ]
        ]
    },
    {
        "id": "fc7f7ca16cd6f692",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 320,
        "y": 820,
        "wires": [
            [
                "2cf2dfb7fd1e530a"
            ]
        ]
    },
    {
        "id": "2cf2dfb7fd1e530a",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionWater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.totDayConsWaterAK = 0;\n        return msg;\n    }\n\n    msg.totDayConsWaterAK = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.totDayConsWaterAK = Math.round(msg.totDayConsWaterAK * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountWaterAKD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 820,
        "wires": [
            [
                "0125f67378e1819b"
            ]
        ]
    },
    {
        "id": "0125f67378e1819b",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsWaterAK;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/A/kitchen/consumption/water/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 820,
        "wires": [
            [
                "b4803b4b3af5592b"
            ]
        ]
    },
    {
        "id": "a2a3b69fa450024f",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1180,
        "y": 820,
        "wires": []
    },
    {
        "id": "bbb750ae4a93ba01",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"oven\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 720,
        "wires": [
            [
                "02eb48aa1d39e778"
            ]
        ]
    },
    {
        "id": "02eb48aa1d39e778",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 320,
        "y": 720,
        "wires": [
            [
                "1b1d57762de56f8c"
            ]
        ]
    },
    {
        "id": "1b1d57762de56f8c",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionOven",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsOvenA = 0;\n        return msg;\n    }\n\n    msg.dayConsOvenA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsOvenA = Math.round(msg.dayConsOvenA * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountOvenAD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 720,
        "wires": [
            [
                "867caabb9224b802",
                "024795852bc489ef"
            ]
        ]
    },
    {
        "id": "867caabb9224b802",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotDayConsKitchen",
        "func": "let dayLightAK = msg.dayConsLightAK;\nlet dayStoveA = msg.dayConsStoveA;\nlet dayOvenA =  msg.dayConsOvenA;\n\nmsg.totDayConsKitchenA = parseFloat((dayLightAK + dayStoveA + dayOvenA)).toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 720,
        "wires": [
            [
                "b3c81ba67fcf6ff7"
            ]
        ]
    },
    {
        "id": "b3c81ba67fcf6ff7",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsKitchenA;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/A/kitchen/consumption/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 720,
        "wires": [
            [
                "c41787bf54657fb6"
            ]
        ]
    },
    {
        "id": "0c107f60ff63115e",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1240,
        "y": 720,
        "wires": []
    },
    {
        "id": "520d451a1876e7bd",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Kitchen-Month",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo mensile degli item per la stanza kitchen.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Stove;\n 3. Oven;\n 3. Water;\n Sommando questi consumi, ho il totale dei cosumi mensili della cucina",
        "x": 1500,
        "y": 480,
        "wires": []
    },
    {
        "id": "e04061d55ac7b66f",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"kitchen\",\n    \"item\": \"water\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 820,
        "wires": [
            [
                "502763618360bec4"
            ]
        ]
    },
    {
        "id": "502763618360bec4",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1750,
        "y": 820,
        "wires": [
            [
                "7ff65ed96fd7786a"
            ]
        ]
    },
    {
        "id": "7ff65ed96fd7786a",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionWater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsWaterAK = 0;\n        return msg;\n    }\n\n    msg.monthConsWaterAK = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsWaterAK = Math.round(msg.monthConsWaterAK * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountWaterAKM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 820,
        "wires": [
            [
                "a2b8c13e8f9f86a1"
            ]
        ]
    },
    {
        "id": "40df3da0af6003b4",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotMonthConsKitchen",
        "func": "let monthLightAK = msg.monthConsLightAK;\nlet monthStoveA = msg.monthConsStoveA;\nlet monthOvenA = msg.monthConsOvenA;\n\nmsg.totMonthConsKitchenA = monthLightAK + monthStoveA + monthOvenA;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 720,
        "wires": [
            [
                "e04061d55ac7b66f"
            ]
        ]
    },
    {
        "id": "746508b24290df38",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"stove\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 620,
        "wires": [
            [
                "51736015c4a46fce"
            ]
        ]
    },
    {
        "id": "51736015c4a46fce",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1750,
        "y": 620,
        "wires": [
            [
                "87ad0db3d0e48eac"
            ]
        ]
    },
    {
        "id": "87ad0db3d0e48eac",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionStove",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsStoveA = 0;\n        return msg;\n    }\n\n    msg.monthConsStoveA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsStoveA = Math.round(msg.monthConsStoveA * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountStoveAM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 620,
        "wires": [
            [
                "b16948df1ba84ced"
            ]
        ]
    },
    {
        "id": "61c86779faf297d9",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"kitchen\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 540,
        "wires": [
            [
                "3e6891c283e2eb10"
            ]
        ]
    },
    {
        "id": "3e6891c283e2eb10",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1910,
        "y": 540,
        "wires": [
            [
                "d6fa4e1d3129b536"
            ]
        ]
    },
    {
        "id": "d6fa4e1d3129b536",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsLightAK = 0;\n        return msg;\n    }\n\n    msg.monthConsLightAK = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsLightAK = Math.round(msg.monthConsLightAK * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightAKM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 540,
        "wires": [
            [
                "746508b24290df38"
            ]
        ]
    },
    {
        "id": "b16948df1ba84ced",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"oven\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 720,
        "wires": [
            [
                "0599c4d10dd11175"
            ]
        ]
    },
    {
        "id": "0599c4d10dd11175",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1750,
        "y": 720,
        "wires": [
            [
                "3c2b4c7163638097"
            ]
        ]
    },
    {
        "id": "3c2b4c7163638097",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionOven",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsOvenA = 0;\n        return msg;\n    }\n\n    msg.monthConsOvenA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsOvenA = Math.round(msg.monthConsOvenA * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountOvenAM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 720,
        "wires": [
            [
                "40df3da0af6003b4"
            ]
        ]
    },
    {
        "id": "8a10b63d3704b965",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Stairways-Day",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo giornaliero degli item per la stanza stairways.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Temperature System;\n 3. Alarm System;\n Sommando questi consumi, ho il totale dei cosumi giornalieri di stairways",
        "x": 140,
        "y": 920,
        "wires": []
    },
    {
        "id": "c19fe7193012d171",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"stairways\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 980,
        "wires": [
            [
                "dcf7b4582fadf1f7"
            ]
        ]
    },
    {
        "id": "dcf7b4582fadf1f7",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 480,
        "y": 980,
        "wires": [
            [
                "9aa6a668c28c5d21"
            ]
        ]
    },
    {
        "id": "aafd799593c8bd71",
        "type": "inject",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 980,
        "wires": [
            [
                "c19fe7193012d171"
            ]
        ]
    },
    {
        "id": "9aa6a668c28c5d21",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsLightAS = 0;\n        return msg;\n    }\n\n    msg.dayConsLightAS = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsLightAS = Math.round(msg.dayConsLightAS * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightASD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 980,
        "wires": [
            [
                "04594339bd8f7d88"
            ]
        ]
    },
    {
        "id": "04594339bd8f7d88",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"temperature_system\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1060,
        "wires": [
            [
                "5ac62e0425463512"
            ]
        ]
    },
    {
        "id": "5ac62e0425463512",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 320,
        "y": 1060,
        "wires": [
            [
                "55ab78606edda497"
            ]
        ]
    },
    {
        "id": "55ab78606edda497",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionTempSys",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsTempSysA = 0;\n        return msg;\n    }\n\n    msg.dayConsTempSysA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsTempSysA = Math.round(msg.dayConsTempSysA * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountTempSysAD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1060,
        "wires": [
            [
                "43de4795350a98b1"
            ]
        ]
    },
    {
        "id": "fac98b43a3d17f9b",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Stairways-Month",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo mensile degli item per la stanza stairways.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Temperature System;\n 3. Alarm System;\n Sommando questi consumi, ho il totale dei cosumi mensili di stairways",
        "x": 1500,
        "y": 940,
        "wires": []
    },
    {
        "id": "901e9230c77d09c8",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotMonthConsStairways",
        "func": "let monthLightAS = msg.monthConsLightAS;\nlet monthTempSysA = msg.monthConsTempSysA;\nlet monthAlarmSysA = msg.monthConsAlarmSysA;\n\nmsg.totMonthConsStairwaysA = parseFloat((monthLightAS + monthTempSysA + monthAlarmSysA).toFixed(2));\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 1200,
        "wires": [
            [
                "3e31a5597bf647dc"
            ]
        ]
    },
    {
        "id": "19a4e23879862b37",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"temperature_system\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1100,
        "wires": [
            [
                "027c67a7ea1183a1"
            ]
        ]
    },
    {
        "id": "027c67a7ea1183a1",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1750,
        "y": 1100,
        "wires": [
            [
                "236e4bfcf5261134"
            ]
        ]
    },
    {
        "id": "236e4bfcf5261134",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionTempSys",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsTempSysA = 0;\n        return msg;\n    }\n\n    msg.monthConsTempSysA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsTempSysA = Math.round(msg.monthConsTempSysA * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountTempSysAM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 1100,
        "wires": [
            [
                "4de8f0d3f525439f"
            ]
        ]
    },
    {
        "id": "282d6a7dc5190a46",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"stairways\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1000,
        "wires": [
            [
                "bc15363cc3f007b8"
            ]
        ]
    },
    {
        "id": "bc15363cc3f007b8",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1910,
        "y": 1000,
        "wires": [
            [
                "6dc18a9f2060495e"
            ]
        ]
    },
    {
        "id": "6dc18a9f2060495e",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsLightAS = 0;\n        return msg;\n    }\n\n    msg.monthConsLightAS = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsLightAS = Math.round(msg.monthConsLightAS * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightASM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1000,
        "wires": [
            [
                "19a4e23879862b37"
            ]
        ]
    },
    {
        "id": "4de8f0d3f525439f",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"alarm_system\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1200,
        "wires": [
            [
                "12ef7928be4d68b0"
            ]
        ]
    },
    {
        "id": "12ef7928be4d68b0",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1730,
        "y": 1200,
        "wires": [
            [
                "0dd8990f8ec1419f"
            ]
        ]
    },
    {
        "id": "0dd8990f8ec1419f",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionAlarmSys",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsAlarmSysA = 0;\n        return msg;\n    }\n\n    msg.monthConsAlarmSysA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsAlarmSysA = Math.round(msg.monthConsAlarmSysA * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountAlarmSysAM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 1200,
        "wires": [
            [
                "901e9230c77d09c8"
            ]
        ]
    },
    {
        "id": "b74ea26eaf71bd08",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Livingroom-Day",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo giornaliero degli item per la stanza livingroom.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Air conditioning;\n 3. Home theater;\n Sommando questi consumi, ho il totale dei cosumi giornalieri di livingroom",
        "x": 140,
        "y": 1280,
        "wires": []
    },
    {
        "id": "a063ea7cbe21aa80",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"livingroom\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1340,
        "wires": [
            [
                "3ab60cc24bfef182"
            ]
        ]
    },
    {
        "id": "3ab60cc24bfef182",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 480,
        "y": 1340,
        "wires": [
            [
                "e594d8e27b4c9795"
            ]
        ]
    },
    {
        "id": "ebdbc6218dccf116",
        "type": "inject",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "0.4",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1340,
        "wires": [
            [
                "a063ea7cbe21aa80"
            ]
        ]
    },
    {
        "id": "e594d8e27b4c9795",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsLightAL = 0;\n        return msg;\n    }\n\n    msg.dayConsLightAL = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsLightAL = Math.round(msg.dayConsLightAL * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightALD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1340,
        "wires": [
            [
                "6d6c446e25e248d0"
            ]
        ]
    },
    {
        "id": "6d6c446e25e248d0",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"livingroom\",\n    \"item\": \"air_conditioning\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1440,
        "wires": [
            [
                "ccfd234cbbe27b41"
            ]
        ]
    },
    {
        "id": "ccfd234cbbe27b41",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 320,
        "y": 1440,
        "wires": [
            [
                "8ac0a07036f73a1b"
            ]
        ]
    },
    {
        "id": "8ac0a07036f73a1b",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionAirConditioning",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsAirAL = 0;\n        return msg;\n    }\n\n    msg.dayConsAirAL = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsAirAL = Math.round(msg.dayConsAirAL * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountAirCondALD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1440,
        "wires": [
            [
                "562f100cbee9d3a0"
            ]
        ]
    },
    {
        "id": "562f100cbee9d3a0",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"home_theater\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1540,
        "wires": [
            [
                "8b09383d634e547a"
            ]
        ]
    },
    {
        "id": "8b09383d634e547a",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 320,
        "y": 1540,
        "wires": [
            [
                "6c75025fce714e73"
            ]
        ]
    },
    {
        "id": "6c75025fce714e73",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionHomeTheater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsHomeTheaterA = 0;\n        return msg;\n    }\n\n    msg.dayConsHomeTheaterA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsHomeTheaterA = Math.round(msg.dayConsHomeTheaterA * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountHomeTheaterAD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1540,
        "wires": [
            [
                "ce672bbea159f208"
            ]
        ]
    },
    {
        "id": "ce672bbea159f208",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotDayConsLivingroom",
        "func": "let dayLightAL = msg.dayConsLightAL;\nlet dayAirAL = msg.dayConsAirAL;\nlet dayHomeTheaterA = msg.dayConsHomeTheaterA;\n\nmsg.totDayConsLivingroomA = parseFloat((dayLightAL + dayAirAL + dayHomeTheaterA)).toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1540,
        "wires": [
            [
                "8c97662974b8220b"
            ]
        ]
    },
    {
        "id": "8c97662974b8220b",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsLivingroomA;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/A/livingroom/consumption/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1540,
        "wires": [
            [
                "c726858b75054513"
            ]
        ]
    },
    {
        "id": "e4405e71c3a5cde8",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1260,
        "y": 1540,
        "wires": []
    },
    {
        "id": "df6fcbc6e45bc894",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Livingroom-Month",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo mensile degli item per la stanza livingroom.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Air conditioning;\n 3. Home theater;\n Sommando questi consumi, ho il totale dei cosumi mensili di livingroom",
        "x": 1510,
        "y": 1320,
        "wires": []
    },
    {
        "id": "21f74aa86eab4d1c",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotMonthConsLivingroom",
        "func": "let monthLightAL = msg.monthConsLightAL;\nlet monthAirAL = msg.monthConsAirAL;\nlet monthHomeTheaterA = msg.monthConsHomeTheaterA;\n\nmsg.totMonthConsLivingroomA = monthLightAL + monthAirAL + monthHomeTheaterA;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 1540,
        "wires": [
            [
                "de2f407274e0f25d"
            ]
        ]
    },
    {
        "id": "dba4e43990d10d99",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"livingroom\",\n    \"item\": \"air_conditioning\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1460,
        "wires": [
            [
                "9c881bd929b7a526"
            ]
        ]
    },
    {
        "id": "9c881bd929b7a526",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1750,
        "y": 1460,
        "wires": [
            [
                "a6cee6ba76355b7d"
            ]
        ]
    },
    {
        "id": "a6cee6ba76355b7d",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionAirConditioning",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsAirAL = 0;\n        return msg;\n    }\n\n    msg.monthConsAirAL = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsAirAL = Math.round(msg.monthConsAirAL * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountAirALM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1460,
        "wires": [
            [
                "9c37a2e2e42190a1"
            ]
        ]
    },
    {
        "id": "1dbf88b6adbb8dc6",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"livingroom\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1380,
        "wires": [
            [
                "c9bc2bb195a640c3"
            ]
        ]
    },
    {
        "id": "c9bc2bb195a640c3",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1910,
        "y": 1380,
        "wires": [
            [
                "7c7e4199c5578c44"
            ]
        ]
    },
    {
        "id": "7c7e4199c5578c44",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsLightAL = 0;\n        return msg;\n    }\n\n    msg.monthConsLightAL = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsLightAL = Math.round(msg.monthConsLightAL * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightALM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1380,
        "wires": [
            [
                "dba4e43990d10d99"
            ]
        ]
    },
    {
        "id": "9c37a2e2e42190a1",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"home_theater\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1540,
        "wires": [
            [
                "ebdabc70e68d0ae6"
            ]
        ]
    },
    {
        "id": "ebdabc70e68d0ae6",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1730,
        "y": 1540,
        "wires": [
            [
                "d07b69c4d93345b1"
            ]
        ]
    },
    {
        "id": "d07b69c4d93345b1",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionHomeTheater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsHomeTheaterA = 0;\n        return msg;\n    }\n\n    msg.monthConsHomeTheaterA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsHomeTheaterA = Math.round(msg.monthConsHomeTheaterA * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountHomeTheaterAM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1540,
        "wires": [
            [
                "21f74aa86eab4d1c"
            ]
        ]
    },
    {
        "id": "cb3652217b5e67ab",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Bedroom-Day",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo giornaliero degli item per la stanza bedroom.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Air conditioning;\n 3. SmartTV;\n Sommando questi consumi, ho il totale dei cosumi giornalieri di bedroom",
        "x": 130,
        "y": 1660,
        "wires": []
    },
    {
        "id": "963c3ccb2379641d",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"bedroom\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1720,
        "wires": [
            [
                "318666175d390673"
            ]
        ]
    },
    {
        "id": "318666175d390673",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 480,
        "y": 1720,
        "wires": [
            [
                "f832ead84cd478f6"
            ]
        ]
    },
    {
        "id": "f041466ffc57ef77",
        "type": "inject",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1720,
        "wires": [
            [
                "963c3ccb2379641d"
            ]
        ]
    },
    {
        "id": "f832ead84cd478f6",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsLightABE = 0;\n        return msg;\n    }\n\n    msg.dayConsLightABE = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsLightABE = Math.round(msg.dayConsLightABE * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightABED = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1720,
        "wires": [
            [
                "1a0582dab88b0342"
            ]
        ]
    },
    {
        "id": "1a0582dab88b0342",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"bedroom\",\n    \"item\": \"air_conditioning\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1800,
        "wires": [
            [
                "af0d266a7039a9ce"
            ]
        ]
    },
    {
        "id": "af0d266a7039a9ce",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 320,
        "y": 1800,
        "wires": [
            [
                "55b0fde428487ec5"
            ]
        ]
    },
    {
        "id": "55b0fde428487ec5",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionAirConditioning",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsAirABE = 0;\n        return msg;\n    }\n\n    msg.dayConsAirABE = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsAirABE = Math.round(msg.dayConsAirABE * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountAirCondABED = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1800,
        "wires": [
            [
                "70897e7da02a58ce"
            ]
        ]
    },
    {
        "id": "70897e7da02a58ce",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"smart_tv\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1880,
        "wires": [
            [
                "f90f5c083e9e2e08"
            ]
        ]
    },
    {
        "id": "f90f5c083e9e2e08",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 320,
        "y": 1880,
        "wires": [
            [
                "28df439feb4cf22c"
            ]
        ]
    },
    {
        "id": "28df439feb4cf22c",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionSmartTV",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsSmartA = 0;\n        return msg;\n    }\n\n    msg.dayConsSmartA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsSmartA = Math.round(msg.dayConsSmartA * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountSmarttvA = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1880,
        "wires": [
            [
                "45673ad725aa8a6e"
            ]
        ]
    },
    {
        "id": "45673ad725aa8a6e",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotDayConsBedroom",
        "func": "let dayLightABE = msg.dayConsLightABE;\nlet dayAirABE = msg.dayConsAirABE;\nlet daySmartA = msg.dayConsSmartA;\n\nmsg.totDayConsBedroomA = parseFloat((dayLightABE + dayAirABE + daySmartA)).toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1880,
        "wires": [
            [
                "d8d34ad56dc653b8"
            ]
        ]
    },
    {
        "id": "d8d34ad56dc653b8",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsBedroomA;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/A/bedroom/consumption/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1880,
        "wires": [
            [
                "de6820195fb22697"
            ]
        ]
    },
    {
        "id": "d796902655a01777",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1260,
        "y": 1880,
        "wires": []
    },
    {
        "id": "cabb274ecbbb4744",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Bedroom-Month",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo mensile degli item per la stanza bedroom.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Air conditioning;\n 3. Smart tv;\n Sommando questi consumi, ho il totale dei cosumi mensili di bedroom",
        "x": 1500,
        "y": 1660,
        "wires": []
    },
    {
        "id": "28bdac60de82accb",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotMonthConsBedroom",
        "func": "let monthLightABE = msg.monthConsLightABE;\nlet monthAirABE = msg.monthConsAirABE;\nlet monthSmartA = msg.monthConsSmartA;\n\nmsg.totMonthConsBedroomA = monthLightABE + monthAirABE + monthSmartA;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1880,
        "wires": [
            [
                "aaba05d8c0773ccc"
            ]
        ]
    },
    {
        "id": "67cc3fee5da41924",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"bedroom\",\n    \"item\": \"air_conditioning\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1800,
        "wires": [
            [
                "b13e5c987b70610e"
            ]
        ]
    },
    {
        "id": "b13e5c987b70610e",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1750,
        "y": 1800,
        "wires": [
            [
                "892ce094e64c5ae7"
            ]
        ]
    },
    {
        "id": "892ce094e64c5ae7",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionAirConditioning",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsAirABE = 0;\n        return msg;\n    }\n\n    msg.monthConsAirABE = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsAirABE = Math.round(msg.monthConsAirABE * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountAirABEM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1800,
        "wires": [
            [
                "ebf590acbe1976db"
            ]
        ]
    },
    {
        "id": "97600c1089638cd8",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"bedroom\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1720,
        "wires": [
            [
                "3270a6291d2dbf74"
            ]
        ]
    },
    {
        "id": "3270a6291d2dbf74",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1910,
        "y": 1720,
        "wires": [
            [
                "cca1b1e25d7c3f6f"
            ]
        ]
    },
    {
        "id": "cca1b1e25d7c3f6f",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsLightABE = 0;\n        return msg;\n    }\n\n    msg.monthConsLightABE = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsLightABE = Math.round(msg.monthConsLightABE * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightABEM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1720,
        "wires": [
            [
                "67cc3fee5da41924"
            ]
        ]
    },
    {
        "id": "ebf590acbe1976db",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"smart_tv\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1880,
        "wires": [
            [
                "abdb7a7b7d11ba75"
            ]
        ]
    },
    {
        "id": "abdb7a7b7d11ba75",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsA",
        "x": 1730,
        "y": 1880,
        "wires": [
            [
                "92a62423f4b03b5e"
            ]
        ]
    },
    {
        "id": "92a62423f4b03b5e",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionHomeTheater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsSmartA = 0;\n        return msg;\n    }\n\n    msg.monthConsSmartA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsSmartA = Math.round(msg.monthConsSmartA * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountSmartAM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1880,
        "wires": [
            [
                "28bdac60de82accb"
            ]
        ]
    },
    {
        "id": "dba95ad32817614c",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "SmartHome B",
        "info": "",
        "x": 130,
        "y": 2040,
        "wires": []
    },
    {
        "id": "8285d86a547584d4",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"laundry_machine\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2160,
        "wires": [
            [
                "b12df846530b21d8"
            ]
        ]
    },
    {
        "id": "b12df846530b21d8",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 480,
        "y": 2160,
        "wires": [
            [
                "42282e7710596e4e"
            ]
        ]
    },
    {
        "id": "73f550544b2da589",
        "type": "inject",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "0.6",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 2160,
        "wires": [
            [
                "8285d86a547584d4"
            ]
        ]
    },
    {
        "id": "42282e7710596e4e",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionLaundry",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsLaundryB = 0;\n        return msg;\n    }\n\n    msg.dayConsLaundryB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsLaundryB = Math.round(msg.dayConsLaundryB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLaundryBD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2160,
        "wires": [
            [
                "49fcdaa190ec3699"
            ]
        ]
    },
    {
        "id": "49fcdaa190ec3699",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"bathroom\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 2260,
        "wires": [
            [
                "0151c72d7bc768ee"
            ]
        ]
    },
    {
        "id": "0151c72d7bc768ee",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 320,
        "y": 2260,
        "wires": [
            [
                "521b98de20e6bfec"
            ]
        ]
    },
    {
        "id": "521b98de20e6bfec",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsLightBB = 0;\n        return msg;\n    }\n\n    msg.dayConsLightBB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsLightBB = Math.round(msg.dayConsLightBB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightBBD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2260,
        "wires": [
            [
                "aa615e4faf810558",
                "ccf13f24deb89575"
            ]
        ]
    },
    {
        "id": "45137ea73cecf561",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Bathroom-Day",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo giornaliero degli item per la stanza bathroom.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1.  Laundry Machine;\n 2. Light\n 3. Water\n Sommando questi consumi, ho il totale dei cosumi giornalieri del bagno",
        "x": 140,
        "y": 2100,
        "wires": []
    },
    {
        "id": "aa615e4faf810558",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"bathroom\",\n    \"item\": \"water\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 2360,
        "wires": [
            [
                "c376d641cf875d8e"
            ]
        ]
    },
    {
        "id": "c376d641cf875d8e",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 320,
        "y": 2360,
        "wires": [
            [
                "379d30bab9e60123"
            ]
        ]
    },
    {
        "id": "379d30bab9e60123",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionWater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.totDayConsWaterBB = 0;\n        return msg;\n    }\n\n    msg.totDayConsWaterBB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.totDayConsWaterBB = Math.round(msg.totDayConsWaterBB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountWaterBBD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2360,
        "wires": [
            [
                "ab0ebf118b2649c6"
            ]
        ]
    },
    {
        "id": "ccf13f24deb89575",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotDayConsBathroom",
        "func": "let dayLightBB = msg.dayConsLightBB;\nlet dayLaundryB = msg.dayConsLaundryB;\n\nmsg.totDayConsBathroomB = parseFloat((dayLightBB + dayLaundryB)).toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 2260,
        "wires": [
            [
                "54923cc066bc15e0"
            ]
        ]
    },
    {
        "id": "54923cc066bc15e0",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsBathroomB;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/B/bathroom/consumption/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 2260,
        "wires": [
            [
                "1893bd9f03630208"
            ]
        ]
    },
    {
        "id": "ab0ebf118b2649c6",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsWaterBB;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/B/bathroom/consumption/water/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2360,
        "wires": [
            [
                "522ddcefa10addba"
            ]
        ]
    },
    {
        "id": "edcab2cbfe965cc4",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1260,
        "y": 2260,
        "wires": []
    },
    {
        "id": "5ba0646f4acb5718",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1180,
        "y": 2360,
        "wires": []
    },
    {
        "id": "83f8699b5e8a3a2b",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Bathroom-Month",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo giornaliero degli item per la stanza bathroom.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Laundry Machine;\n 2. Light\n 3. Water\n Sommando questi consumi, ho il totale dei cosumi giornalieri del bagno",
        "x": 1500,
        "y": 2120,
        "wires": []
    },
    {
        "id": "0323a08883f73672",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"laundry_machine\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 2180,
        "wires": [
            [
                "fa95c0ea88fa4b97"
            ]
        ]
    },
    {
        "id": "fa95c0ea88fa4b97",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1910,
        "y": 2180,
        "wires": [
            [
                "8a05ad0dd21c25e1"
            ]
        ]
    },
    {
        "id": "8a05ad0dd21c25e1",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionLaundry",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsLaundryB = 0;\n        return msg;\n    }\n\n    msg.monthConsLaundryB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsLaundryB = Math.round(msg.monthConsLaundryB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLaundryBM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 2180,
        "wires": [
            [
                "fbb2e46a6cc8db50"
            ]
        ]
    },
    {
        "id": "fbb2e46a6cc8db50",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"bathroom\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 2260,
        "wires": [
            [
                "837e6e906051296b"
            ]
        ]
    },
    {
        "id": "837e6e906051296b",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1750,
        "y": 2260,
        "wires": [
            [
                "2ad605cac8d6092f"
            ]
        ]
    },
    {
        "id": "2ad605cac8d6092f",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsLightBB = 0;\n        return msg;\n    }\n\n    msg.monthConsLightBB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsLightBB = Math.round(msg.monthConsLightBB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightBBM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 2260,
        "wires": [
            [
                "c2a3afdb51f2a3ba"
            ]
        ]
    },
    {
        "id": "be1db72712b29d04",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"bathroom\",\n    \"item\": \"water\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 2340,
        "wires": [
            [
                "55f680ce9f2b567a"
            ]
        ]
    },
    {
        "id": "55f680ce9f2b567a",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1750,
        "y": 2340,
        "wires": [
            [
                "9b4def1f3d8b0d2e"
            ]
        ]
    },
    {
        "id": "9b4def1f3d8b0d2e",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionWater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsWaterBB = 0;\n        return msg;\n    }\n\n    msg.monthConsWaterBB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsWaterBB = Math.round(msg.monthConsWaterBB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountWaterBBM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 2340,
        "wires": [
            [
                "0eb8c2ac214373e8"
            ]
        ]
    },
    {
        "id": "c2a3afdb51f2a3ba",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotMonthConsBathroom",
        "func": "let monthLightBB = msg.monthConsLightBB;\nlet monthLaundryB = msg.monthConsLaundryB;\n\nmsg.totMonthConsBathroomB = monthLightBB + monthLaundryB;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 2260,
        "wires": [
            [
                "be1db72712b29d04"
            ]
        ]
    },
    {
        "id": "96b276cb637d178d",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Kitchen-Day",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo giornaliero degli item per la stanza kitchen.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Stove;\n 3. Oven;\n 4. Water\n Sommando questi consumi, ho il totale dei cosumi giornalieri del bagno",
        "x": 130,
        "y": 2480,
        "wires": []
    },
    {
        "id": "86403d2aa2196c06",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"kitchen\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2540,
        "wires": [
            [
                "30a1ec3f9d45cf5b"
            ]
        ]
    },
    {
        "id": "30a1ec3f9d45cf5b",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 480,
        "y": 2540,
        "wires": [
            [
                "7eda563818876314"
            ]
        ]
    },
    {
        "id": "4015fd412bd18f62",
        "type": "inject",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "0.7",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 2540,
        "wires": [
            [
                "86403d2aa2196c06"
            ]
        ]
    },
    {
        "id": "7eda563818876314",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsLightBK = 0;\n        return msg;\n    }\n\n    msg.dayConsLightBK = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsLightBK = Math.round(msg.dayConsLightBK * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightBKD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 2540,
        "wires": [
            [
                "2987c3575d6b953d"
            ]
        ]
    },
    {
        "id": "2987c3575d6b953d",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"stove\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 2620,
        "wires": [
            [
                "2942d5c59b6ef973"
            ]
        ]
    },
    {
        "id": "2942d5c59b6ef973",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 320,
        "y": 2620,
        "wires": [
            [
                "8a29280334e43baa"
            ]
        ]
    },
    {
        "id": "8a29280334e43baa",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionStove",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsStoveB = 0;\n        return msg;\n    }\n\n    msg.dayConsStoveB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsStoveB = Math.round(msg.dayConsStoveB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountStoveAD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2620,
        "wires": [
            [
                "d649444f3d80ac3a"
            ]
        ]
    },
    {
        "id": "6ef77cd345dc62eb",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"kitchen\",\n    \"item\": \"water\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 2820,
        "wires": [
            [
                "6ec8e73181867523"
            ]
        ]
    },
    {
        "id": "6ec8e73181867523",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 320,
        "y": 2820,
        "wires": [
            [
                "38ad5b0896b5e44d"
            ]
        ]
    },
    {
        "id": "38ad5b0896b5e44d",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionWater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.totDayConsWaterBK = 0;\n        return msg;\n    }\n\n    msg.totDayConsWaterBK = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.totDayConsWaterBK = Math.round(msg.totDayConsWaterBK * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountWaterBKD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2820,
        "wires": [
            [
                "2454f16838295d7b"
            ]
        ]
    },
    {
        "id": "2454f16838295d7b",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsWaterBK;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/B/kitchen/consumption/water/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2820,
        "wires": [
            [
                "adabae3cfde60866"
            ]
        ]
    },
    {
        "id": "384d078c3a49819e",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1180,
        "y": 2820,
        "wires": []
    },
    {
        "id": "d649444f3d80ac3a",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"oven\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 2720,
        "wires": [
            [
                "30b5f427f110d2e0"
            ]
        ]
    },
    {
        "id": "30b5f427f110d2e0",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 320,
        "y": 2720,
        "wires": [
            [
                "bf76370af37c8d22"
            ]
        ]
    },
    {
        "id": "bf76370af37c8d22",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionOven",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsOvenB = 0;\n        return msg;\n    }\n\n    msg.dayConsOvenB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsOvenB = Math.round(msg.dayConsOvenB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountOvenBD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2720,
        "wires": [
            [
                "83e8aa333d1e772a",
                "6ef77cd345dc62eb"
            ]
        ]
    },
    {
        "id": "83e8aa333d1e772a",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotDayConsKitchen",
        "func": "let dayLightBK = msg.dayConsLightBK;\nlet dayStoveB = msg.dayConsStoveB;\nlet dayOvenB =  msg.dayConsOvenB;\n\nmsg.totDayConsKitchenB = parseFloat((dayLightBK + dayStoveB + dayOvenB)).toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 2720,
        "wires": [
            [
                "ce70a5ee70e25899"
            ]
        ]
    },
    {
        "id": "ce70a5ee70e25899",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsKitchenB;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/B/kitchen/consumption/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2720,
        "wires": [
            [
                "be739bd0044e5d37"
            ]
        ]
    },
    {
        "id": "5c1d2fb8d03e19c5",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1260,
        "y": 2720,
        "wires": []
    },
    {
        "id": "adb29644036b9f3b",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Kitchen-Month",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo mensile degli item per la stanza kitchen.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Stove;\n 3. Oven;\n 3. Water;\n Sommando questi consumi, ho il totale dei cosumi mensili della cucina",
        "x": 1520,
        "y": 2460,
        "wires": []
    },
    {
        "id": "be2ead65f902cd09",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"kitchen\",\n    \"item\": \"water\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 2760,
        "wires": [
            [
                "16f9021e02d33a74"
            ]
        ]
    },
    {
        "id": "16f9021e02d33a74",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1770,
        "y": 2760,
        "wires": [
            [
                "044a48dbee72b278"
            ]
        ]
    },
    {
        "id": "044a48dbee72b278",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionWater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsWaterBK = 0;\n        return msg;\n    }\n\n    msg.monthConsWaterBK = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsWaterBK = Math.round(msg.monthConsWaterBK * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountWaterBKM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2760,
        "wires": [
            [
                "631041c0bb94bb10"
            ]
        ]
    },
    {
        "id": "08807203fbfcc3ef",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotMonthConsKitchen",
        "func": "let monthLightBK = msg.monthConsLightBK;\nlet monthStoveB = msg.monthConsStoveB;\nlet monthOvenB = msg.monthConsOvenB;\n\nmsg.totMonthConsKitchenB = monthLightBK + monthStoveB + monthOvenB;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 2680,
        "wires": [
            [
                "be2ead65f902cd09"
            ]
        ]
    },
    {
        "id": "5b83f122411f43a8",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"stove\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 2600,
        "wires": [
            [
                "fd24e10ed7cc4732"
            ]
        ]
    },
    {
        "id": "fd24e10ed7cc4732",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1770,
        "y": 2600,
        "wires": [
            [
                "a8857dc10bf0185b"
            ]
        ]
    },
    {
        "id": "a8857dc10bf0185b",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionStove",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsStoveB = 0;\n        return msg;\n    }\n\n    msg.monthConsStoveB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsStoveB = Math.round(msg.monthConsStoveB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountStoveBM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2600,
        "wires": [
            [
                "aa6c3b9569329834"
            ]
        ]
    },
    {
        "id": "03e40857a97420c3",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"kitchen\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 2520,
        "wires": [
            [
                "5c2d809816b4b39e"
            ]
        ]
    },
    {
        "id": "5c2d809816b4b39e",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1930,
        "y": 2520,
        "wires": [
            [
                "29ef1b185aa01be4"
            ]
        ]
    },
    {
        "id": "29ef1b185aa01be4",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsLightBK = 0;\n        return msg;\n    }\n\n    msg.monthConsLightBK = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsLightBK = Math.round(msg.monthConsLightBK * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightBKM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 2520,
        "wires": [
            [
                "5b83f122411f43a8"
            ]
        ]
    },
    {
        "id": "aa6c3b9569329834",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"oven\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 2680,
        "wires": [
            [
                "9e430f54ff728afa"
            ]
        ]
    },
    {
        "id": "9e430f54ff728afa",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1770,
        "y": 2680,
        "wires": [
            [
                "d974773accd9ab37"
            ]
        ]
    },
    {
        "id": "d974773accd9ab37",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionOven",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsOvenB = 0;\n        return msg;\n    }\n\n    msg.monthConsOvenB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsOvenB = Math.round(msg.monthConsOvenB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountOvenAM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2680,
        "wires": [
            [
                "08807203fbfcc3ef"
            ]
        ]
    },
    {
        "id": "39288f9be8a1bebc",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Stairways-Day",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo giornaliero degli item per la stanza stairways.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Temperature System;\n 3. Alarm System;\n Sommando questi consumi, ho il totale dei cosumi giornalieri di stairways",
        "x": 140,
        "y": 2940,
        "wires": []
    },
    {
        "id": "8aa22c62efb61e64",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"stairways\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 3000,
        "wires": [
            [
                "97bbeefeb80e8380"
            ]
        ]
    },
    {
        "id": "97bbeefeb80e8380",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 480,
        "y": 3000,
        "wires": [
            [
                "9a461bc82e3953eb"
            ]
        ]
    },
    {
        "id": "84049815fb497363",
        "type": "inject",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "0.8",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 3000,
        "wires": [
            [
                "8aa22c62efb61e64"
            ]
        ]
    },
    {
        "id": "9a461bc82e3953eb",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsLightBS = 0;\n        return msg;\n    }\n\n    msg.dayConsLightBS = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsLightBS = Math.round(msg.dayConsLightBS * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightBSD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 3000,
        "wires": [
            [
                "951403f2842e1c12"
            ]
        ]
    },
    {
        "id": "951403f2842e1c12",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"temperature_system\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 3080,
        "wires": [
            [
                "f0557be7c498df57"
            ]
        ]
    },
    {
        "id": "f0557be7c498df57",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 320,
        "y": 3080,
        "wires": [
            [
                "8da4a6e1bc650226"
            ]
        ]
    },
    {
        "id": "8da4a6e1bc650226",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionTempSys",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsTempSysB = 0;\n        return msg;\n    }\n\n    msg.dayConsTempSysB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsTempSysB = Math.round(msg.dayConsTempSysB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountTempSysBD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 3080,
        "wires": [
            [
                "75f86ad8cc6afe95"
            ]
        ]
    },
    {
        "id": "75f86ad8cc6afe95",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"alarm_system\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 3180,
        "wires": [
            [
                "a426b6f2a2d53802"
            ]
        ]
    },
    {
        "id": "a426b6f2a2d53802",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 320,
        "y": 3180,
        "wires": [
            [
                "96a0ce42648189c0"
            ]
        ]
    },
    {
        "id": "96a0ce42648189c0",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionAlarmSys",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsAlarmSysB = 0;\n        return msg;\n    }\n\n    msg.dayConsAlarmSysB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsAlarmSysB = Math.round(msg.dayConsAlarmSysB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountAlarmSysBD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 3180,
        "wires": [
            [
                "5c226fbf5c852d1f"
            ]
        ]
    },
    {
        "id": "5c226fbf5c852d1f",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotDayConsStairways",
        "func": "let dayLightBS = msg.dayConsLightBS;\nlet dayTempSysB = msg.dayConsTempSysB;\nlet dayAlarmSysB = msg.dayConsAlarmSysB;\n\nmsg.totDayConsStairwaysB = parseFloat((dayLightBS + dayTempSysB + dayAlarmSysB)).toFixed(2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 3180,
        "wires": [
            [
                "4ffdc897a2764753"
            ]
        ]
    },
    {
        "id": "4ffdc897a2764753",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsStairwaysB;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/B/stairways/consumption/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3180,
        "wires": [
            [
                "e989bcd94c635e67"
            ]
        ]
    },
    {
        "id": "175fd6cc4404e85a",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1260,
        "y": 3180,
        "wires": []
    },
    {
        "id": "4fdbf8b49854335a",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Livingroom-Day",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo giornaliero degli item per la stanza livingroom.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Air conditioning;\n 3. Home theater;\n Sommando questi consumi, ho il totale dei cosumi giornalieri di livingroom",
        "x": 140,
        "y": 3300,
        "wires": []
    },
    {
        "id": "47295418727eb710",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"livingroom\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 3360,
        "wires": [
            [
                "763c4b7b9dee5b21"
            ]
        ]
    },
    {
        "id": "763c4b7b9dee5b21",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 480,
        "y": 3360,
        "wires": [
            [
                "7ec5c7ee9101a32d"
            ]
        ]
    },
    {
        "id": "9a85124ca0ec921e",
        "type": "inject",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "0.9",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 3360,
        "wires": [
            [
                "47295418727eb710"
            ]
        ]
    },
    {
        "id": "7ec5c7ee9101a32d",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsLightBL = 0;\n        return msg;\n    }\n\n    msg.dayConsLightBL = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsLightBL = Math.round(msg.dayConsLightBL * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightBLD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 3360,
        "wires": [
            [
                "d911e464fc5c0adf"
            ]
        ]
    },
    {
        "id": "d911e464fc5c0adf",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"livingroom\",\n    \"item\": \"air_conditioning\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 3440,
        "wires": [
            [
                "e291cb9af08606c1"
            ]
        ]
    },
    {
        "id": "e291cb9af08606c1",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 320,
        "y": 3440,
        "wires": [
            [
                "86e6e768474bf83a"
            ]
        ]
    },
    {
        "id": "86e6e768474bf83a",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionAirConditioning",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsAirBL = 0;\n        return msg;\n    }\n\n    msg.dayConsAirBL = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsAirBL = Math.round(msg.dayConsAirBL * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountAirCondBLD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 3440,
        "wires": [
            [
                "ef0724b35deee62e"
            ]
        ]
    },
    {
        "id": "ef0724b35deee62e",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"home_theater\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 3520,
        "wires": [
            [
                "1f8d6145dc38b911"
            ]
        ]
    },
    {
        "id": "1f8d6145dc38b911",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 320,
        "y": 3520,
        "wires": [
            [
                "9799c89554df5ada"
            ]
        ]
    },
    {
        "id": "9799c89554df5ada",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionHomeTheater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsHomeTheaterB = 0;\n        return msg;\n    }\n\n    msg.dayConsHomeTheaterB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsHomeTheaterB = Math.round(msg.dayConsHomeTheaterB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountHomeTheaterBD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 3520,
        "wires": [
            [
                "f25b8647240ac20c"
            ]
        ]
    },
    {
        "id": "f25b8647240ac20c",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotDayConsLivingroom",
        "func": "let dayLightBL = msg.dayConsLightBL;\nlet dayAirBL = msg.dayConsAirBL;\nlet dayHomeTheaterB = msg.dayConsHomeTheaterB;\n\nmsg.totDayConsLivingroomB = parseFloat((dayLightBL + dayAirBL + dayHomeTheaterB)).toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 3520,
        "wires": [
            [
                "ad6d3a61c7e0f757"
            ]
        ]
    },
    {
        "id": "ad6d3a61c7e0f757",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsLivingroomB;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/B/livingroom/consumption/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3520,
        "wires": [
            [
                "9d509a3525c18651"
            ]
        ]
    },
    {
        "id": "bc20498d70abbce6",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1260,
        "y": 3520,
        "wires": []
    },
    {
        "id": "45d38da59adb3556",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Bedroom-Day",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo giornaliero degli item per la stanza bedroom.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Air conditioning;\n 3. SmartTV;\n Sommando questi consumi, ho il totale dei cosumi giornalieri di bedroom",
        "x": 130,
        "y": 3640,
        "wires": []
    },
    {
        "id": "8b711b0c5a6efed9",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"bedroom\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 3700,
        "wires": [
            [
                "1966515251aa1c2b"
            ]
        ]
    },
    {
        "id": "1966515251aa1c2b",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 480,
        "y": 3700,
        "wires": [
            [
                "583c361923b0fd8f"
            ]
        ]
    },
    {
        "id": "7d23eec8c4fe9021",
        "type": "inject",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 3700,
        "wires": [
            [
                "8b711b0c5a6efed9"
            ]
        ]
    },
    {
        "id": "583c361923b0fd8f",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsLightBBE = 0;\n        return msg;\n    }\n\n    msg.dayConsLightBBE = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsLightBBE = Math.round(msg.dayConsLightBBE * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightBBED = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 3700,
        "wires": [
            [
                "39d657237e28bdef"
            ]
        ]
    },
    {
        "id": "39d657237e28bdef",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"bedroom\",\n    \"item\": \"air_conditioning\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 3780,
        "wires": [
            [
                "fd1e524e6db33677"
            ]
        ]
    },
    {
        "id": "fd1e524e6db33677",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 320,
        "y": 3780,
        "wires": [
            [
                "6c4ebba30e56380d"
            ]
        ]
    },
    {
        "id": "6c4ebba30e56380d",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionAirConditioning",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsAirBBE = 0;\n        return msg;\n    }\n\n    msg.dayConsAirBBE = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsAirBBE = Math.round(msg.dayConsAirBBE * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountAirCondBBED = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 3780,
        "wires": [
            [
                "2920caa1b6c96352"
            ]
        ]
    },
    {
        "id": "2920caa1b6c96352",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"smart_tv\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 3880,
        "wires": [
            [
                "692073808384764b"
            ]
        ]
    },
    {
        "id": "692073808384764b",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 320,
        "y": 3880,
        "wires": [
            [
                "688c1fa365483669"
            ]
        ]
    },
    {
        "id": "688c1fa365483669",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionSmartTV",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsSmartB = 0;\n        return msg;\n    }\n\n    msg.dayConsSmartB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsSmartB = Math.round(msg.dayConsSmartB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountSmarttvB = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 3880,
        "wires": [
            [
                "b933584f2496b956"
            ]
        ]
    },
    {
        "id": "b933584f2496b956",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotDayConsBedroom",
        "func": "let dayLightBBE = msg.dayConsLightBBE;\nlet dayAirBBE = msg.dayConsAirBBE;\nlet daySmartB = msg.dayConsSmartB;\n\nmsg.totDayConsBedroomB = parseFloat((dayLightBBE + dayAirBBE + daySmartB)).toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 3880,
        "wires": [
            [
                "076265deeabefa7e"
            ]
        ]
    },
    {
        "id": "076265deeabefa7e",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsBedroomB;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/B/bedroom/consumption/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3880,
        "wires": [
            [
                "de92bf56a83de94c"
            ]
        ]
    },
    {
        "id": "c56e5c5fc89353c0",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1260,
        "y": 3880,
        "wires": []
    },
    {
        "id": "8155b6578997d6ff",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Hallway-Day",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo giornaliero degli item per la stanza hallway.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n Siccome c'è un solo item, il consumo giornaliero della luce = totale dei cosumi giornalieri di hallway",
        "x": 130,
        "y": 4000,
        "wires": []
    },
    {
        "id": "3ac140d688c86011",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"room\": \"hallway\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 4060,
        "wires": [
            [
                "72336953b856dbdd"
            ]
        ]
    },
    {
        "id": "72336953b856dbdd",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsB",
        "x": 480,
        "y": 4060,
        "wires": [
            [
                "7eeaef95b6c83f68"
            ]
        ]
    },
    {
        "id": "f8dbc919ab89e5f6",
        "type": "inject",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "1.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 4060,
        "wires": [
            [
                "3ac140d688c86011"
            ]
        ]
    },
    {
        "id": "7eeaef95b6c83f68",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsLightBH = 0;\n        return msg;\n    }\n\n    msg.dayConsLightBH = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsLightBH = Math.round(msg.dayConsLightBH * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightBHD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 4060,
        "wires": [
            [
                "cbf07f1d94597570"
            ]
        ]
    },
    {
        "id": "cbf07f1d94597570",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.dayConsLightBH;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/B/hallway/consumption/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 4060,
        "wires": [
            [
                "f868095b45b8dc99"
            ]
        ]
    },
    {
        "id": "b947aa0ea83bcd66",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1160,
        "y": 4060,
        "wires": []
    },
    {
        "id": "4dea351e8d4dcba5",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "InsertMonthCons",
        "x": 2430,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "6587628ad91fe3d5",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "PrepareQuery",
        "func": "let energyConsumption = msg.totMonthConsBathroomA;\nlet waterConsumption = msg.monthConsWaterAB;\nlet data = new Date();\nlet month = data.getFullYear() + '-' + String(data.getMonth() + 1).padStart(2, '0');\n\n\nmsg.payload = [\n{\n        \"Month\": month,\n        \"Room\": \"Bathroom\",\n        \"Consumption\": {\n                \"EnergyConsumption\": energyConsumption,\n                \"WaterConsumption\": waterConsumption\n        }\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 360,
        "wires": [
            [
                "4dea351e8d4dcba5"
            ]
        ]
    },
    {
        "id": "305a34716490692c",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "InsertMonthCons",
        "x": 2410,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "a2b8c13e8f9f86a1",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "PrepareQuery",
        "func": "let energyConsumption = msg.totMonthConsKitchenA;\nlet waterConsumption = msg.monthConsWaterAK;\nlet data = new Date();\nlet month = data.getFullYear() + '-' + String(data.getMonth() + 1).padStart(2, '0');\n\n\nmsg.payload = [\n{\n        \"Month\": month,\n        \"Room\": \"Kitchen\",\n        \"Consumption\": {\n                \"EnergyConsumption\": energyConsumption,\n                \"WaterConsumption\": waterConsumption\n        }\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 820,
        "wires": [
            [
                "305a34716490692c"
            ]
        ]
    },
    {
        "id": "6e107fc51ca2dc85",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "InsertMonthCons",
        "x": 2710,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "3e31a5597bf647dc",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "PrepareQuery",
        "func": "let energyConsumption = msg.totMonthConsStairwaysA;\nlet data = new Date();\nlet month = data.getFullYear() + '-' + String(data.getMonth() + 1).padStart(2, '0');\n\n\nmsg.payload = [\n{\n        \"Month\": month,\n        \"Room\": \"Stairways\",\n        \"Consumption\": {\n                \"EnergyConsumption\": energyConsumption\n        }\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 1200,
        "wires": [
            [
                "6e107fc51ca2dc85"
            ]
        ]
    },
    {
        "id": "c749abf8ed79f8d6",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "InsertMonthCons",
        "x": 2690,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "de2f407274e0f25d",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "PrepareQuery",
        "func": "let energyConsumption = msg.totMonthConsLivingroomA;\nlet data = new Date();\nlet month = data.getFullYear() + '-' + String(data.getMonth() + 1).padStart(2, '0');\n\n\nmsg.payload = [\n{\n        \"Month\": month,\n        \"Room\": \"Livingroom\",\n        \"Consumption\": {\n                \"EnergyConsumption\": energyConsumption\n        }\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2500,
        "y": 1540,
        "wires": [
            [
                "c749abf8ed79f8d6"
            ]
        ]
    },
    {
        "id": "f55b688dc7ca9914",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsA",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "InsertMonthCons",
        "x": 2730,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "aaba05d8c0773ccc",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "PrepareQuery",
        "func": "let energyConsumption = msg.totMonthConsBedroomA;\nlet data = new Date();\nlet month = data.getFullYear() + '-' + String(data.getMonth() + 1).padStart(2, '0');\n\n\nmsg.payload = [\n{\n        \"Month\": month,\n        \"Room\": \"Bedroom\",\n        \"Consumption\": {\n                \"EnergyConsumption\": energyConsumption\n        }\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2540,
        "y": 1880,
        "wires": [
            [
                "f55b688dc7ca9914"
            ]
        ]
    },
    {
        "id": "b514c9fc866df9f8",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "InsertMonthCons",
        "x": 2430,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "0eb8c2ac214373e8",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "PrepareQuery",
        "func": "let energyConsumption = msg.totMonthConsBathroomB;\nlet waterConsumption = msg.monthConsWaterBB;\nlet data = new Date();\nlet month = data.getFullYear() + '-' + String(data.getMonth() + 1).padStart(2, '0');\n\n\nmsg.payload = [\n{\n        \"Month\": month,\n        \"Room\": \"Bathroom\",\n        \"Consumption\": {\n                \"EnergyConsumption\": energyConsumption,\n                \"WaterConsumption\": waterConsumption\n        }\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 2340,
        "wires": [
            [
                "b514c9fc866df9f8"
            ]
        ]
    },
    {
        "id": "9dc4861d02eb8df5",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "InsertMonthCons",
        "x": 2470,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "631041c0bb94bb10",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "PrepareQuery",
        "func": "let energyConsumption = msg.totMonthConsKitchenB;\nlet waterConsumption = msg.monthConsWaterBK;\nlet data = new Date();\nlet month = data.getFullYear() + '-' + String(data.getMonth() + 1).padStart(2, '0');\n\n\nmsg.payload = [\n{\n        \"Month\": month,\n        \"Room\": \"Kitchen\",\n        \"Consumption\": {\n                \"EnergyConsumption\": energyConsumption,\n                \"WaterConsumption\": waterConsumption\n        }\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 2760,
        "wires": [
            [
                "9dc4861d02eb8df5"
            ]
        ]
    },
    {
        "id": "fc69314dc06eea8f",
        "type": "mqtt out",
        "z": "3ba8bb4804053fbb",
        "name": "MQTTPublisher",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15a23a76210a3108",
        "x": 1260,
        "y": 1160,
        "wires": []
    },
    {
        "id": "43de4795350a98b1",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryDayCons",
        "func": "// Data di oggi (inizio giornata a mezzanotte) in formato UTC ISODate\nlet startOfDay = new Date();\nstartOfDay.setHours(0, 0, 0, 0);\n\n// Data di domani (mezzanotte per limitare il range a oggi) in formato UTC ISODate\nlet endOfDay = new Date(startOfDay);\nendOfDay.setDate(startOfDay.getDate() + 1);\n\n//query\nconst query = {\n    \"item\": \"alarm_system\",\n    \"addedAt\": {\n        \"$gte\": startOfDay, \"$lt\": endOfDay\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1160,
        "wires": [
            [
                "4fa678514d8e5ffd"
            ]
        ]
    },
    {
        "id": "4fa678514d8e5ffd",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findDayConsA",
        "x": 320,
        "y": 1160,
        "wires": [
            [
                "e153a89c3fbf1e7c"
            ]
        ]
    },
    {
        "id": "e153a89c3fbf1e7c",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumDayConsumptionAlarmSys",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.dayConsAlarmSysA = 0;\n        return msg;\n    }\n\n    msg.dayConsAlarmSysA = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.dayConsAlarmSysA = Math.round(msg.dayConsAlarmSysA * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountAlarmSysAD = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1160,
        "wires": [
            [
                "49bf29deb5ad5eba"
            ]
        ]
    },
    {
        "id": "49bf29deb5ad5eba",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotDayConsStairways",
        "func": "let dayLightAS = msg.dayConsLightAS;\nlet dayTempSysA = msg.dayConsTempSysA;\nlet dayAlarmSysA = msg.dayConsAlarmSysA;\n\nmsg.totDayConsStairwaysA = parseFloat((dayLightAS + dayTempSysA + dayAlarmSysA)).toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1160,
        "wires": [
            [
                "0105495151449e8d"
            ]
        ]
    },
    {
        "id": "0105495151449e8d",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "MsgFormat",
        "func": "let value = msg.totDayConsStairwaysA;\n\n// Costruzione topic MQTT\nmsg.topic = `smart_home/A/stairways/consumption/history/day`;\n\n// Imposta il payload da inviare\nmsg.payload = {\n    value: value,    // consumo\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1160,
        "wires": [
            [
                "dde4d39e114e8818"
            ]
        ]
    },
    {
        "id": "06f86159116e09c2",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "SmartHome B",
        "info": "",
        "x": 1490,
        "y": 2060,
        "wires": []
    },
    {
        "id": "b7f5b92df7cee5a3",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Stairways-Month",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo mensile degli item per la stanza stairways.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Temperature System;\n 3. Alarm System;\n Sommando questi consumi, ho il totale dei cosumi mensili di stairways",
        "x": 1540,
        "y": 2880,
        "wires": []
    },
    {
        "id": "a4253bfbdccd6b51",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotMonthConsStairways",
        "func": "let monthLightBS = msg.monthConsLightBS;\nlet monthTempSysB = msg.monthConsTempSysB;\nlet monthAlarmSysB = msg.monthConsAlarmSysB;\n\nmsg.totMonthConsStairwaysB = monthLightBS + monthTempSysB + monthAlarmSysB;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 3100,
        "wires": [
            [
                "d2113db085e69b88"
            ]
        ]
    },
    {
        "id": "f21594bb6a16c74c",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"temperature_system\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 3020,
        "wires": [
            [
                "0060f6b4a7407d05"
            ]
        ]
    },
    {
        "id": "0060f6b4a7407d05",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1790,
        "y": 3020,
        "wires": [
            [
                "d2cc0f67f62a49b9"
            ]
        ]
    },
    {
        "id": "d2cc0f67f62a49b9",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionTempSys",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsTempSysB = 0;\n        return msg;\n    }\n\n    msg.monthConsTempSysB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsTempSysB = Math.round(msg.monthConsTempSysB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountTempSysBM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 3020,
        "wires": [
            [
                "36e7b7fb45a85c1d"
            ]
        ]
    },
    {
        "id": "88efa66d0c21df70",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"stairways\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 2940,
        "wires": [
            [
                "b1255c411b1f9fdb"
            ]
        ]
    },
    {
        "id": "b1255c411b1f9fdb",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1950,
        "y": 2940,
        "wires": [
            [
                "983a1cb66b966b40"
            ]
        ]
    },
    {
        "id": "983a1cb66b966b40",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsLightBS = 0;\n        return msg;\n    }\n\n    msg.monthConsLightBS = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsLightBS = Math.round(msg.monthConsLightBS * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightBSM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 2940,
        "wires": [
            [
                "f21594bb6a16c74c"
            ]
        ]
    },
    {
        "id": "36e7b7fb45a85c1d",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"alarm_system\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 3100,
        "wires": [
            [
                "28a70d0d578a93bd"
            ]
        ]
    },
    {
        "id": "28a70d0d578a93bd",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1790,
        "y": 3100,
        "wires": [
            [
                "6aee9e79b6d14583"
            ]
        ]
    },
    {
        "id": "6aee9e79b6d14583",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionAlarmSys",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsAlarmSysB = 0;\n        return msg;\n    }\n\n    msg.monthConsAlarmSysB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsAlarmSysB = Math.round(msg.monthConsAlarmSysB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountAlarmSysBM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 3100,
        "wires": [
            [
                "a4253bfbdccd6b51"
            ]
        ]
    },
    {
        "id": "18111e6608e9df6a",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "InsertMonthCons",
        "x": 2730,
        "y": 3100,
        "wires": [
            []
        ]
    },
    {
        "id": "d2113db085e69b88",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "PrepareQuery",
        "func": "let energyConsumption = msg.totMonthConsStairwaysB;\nlet data = new Date();\nlet month = data.getFullYear() + '-' + String(data.getMonth() + 1).padStart(2, '0');\n\n\nmsg.payload = [\n{\n        \"Month\": month,\n        \"Room\": \"Stairways\",\n        \"Consumption\": {\n                \"EnergyConsumption\": energyConsumption\n        }\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2540,
        "y": 3100,
        "wires": [
            [
                "18111e6608e9df6a"
            ]
        ]
    },
    {
        "id": "9977104d95e448b7",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Livingroom-Month",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo mensile degli item per la stanza livingroom.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Air conditioning;\n 3. Home theater;\n Sommando questi consumi, ho il totale dei cosumi mensili di livingroom",
        "x": 1550,
        "y": 3220,
        "wires": []
    },
    {
        "id": "1729f4815578100a",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotMonthConsLivingroom",
        "func": "let monthLightBL = msg.monthConsLightBL;\nlet monthAirBL = msg.monthConsAirBL;\nlet monthHomeTheaterB = msg.monthConsHomeTheaterB;\n\nmsg.totMonthConsLivingroomB = parseFloat((monthLightBL + monthAirBL + monthHomeTheaterB).toFixed(2));\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 3440,
        "wires": [
            [
                "6b790167dd2aeb86"
            ]
        ]
    },
    {
        "id": "ae633964abfebb1c",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"livingroom\",\n    \"item\": \"air_conditioning\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 3360,
        "wires": [
            [
                "36efebc346ebeebf"
            ]
        ]
    },
    {
        "id": "36efebc346ebeebf",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1790,
        "y": 3360,
        "wires": [
            [
                "908d7a0c15511888"
            ]
        ]
    },
    {
        "id": "908d7a0c15511888",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionAirConditioning",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsAirBL = 0;\n        return msg;\n    }\n\n    msg.monthConsAirBL = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsAirBL = Math.round(msg.monthConsAirBL * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountAirBLM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 3360,
        "wires": [
            [
                "0f2e325595a706f4"
            ]
        ]
    },
    {
        "id": "f9843f4a12a5ecde",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"livingroom\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 3280,
        "wires": [
            [
                "7eb03af4b7018f29"
            ]
        ]
    },
    {
        "id": "7eb03af4b7018f29",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1950,
        "y": 3280,
        "wires": [
            [
                "71b35553a6dba36b"
            ]
        ]
    },
    {
        "id": "71b35553a6dba36b",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsLightBL = 0;\n        return msg;\n    }\n\n    msg.monthConsLightBL = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsLightBL = Math.round(msg.monthConsLightBL * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightBLM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 3280,
        "wires": [
            [
                "ae633964abfebb1c"
            ]
        ]
    },
    {
        "id": "0f2e325595a706f4",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"home_theater\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 3440,
        "wires": [
            [
                "6a7df2000d04ba54"
            ]
        ]
    },
    {
        "id": "6a7df2000d04ba54",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1770,
        "y": 3440,
        "wires": [
            [
                "8e89ac0904858d50"
            ]
        ]
    },
    {
        "id": "8e89ac0904858d50",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionHomeTheater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsHomeTheaterB = 0;\n        return msg;\n    }\n\n    msg.monthConsHomeTheaterB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsHomeTheaterB = Math.round(msg.monthConsHomeTheaterB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountHomeTheaterBM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 3440,
        "wires": [
            [
                "1729f4815578100a"
            ]
        ]
    },
    {
        "id": "6b790167dd2aeb86",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "PrepareQuery",
        "func": "let energyConsumption = msg.totMonthConsLivingroomB;\nlet data = new Date();\nlet month = data.getFullYear() + '-' + String(data.getMonth() + 1).padStart(2, '0');\n\n\nmsg.payload = [\n{\n        \"Month\": month,\n        \"Room\": \"Livingroom\",\n        \"Consumption\": {\n                \"EnergyConsumption\": energyConsumption\n        }\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2540,
        "y": 3440,
        "wires": [
            [
                "f3e411db3f8b2478"
            ]
        ]
    },
    {
        "id": "f3e411db3f8b2478",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "InsertMonthCons",
        "x": 2730,
        "y": 3440,
        "wires": [
            []
        ]
    },
    {
        "id": "9725db07b95241d7",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Bedroom-Month",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo mensile degli item per la stanza bedroom.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n 2. Air conditioning;\n 3. Smart tv;\n Sommando questi consumi, ho il totale dei cosumi mensili di bedroom",
        "x": 1540,
        "y": 3560,
        "wires": []
    },
    {
        "id": "ad0e1f5e48d0f4dc",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "TotMonthConsBedroom",
        "func": "let monthLightBBE = msg.monthConsLightBBE;\nlet monthAirBBE = msg.monthConsAirBBE;\nlet monthSmartB = msg.monthConsSmartB;\n\nmsg.totMonthConsBedroomB = monthLightBBE + monthAirBBE + monthSmartB;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 3780,
        "wires": [
            [
                "7317503778c99fd0"
            ]
        ]
    },
    {
        "id": "80d40be2337b255a",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"bedroom\",\n    \"item\": \"air_conditioning\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 3700,
        "wires": [
            [
                "c486c3cff47e413e"
            ]
        ]
    },
    {
        "id": "c486c3cff47e413e",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1790,
        "y": 3700,
        "wires": [
            [
                "11281046fb9e15c3"
            ]
        ]
    },
    {
        "id": "11281046fb9e15c3",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionAirConditioning",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsAirBBE = 0;\n        return msg;\n    }\n\n    msg.monthConsAirBBE = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsAirBBE = Math.round(msg.monthConsAirBBE * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountAirBBEM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 3700,
        "wires": [
            [
                "a9a1d8cf40c6241a"
            ]
        ]
    },
    {
        "id": "556c9c783d545b5f",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"bedroom\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 3620,
        "wires": [
            [
                "78589d54f766b4c8"
            ]
        ]
    },
    {
        "id": "78589d54f766b4c8",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1950,
        "y": 3620,
        "wires": [
            [
                "e8a5ca7e73539d3e"
            ]
        ]
    },
    {
        "id": "e8a5ca7e73539d3e",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsLightBBE = 0;\n        return msg;\n    }\n\n    msg.monthConsLightBBE = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsLightBBE = Math.round(msg.monthConsLightBBE * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightBBEM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 3620,
        "wires": [
            [
                "80d40be2337b255a"
            ]
        ]
    },
    {
        "id": "a9a1d8cf40c6241a",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"item\": \"smart_tv\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 3780,
        "wires": [
            [
                "7595ded5057dfd06"
            ]
        ]
    },
    {
        "id": "7595ded5057dfd06",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1770,
        "y": 3780,
        "wires": [
            [
                "9412e488213bad3a"
            ]
        ]
    },
    {
        "id": "9412e488213bad3a",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionHomeTheater",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsSmartB = 0;\n        return msg;\n    }\n\n    msg.monthConsSmartB = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsSmartB = Math.round(msg.monthConsSmartB * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountSmartAM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 3780,
        "wires": [
            [
                "ad0e1f5e48d0f4dc"
            ]
        ]
    },
    {
        "id": "359059aa1ece7dfd",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "InsertMonthCons",
        "x": 2730,
        "y": 3780,
        "wires": [
            []
        ]
    },
    {
        "id": "7317503778c99fd0",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "PrepareQuery",
        "func": "let energyConsumption = msg.totMonthConsBedroomB;\nlet data = new Date();\nlet month = data.getFullYear() + '-' + String(data.getMonth() + 1).padStart(2, '0');\n\n\nmsg.payload = [\n{\n        \"Month\": month,\n        \"Room\": \"Bedroom\",\n        \"Consumption\": {\n                \"EnergyConsumption\": energyConsumption\n        }\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2540,
        "y": 3780,
        "wires": [
            [
                "359059aa1ece7dfd"
            ]
        ]
    },
    {
        "id": "f7bd6d77f05e298f",
        "type": "comment",
        "z": "3ba8bb4804053fbb",
        "name": "Hallway-Month",
        "info": "Questo flow, estrae da mongo db, separatamente il consumo mensile degli item per la stanza hallway.\nHo gestito separatamente, in modo che volendo in futuro possiamo estrarre anche il singolo consumo e mostrarlo a schermo.\n 1. Light;\n Siccome c'è un solo item, il consumo mensile della luce = totale dei cosumi mensili di hallway",
        "x": 1540,
        "y": 3900,
        "wires": []
    },
    {
        "id": "51cdb9c60f117b66",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "QueryMonthCons",
        "func": "\n// Calcola l'inizio del mese corrente (primo giorno del mese) in formato UTC ISODate\nlet startOfMonth = new Date();\nstartOfMonth.setDate(1); // Imposta il giorno al primo giorno del mese\nstartOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Calcola l'inizio del mese successivo per determinare la fine del mese corrente\nlet endOfMonth = new Date(startOfMonth);\nendOfMonth.setMonth(startOfMonth.getMonth() + 1); // Vai al mese successivo\nendOfMonth.setHours(0, 0, 0, 0); // Imposta l'ora a mezzanotte\n\n// Query per trovare i consumi mensili\nconst query = {\n    \"room\": \"hallway\",\n    \"item\": \"light\",\n    \"addedAt\": {\n        \"$gte\": startOfMonth, \"$lt\": endOfMonth\n    }\n};\n\nconst options = {};\n\n// Payload per il nodo mongodb4\nmsg.payload = [query, options];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 3960,
        "wires": [
            [
                "0d45661b69380357"
            ]
        ]
    },
    {
        "id": "0d45661b69380357",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "ConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "findMonthConsB",
        "x": 1950,
        "y": 3960,
        "wires": [
            [
                "6e4160954c03c3fd"
            ]
        ]
    },
    {
        "id": "6e4160954c03c3fd",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "SumMonthConsumptionLight",
        "func": "function sumConsumption(msg) {\n    if (!Array.isArray(msg.payload)) {\n        msg.monthConsLightBH = 0;\n        return msg;\n    }\n\n    msg.monthConsLightBH = msg.payload.reduce((total, record) => {\n        return total + (record.value || 0);\n    }, 0);\n\n    // Arrotonda il risultato a due decimali\n    msg.monthConsLightBH = Math.round(msg.monthConsLightBH * 100) / 100;\n\n    //numero di record trovati (verifico che sta sommando tutti i dati)\n    msg.recordCountLightBHM = msg.payload.length;\n\n    return msg;\n}\n\n// Applica la funzione al messaggio in arrivo\nreturn sumConsumption(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 3960,
        "wires": [
            [
                "e16c79bd2eed6af2"
            ]
        ]
    },
    {
        "id": "e52d39b732900bfe",
        "type": "mongodb4",
        "z": "3ba8bb4804053fbb",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsB",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "InsertMonthCons",
        "x": 2650,
        "y": 3960,
        "wires": [
            []
        ]
    },
    {
        "id": "e16c79bd2eed6af2",
        "type": "function",
        "z": "3ba8bb4804053fbb",
        "name": "PrepareQuery",
        "func": "let energyConsumption = msg.monthConsLightBH;\nlet data = new Date();\nlet month = data.getFullYear() + '-' + String(data.getMonth() + 1).padStart(2, '0');\n\n\nmsg.payload = [\n{\n        \"Month\": month,\n        \"Room\": \"Hallway\",\n        \"Consumption\": {\n                \"EnergyConsumption\": energyConsumption\n        }\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2460,
        "y": 3960,
        "wires": [
            [
                "e52d39b732900bfe"
            ]
        ]
    },
    {
        "id": "dd811e982908fe80",
        "type": "cronplus",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "41.164181671865485 14.765625",
        "defaultLocationType": "fixed",
        "outputs": 1,
        "options": [
            {
                "name": "schedule2",
                "topic": "topic2",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "59 23 L * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 1540,
        "y": 3960,
        "wires": [
            [
                "51cdb9c60f117b66"
            ]
        ]
    },
    {
        "id": "1db6f590791f42db",
        "type": "cronplus",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "41.164181671865485 14.765625",
        "defaultLocationType": "fixed",
        "outputs": 1,
        "options": [
            {
                "name": "schedule2",
                "topic": "topic2",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "59 23 L * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 1540,
        "y": 3620,
        "wires": [
            [
                "556c9c783d545b5f"
            ]
        ]
    },
    {
        "id": "90412177b1f10761",
        "type": "cronplus",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "41.164181671865485 14.765625",
        "defaultLocationType": "fixed",
        "outputs": 1,
        "options": [
            {
                "name": "schedule2",
                "topic": "topic2",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "59 23 L * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 1540,
        "y": 3280,
        "wires": [
            [
                "f9843f4a12a5ecde"
            ]
        ]
    },
    {
        "id": "e06548d935ca3ceb",
        "type": "cronplus",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "41.164181671865485 14.765625",
        "defaultLocationType": "fixed",
        "outputs": 1,
        "options": [
            {
                "name": "schedule2",
                "topic": "topic2",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "59 23 L * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 1540,
        "y": 2940,
        "wires": [
            [
                "88efa66d0c21df70"
            ]
        ]
    },
    {
        "id": "2a4bcd561e3e3f2b",
        "type": "cronplus",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "41.164181671865485 14.765625",
        "defaultLocationType": "fixed",
        "outputs": 1,
        "options": [
            {
                "name": "schedule2",
                "topic": "topic2",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "59 23 L * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 1500,
        "y": 2520,
        "wires": [
            [
                "03e40857a97420c3"
            ]
        ]
    },
    {
        "id": "a3a42268926b68f0",
        "type": "cronplus",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "41.164181671865485 14.765625",
        "defaultLocationType": "fixed",
        "outputs": 1,
        "options": [
            {
                "name": "schedule2",
                "topic": "topic2",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "59 23 L * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 1500,
        "y": 2180,
        "wires": [
            [
                "0323a08883f73672"
            ]
        ]
    },
    {
        "id": "1302acc7131389ee",
        "type": "cronplus",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "41.164181671865485 14.765625",
        "defaultLocationType": "fixed",
        "outputs": 1,
        "options": [
            {
                "name": "schedule2",
                "topic": "topic2",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "59 23 L * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 1500,
        "y": 1720,
        "wires": [
            [
                "97600c1089638cd8"
            ]
        ]
    },
    {
        "id": "d6eb48f15e6c4624",
        "type": "cronplus",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "41.164181671865485 14.765625",
        "defaultLocationType": "fixed",
        "outputs": 1,
        "options": [
            {
                "name": "schedule2",
                "topic": "topic2",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "59 23 L * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 1500,
        "y": 1380,
        "wires": [
            [
                "1dbf88b6adbb8dc6"
            ]
        ]
    },
    {
        "id": "166106c00e640717",
        "type": "cronplus",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "41.164181671865485 14.765625",
        "defaultLocationType": "fixed",
        "outputs": 1,
        "options": [
            {
                "name": "schedule2",
                "topic": "topic2",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "59 23 L * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 1500,
        "y": 1000,
        "wires": [
            [
                "282d6a7dc5190a46"
            ]
        ]
    },
    {
        "id": "a2c3c02d08821d38",
        "type": "cronplus",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "41.164181671865485 14.765625",
        "defaultLocationType": "fixed",
        "outputs": 1,
        "options": [
            {
                "name": "schedule2",
                "topic": "topic2",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "59 23 L * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 1500,
        "y": 540,
        "wires": [
            [
                "61c86779faf297d9"
            ]
        ]
    },
    {
        "id": "d53fb7875c06aed0",
        "type": "cronplus",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "41.164181671865485 14.765625",
        "defaultLocationType": "fixed",
        "outputs": 1,
        "options": [
            {
                "name": "schedule2",
                "topic": "topic2",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "59 23 L * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 1500,
        "y": 200,
        "wires": [
            [
                "a2299778c92c9c4e"
            ]
        ]
    },
    {
        "id": "c1735c9fc55b3408",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1080,
        "y": 220,
        "wires": [
            [
                "2937e3097ab672c6"
            ]
        ]
    },
    {
        "id": "b654025c83c9f85a",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 900,
        "y": 360,
        "wires": [
            [
                "f5b58147fe7b98ac"
            ]
        ]
    },
    {
        "id": "c41787bf54657fb6",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1080,
        "y": 660,
        "wires": [
            [
                "da0da107a0fe197f"
            ]
        ]
    },
    {
        "id": "b4803b4b3af5592b",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 900,
        "y": 820,
        "wires": [
            [
                "1e72814c2c47e0be"
            ]
        ]
    },
    {
        "id": "dde4d39e114e8818",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1060,
        "y": 1100,
        "wires": [
            [
                "ac17a72df156b371"
            ]
        ]
    },
    {
        "id": "c726858b75054513",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1080,
        "y": 1480,
        "wires": [
            [
                "722c07c5fe51bfa4"
            ]
        ]
    },
    {
        "id": "de6820195fb22697",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1060,
        "y": 1820,
        "wires": [
            [
                "a6203da01d07a427"
            ]
        ]
    },
    {
        "id": "1893bd9f03630208",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1080,
        "y": 2200,
        "wires": [
            [
                "fe93d99525a69a73"
            ]
        ]
    },
    {
        "id": "522ddcefa10addba",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 900,
        "y": 2360,
        "wires": [
            [
                "c323b95ee4f0cf66"
            ]
        ]
    },
    {
        "id": "adabae3cfde60866",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 900,
        "y": 2820,
        "wires": [
            [
                "9445bffa3b9534eb"
            ]
        ]
    },
    {
        "id": "be739bd0044e5d37",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1080,
        "y": 2640,
        "wires": [
            [
                "8866045f53f7ed39"
            ]
        ]
    },
    {
        "id": "e989bcd94c635e67",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1080,
        "y": 3120,
        "wires": [
            [
                "757dc2ad103fd8de"
            ]
        ]
    },
    {
        "id": "9d509a3525c18651",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1060,
        "y": 3460,
        "wires": [
            [
                "23dcb81173f70a16"
            ]
        ]
    },
    {
        "id": "de92bf56a83de94c",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 1060,
        "y": 3820,
        "wires": [
            [
                "afde052e3d147fd7"
            ]
        ]
    },
    {
        "id": "f868095b45b8dc99",
        "type": "template",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{payload.value}}",
        "output": "str",
        "x": 940,
        "y": 4000,
        "wires": [
            [
                "61da72e33734af2e"
            ]
        ]
    },
    {
        "id": "2937e3097ab672c6",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1210,
        "y": 220,
        "wires": [
            [
                "886f18f9730ed4a9"
            ]
        ]
    },
    {
        "id": "f5b58147fe7b98ac",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1030,
        "y": 360,
        "wires": [
            [
                "6259b4d0b5794ec8"
            ]
        ]
    },
    {
        "id": "da0da107a0fe197f",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1210,
        "y": 660,
        "wires": [
            [
                "0c107f60ff63115e"
            ]
        ]
    },
    {
        "id": "1e72814c2c47e0be",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1030,
        "y": 820,
        "wires": [
            [
                "a2a3b69fa450024f"
            ]
        ]
    },
    {
        "id": "ac17a72df156b371",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1190,
        "y": 1100,
        "wires": [
            [
                "fc69314dc06eea8f"
            ]
        ]
    },
    {
        "id": "722c07c5fe51bfa4",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1210,
        "y": 1480,
        "wires": [
            [
                "e4405e71c3a5cde8"
            ]
        ]
    },
    {
        "id": "a6203da01d07a427",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1190,
        "y": 1820,
        "wires": [
            [
                "d796902655a01777"
            ]
        ]
    },
    {
        "id": "fe93d99525a69a73",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1210,
        "y": 2200,
        "wires": [
            [
                "edcab2cbfe965cc4"
            ]
        ]
    },
    {
        "id": "c323b95ee4f0cf66",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1030,
        "y": 2360,
        "wires": [
            [
                "5ba0646f4acb5718"
            ]
        ]
    },
    {
        "id": "8866045f53f7ed39",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1210,
        "y": 2640,
        "wires": [
            [
                "5c1d2fb8d03e19c5"
            ]
        ]
    },
    {
        "id": "9445bffa3b9534eb",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1030,
        "y": 2820,
        "wires": [
            [
                "384d078c3a49819e"
            ]
        ]
    },
    {
        "id": "757dc2ad103fd8de",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1210,
        "y": 3120,
        "wires": [
            [
                "175fd6cc4404e85a"
            ]
        ]
    },
    {
        "id": "23dcb81173f70a16",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1190,
        "y": 3460,
        "wires": [
            [
                "bc20498d70abbce6"
            ]
        ]
    },
    {
        "id": "afde052e3d147fd7",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1190,
        "y": 3820,
        "wires": [
            [
                "c56e5c5fc89353c0"
            ]
        ]
    },
    {
        "id": "61da72e33734af2e",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "3ba8bb4804053fbb",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "encrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1070,
        "y": 4000,
        "wires": [
            [
                "b947aa0ea83bcd66"
            ]
        ]
    },
    {
        "id": "36b0c6bed06a7039",
        "type": "ui_form",
        "z": "04d92452ee88f484",
        "name": "",
        "label": "Authentication Form",
        "group": "631a411bae7eac16",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "user",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "psw",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "user": "",
            "psw": ""
        },
        "payload": "",
        "submit": "Submit",
        "cancel": "Cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 280,
        "y": 120,
        "wires": [
            [
                "14d35f8dc6269b5a"
            ]
        ]
    },
    {
        "id": "2b29c23e5564bf52",
        "type": "function",
        "z": "04d92452ee88f484",
        "name": "showResult",
        "func": "let count = global.get('userCount') || 0; // Recupera il valore di count dal contesto, o imposta a 0 se non esiste\n\n// Controlla prima se count è 0\nif (count === 0) {\n    msg.go = 'go';\n    // Poi controlla il payload e gestisce l'username\n    if (msg.payload && msg.payload.length > 0) {\n        msg.username = msg.payload[0].username;\n        let username = msg.username;\n        msg.payload = \"Access Permitted for user \" + username;\n    } \n    else {\n        msg.payload = \"Access Denied: check credentials\";\n    }\n} \nelse {\n    msg.go = 'not go';\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 120,
        "wires": [
            [
                "34571470803c805e",
                "ba6580ef9f71526c"
            ]
        ]
    },
    {
        "id": "14d35f8dc6269b5a",
        "type": "function",
        "z": "04d92452ee88f484",
        "name": "PrepareQuery",
        "func": "let user = msg.payload.user;\nlet psw = msg.payload.psw;\n\n// find query argument\nconst query = {\n    username: user,\n    password: psw\n};\n\n// find option argument\nconst options = {};\n\n// payload for mongodb4 node\nmsg.payload = [query, options];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 120,
        "wires": [
            [
                "a0af068f58ac3ae9"
            ]
        ]
    },
    {
        "id": "a0af068f58ac3ae9",
        "type": "mongodb4",
        "z": "04d92452ee88f484",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "Users",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "",
        "x": 630,
        "y": 120,
        "wires": [
            [
                "2b29c23e5564bf52"
            ]
        ]
    },
    {
        "id": "34571470803c805e",
        "type": "ui_toast",
        "z": "04d92452ee88f484",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Login",
        "name": "",
        "x": 790,
        "y": 60,
        "wires": []
    },
    {
        "id": "c4c3926e519bd3aa",
        "type": "function",
        "z": "04d92452ee88f484",
        "name": "HandleDashboardChanges",
        "func": "let userConnected = msg.username;\nlet count = global.get('userCount') || 0; // Recupera il conteggio corrente dal contesto o imposta a 0 se non esiste\n\nif (userConnected == \"a\") {\n    msg.payload = {\n        \"tabs\": {\n            \"show\": [\n                \"Dashboard Home A\",\n                \"Home A Consumption\",\n                \"Home A History\",\n                \"Login\"\n            ]\n        }\n    };\n    count++;\n}\n\nelse if (userConnected == \"b\") {\n    msg.payload = {\n        \"tabs\": {\n            \"show\": [\n                \"Dashboard Home B\",\n                \"Home B Consumption\",\n                \"Home B History\",\n                \"Login\"\n            ]\n        }\n    };\n    count++;\n}\n\nelse if (userConnected == \"admin\") {\n    msg.payload = {\n        \"tabs\": {\n            \"show\": [\n                \"Home\",\n                \"Dashboard Home A\",\n                \"Home A Consumption\",\n                \"Dashboard Home B\",\n                \"Home B Consumption\",\n                \"Login\"\n            ]\n        }\n    };\n    count++;\n}\n\nglobal.set('userCount', count); // Salva il nuovo conteggio nel contesto\nmsg.count = count;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 80,
        "wires": [
            [
                "3addda7130e56cf7"
            ]
        ]
    },
    {
        "id": "3addda7130e56cf7",
        "type": "ui_ui_control",
        "z": "04d92452ee88f484",
        "name": "",
        "events": "change",
        "x": 1320,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "365c4066b4b4b43c",
        "type": "ui_button",
        "z": "04d92452ee88f484",
        "name": "",
        "group": "631a411bae7eac16",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "LOG OUT",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-sign-out",
        "payload": "",
        "payloadType": "str",
        "topic": "n",
        "topicType": "msg",
        "x": 240,
        "y": 260,
        "wires": [
            [
                "8ff201ca63b45f38",
                "f619a6cfe28dcf9b"
            ]
        ]
    },
    {
        "id": "8ff201ca63b45f38",
        "type": "function",
        "z": "04d92452ee88f484",
        "name": "resetUI",
        "func": "let count = global.get('userCount') || 0; // Recupera il conteggio corrente dal contesto\n\ncount = Math.max(0, count - 1); // Decrementa count e garantisce che non sia inferiore a zero\nglobal.set('userCount', count); // Salva il nuovo conteggio nel contesto\nmsg.newCount = count;\n\nmsg.payload = {\n    \"tabs\": {\n        \"hide\": [\n            \"Home\",\n            \"Dashboard Home A\",\n            \"Home A Consumption\",\n            \"Home A History\",\n            \"Dashboard Home B\",\n            \"Home B Consumption\",\n            \"Home B History\"\n        ]\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 260,
        "wires": [
            [
                "da1fc3400aadc4de"
            ]
        ]
    },
    {
        "id": "da1fc3400aadc4de",
        "type": "ui_ui_control",
        "z": "04d92452ee88f484",
        "name": "",
        "events": "all",
        "x": 520,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "ba6580ef9f71526c",
        "type": "switch",
        "z": "04d92452ee88f484",
        "name": "",
        "property": "go",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "go",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not go",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 120,
        "wires": [
            [
                "c4c3926e519bd3aa"
            ],
            [
                "e5c9fa4fb1cc0d99"
            ]
        ]
    },
    {
        "id": "17d33cfc416a4fdc",
        "type": "ui_toast",
        "z": "04d92452ee88f484",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Login",
        "name": "",
        "x": 1270,
        "y": 140,
        "wires": []
    },
    {
        "id": "e5c9fa4fb1cc0d99",
        "type": "change",
        "z": "04d92452ee88f484",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"Please log out first\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 140,
        "wires": [
            [
                "17d33cfc416a4fdc"
            ]
        ]
    },
    {
        "id": "e8fa2267a6deaaa6",
        "type": "ui_toast",
        "z": "04d92452ee88f484",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Login",
        "name": "",
        "x": 590,
        "y": 320,
        "wires": []
    },
    {
        "id": "f619a6cfe28dcf9b",
        "type": "change",
        "z": "04d92452ee88f484",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Logged Out",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 320,
        "wires": [
            [
                "e8fa2267a6deaaa6"
            ]
        ]
    },
    {
        "id": "db0dd22a3ffe51a5",
        "type": "comment",
        "z": "04d92452ee88f484",
        "name": "Handle Authentication",
        "info": "",
        "x": 280,
        "y": 60,
        "wires": []
    },
    {
        "id": "72f5ab94784424f8",
        "type": "comment",
        "z": "04d92452ee88f484",
        "name": "Handle LogOut",
        "info": "",
        "x": 260,
        "y": 200,
        "wires": []
    },
    {
        "id": "0d9d21619ba007ea",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "SmartHomeA-Dashboard",
        "info": "",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "ca9671ca2b1fcc63",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "SmartHomeB-Dashboard",
        "info": "",
        "x": 130,
        "y": 1680,
        "wires": []
    },
    {
        "id": "01a65ae7722362c1",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Stairways",
        "info": "",
        "x": 80,
        "y": 80,
        "wires": []
    },
    {
        "id": "4b7baa3f7cbd0ba1",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Hallway",
        "info": "",
        "x": 70,
        "y": 2040,
        "wires": []
    },
    {
        "id": "16522867c283f170",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Livingroom",
        "info": "",
        "x": 80,
        "y": 400,
        "wires": []
    },
    {
        "id": "826fc64f6c8d2e98",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Bedroom",
        "info": "",
        "x": 80,
        "y": 720,
        "wires": []
    },
    {
        "id": "938c9fccea9409eb",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Bathroom",
        "info": "",
        "x": 80,
        "y": 1020,
        "wires": []
    },
    {
        "id": "659801c7badd0b94",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/stairways/light/intensity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "c7748e372c43a24c"
            ]
        ]
    },
    {
        "id": "9e961d431c3f780a",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/stairways/consumption/alarm_system",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 200,
        "wires": [
            [
                "6b7df889534768f9"
            ]
        ]
    },
    {
        "id": "cf318d53b375def8",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/livingroom/light/intensity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 460,
        "wires": [
            [
                "1b3ef66c810ec6e7"
            ]
        ]
    },
    {
        "id": "fc5a8734b9d41925",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/livingroom/consumption/light",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 460,
        "wires": [
            [
                "1396fb47aa607705"
            ]
        ]
    },
    {
        "id": "ece6f084836eee21",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/livingroom/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 520,
        "wires": [
            [
                "3613741424b1110a"
            ]
        ]
    },
    {
        "id": "267deebb4f2768c6",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/livingroom/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 580,
        "wires": [
            [
                "b33759d7079fd2b4"
            ]
        ]
    },
    {
        "id": "f040219016a4bebf",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bedroom/light/intensity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 780,
        "wires": [
            [
                "14a0010e211cf78f"
            ]
        ]
    },
    {
        "id": "e69ff10f957ed347",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bedroom/consumption/light",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 780,
        "wires": [
            [
                "ae6b4bc0eacec804"
            ]
        ]
    },
    {
        "id": "aec4699c6e555a24",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bedroom/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 840,
        "wires": [
            [
                "874f7309d52bc0d7"
            ]
        ]
    },
    {
        "id": "bcf77c71718f4087",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bedroom/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 900,
        "wires": [
            [
                "9c618c29ba8feabc"
            ]
        ]
    },
    {
        "id": "0efab01cd03c84fd",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bathroom/light/intensity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 1080,
        "wires": [
            [
                "3bd9d3e3b9683767"
            ]
        ]
    },
    {
        "id": "14054c8ed840ba99",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bathroom/consumption/light",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 1080,
        "wires": [
            [
                "77acdd2a823760d3"
            ]
        ]
    },
    {
        "id": "221e37beeace4d13",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bathroom/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 1140,
        "wires": [
            [
                "0133662a89437c81"
            ]
        ]
    },
    {
        "id": "86bd27f9279e24b7",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bathroom/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 1200,
        "wires": [
            [
                "b0b6adcaf274cf3d"
            ]
        ]
    },
    {
        "id": "4e611373b865c239",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Kitchen",
        "info": "",
        "x": 70,
        "y": 1320,
        "wires": []
    },
    {
        "id": "2a0e85474d9b43bb",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/kitchen/light/intensity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 1380,
        "wires": [
            [
                "52f020027c4542dd"
            ]
        ]
    },
    {
        "id": "c9ab285ccec6091e",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/kitchen/consumption/light",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 1380,
        "wires": [
            [
                "4b805ddb893d729b"
            ]
        ]
    },
    {
        "id": "12420e072713132c",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/kitchen/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 1440,
        "wires": [
            [
                "ce22da250b10d036"
            ]
        ]
    },
    {
        "id": "a833bdd948b2a302",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/kitchen/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 1500,
        "wires": [
            [
                "9f2dcb96f0079469"
            ]
        ]
    },
    {
        "id": "d3f7d04089d14ef3",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "d522a859f14a5802",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light Intensity (%): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 410,
        "y": 140,
        "wires": []
    },
    {
        "id": "23c2cd4a6dcb4f11",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "1f2b193cd8e98344",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Alarm System (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1060,
        "y": 200,
        "wires": []
    },
    {
        "id": "a29981527c937580",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "63129cfd88f33a1f",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light Intensity (%): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 410,
        "y": 460,
        "wires": []
    },
    {
        "id": "60c63151477563a8",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "6c55d7ebc9043bb8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light (W): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1020,
        "y": 460,
        "wires": []
    },
    {
        "id": "9188e6ea1fe0fbdb",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "63129cfd88f33a1f",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature (°):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 520,
        "wires": []
    },
    {
        "id": "b1737121acf3e862",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "63129cfd88f33a1f",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Humidity (%):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 580,
        "wires": []
    },
    {
        "id": "f297035ce5c6d8c5",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "b6bdf8e4202b23aa",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light Intensity (%): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 410,
        "y": 780,
        "wires": []
    },
    {
        "id": "7d5efd34ae7676c1",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "446ed46087bb1d1d",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light (W): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1020,
        "y": 780,
        "wires": []
    },
    {
        "id": "bc2c741c97fe01f7",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "b6bdf8e4202b23aa",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature (°):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 840,
        "wires": []
    },
    {
        "id": "d09290ecd70824e4",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "b6bdf8e4202b23aa",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Humidity (%):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 900,
        "wires": []
    },
    {
        "id": "3eda8bad29fe31cf",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "834524af513d499a",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light Intensity (%): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 410,
        "y": 1080,
        "wires": []
    },
    {
        "id": "eb3dfe63f5fb4b3e",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "1357d66c0cde404a",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light (W): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1020,
        "y": 1080,
        "wires": []
    },
    {
        "id": "bedc9b0347d065a1",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "834524af513d499a",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature (°):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 1140,
        "wires": []
    },
    {
        "id": "e042d98435dc48e9",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "834524af513d499a",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Humidity (%):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 1200,
        "wires": []
    },
    {
        "id": "7603880646edb9b1",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "f1d3bb24ddf3b7a8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light Intensity (%): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 410,
        "y": 1380,
        "wires": []
    },
    {
        "id": "bec4de289b58cf86",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "35d16b4ded9940a4",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light (W): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1020,
        "y": 1380,
        "wires": []
    },
    {
        "id": "aecaf95aa7fddaf9",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "f1d3bb24ddf3b7a8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature (°):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 1440,
        "wires": []
    },
    {
        "id": "1476413f55fd2b16",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "f1d3bb24ddf3b7a8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Humidity (%):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 1500,
        "wires": []
    },
    {
        "id": "b886c674e4b7b042",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Stairways",
        "info": " 1. light_intensity\n 2. light consumption\n 3. temperature\n 4. humidity",
        "x": 80,
        "y": 1740,
        "wires": []
    },
    {
        "id": "111e840e7fa66708",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/stairways/light/intensity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 1800,
        "wires": [
            [
                "68c551fe7dc6900b"
            ]
        ]
    },
    {
        "id": "964df05c0dfd2c6e",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/stairways/consumption/light",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 1800,
        "wires": [
            [
                "3dd30a8f723c1620"
            ]
        ]
    },
    {
        "id": "fd4c4ee1bdcfa4ae",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "f823859dcc051cff",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light Intensity (%): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 410,
        "y": 1800,
        "wires": []
    },
    {
        "id": "3e5ea7c58effd07f",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "ceadd350aa1a6b5c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light (W): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1020,
        "y": 1800,
        "wires": []
    },
    {
        "id": "3df05c4ca045b31f",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/hallway/light/intensity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 2100,
        "wires": [
            [
                "83fe9551d633c374"
            ]
        ]
    },
    {
        "id": "d53a4a5ca7459dde",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/hallway/consumption/light",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 2100,
        "wires": [
            [
                "41272cd7dcb62609"
            ]
        ]
    },
    {
        "id": "84514c542278003f",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/hallway/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 2160,
        "wires": [
            [
                "c457b985344f3ba3"
            ]
        ]
    },
    {
        "id": "e3579fb454f59f77",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/hallway/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 2220,
        "wires": [
            [
                "f2c640c8e93cc791"
            ]
        ]
    },
    {
        "id": "6a8f93c33aee9ef8",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Livingroom",
        "info": "",
        "x": 80,
        "y": 2360,
        "wires": []
    },
    {
        "id": "e2fc36dee510423c",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "f079f8659d276c2f",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light Intensity (%): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 410,
        "y": 2100,
        "wires": []
    },
    {
        "id": "98895eeb3f84e33a",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "233893e6bac0fe16",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light (W): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1020,
        "y": 2100,
        "wires": []
    },
    {
        "id": "8764fb9036c9accd",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "f079f8659d276c2f",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature (°):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 2160,
        "wires": []
    },
    {
        "id": "68ae2122a3a95ca5",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "f079f8659d276c2f",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Humidity (%):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 420,
        "y": 2220,
        "wires": []
    },
    {
        "id": "51fa11eaeefc415b",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/livingroom/light/intensity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 2420,
        "wires": [
            [
                "2dbe00fe20635c68"
            ]
        ]
    },
    {
        "id": "0569603fcfc3e6fe",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/livingroom/consumption/light",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 2420,
        "wires": [
            [
                "7ccbc1ce50ade2b4"
            ]
        ]
    },
    {
        "id": "db56da9acae2ad07",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/livingroom/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 2480,
        "wires": [
            [
                "6a64e25068d07cc0"
            ]
        ]
    },
    {
        "id": "5a43bc6656a16068",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/livingroom/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 2540,
        "wires": [
            [
                "c7733638d81e3f27"
            ]
        ]
    },
    {
        "id": "72f23326096695c5",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "9991a1f951da63bc",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light Intensity (%): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 410,
        "y": 2420,
        "wires": []
    },
    {
        "id": "e50208d447a8d102",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "461ea8191f77224a",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light W): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1020,
        "y": 2420,
        "wires": []
    },
    {
        "id": "b7f84443743b3caf",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "9991a1f951da63bc",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature (°):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 2480,
        "wires": []
    },
    {
        "id": "7784f4b76a5ad869",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "9991a1f951da63bc",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Humidity (%):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 2540,
        "wires": []
    },
    {
        "id": "510b59d194d16f47",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Bedroom",
        "info": "",
        "x": 80,
        "y": 2660,
        "wires": []
    },
    {
        "id": "088fd01f92433fe7",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bedroom/light/intensity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 2720,
        "wires": [
            [
                "66aaeafc5f0a799e"
            ]
        ]
    },
    {
        "id": "5072e3b9e716137d",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bedroom/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 2780,
        "wires": [
            [
                "3d9086f73d22f00e"
            ]
        ]
    },
    {
        "id": "f3460f41d4f080b3",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bedroom/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 2840,
        "wires": [
            [
                "87c7a80267d4d2cd"
            ]
        ]
    },
    {
        "id": "b2636d7e69466c24",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "91a0e30a03bbc122",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light Intensity (%): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 410,
        "y": 2720,
        "wires": []
    },
    {
        "id": "ee41829957c44b61",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "91a0e30a03bbc122",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature (°):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 2780,
        "wires": []
    },
    {
        "id": "395b4567b04e49d5",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "91a0e30a03bbc122",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Humidity (%):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 2840,
        "wires": []
    },
    {
        "id": "2d929bc6a26c4587",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Bathroom",
        "info": "",
        "x": 80,
        "y": 2980,
        "wires": []
    },
    {
        "id": "69196fe20421d2b7",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bathroom/light/intensity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 3040,
        "wires": [
            [
                "e94ed7d8bb2e3579"
            ]
        ]
    },
    {
        "id": "5ed703e56824b176",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bathroom/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 3100,
        "wires": [
            [
                "79254135f7c611e6"
            ]
        ]
    },
    {
        "id": "0e196bbe22289beb",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bathroom/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 3160,
        "wires": [
            [
                "1c91393c30538917"
            ]
        ]
    },
    {
        "id": "aaac956b87bb410a",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "e8a7acec31bd9eab",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light Intensity (%): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 410,
        "y": 3040,
        "wires": []
    },
    {
        "id": "f408cda630b4ed36",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "e8a7acec31bd9eab",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature (°):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 3100,
        "wires": []
    },
    {
        "id": "a3a98ebf6d74ac8a",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "e8a7acec31bd9eab",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Humidity (%):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 3160,
        "wires": []
    },
    {
        "id": "cbc8584d331f7471",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Kitchen",
        "info": "",
        "x": 70,
        "y": 3300,
        "wires": []
    },
    {
        "id": "e1643974bf45a6da",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/kitchen/light/intensity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 3360,
        "wires": [
            [
                "88db4265bfb2fae8"
            ]
        ]
    },
    {
        "id": "53abc961a2419d41",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/kitchen/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 3420,
        "wires": [
            [
                "d2bee7626c226068"
            ]
        ]
    },
    {
        "id": "8bf8f3aaf8e58165",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/kitchen/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 3480,
        "wires": [
            [
                "3b2aa79725460d2e"
            ]
        ]
    },
    {
        "id": "fe753233b6fd1b21",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "e37e4a5fb3a97099",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light Intensity (%): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 410,
        "y": 3360,
        "wires": []
    },
    {
        "id": "778547b7bce5d55b",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "e37e4a5fb3a97099",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature (°):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 3420,
        "wires": []
    },
    {
        "id": "3261ae352e9453b9",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "e37e4a5fb3a97099",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Humidity (%):",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 400,
        "y": 3480,
        "wires": []
    },
    {
        "id": "cad1843d6403d914",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Stairways-Consumptions",
        "info": "",
        "x": 770,
        "y": 80,
        "wires": []
    },
    {
        "id": "c9122e31b85e7edd",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/stairways/consumption/temperature_system",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 260,
        "wires": [
            [
                "12f6b67246131804"
            ]
        ]
    },
    {
        "id": "210efeea8615e4ce",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "1f2b193cd8e98344",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature System (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1080,
        "y": 260,
        "wires": []
    },
    {
        "id": "9e3c169ae250f169",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Livingroom-Consumptions",
        "info": "",
        "x": 770,
        "y": 400,
        "wires": []
    },
    {
        "id": "74c3792b246a4532",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/livingroom/consumption/air_conditioning",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 520,
        "wires": [
            [
                "2ee0c8a14514cce6"
            ]
        ]
    },
    {
        "id": "10c04fa3e59a8d89",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "6c55d7ebc9043bb8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Air Conditioning (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 520,
        "wires": []
    },
    {
        "id": "3e5ee888147154b2",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/livingroom/consumption/home_theater",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 580,
        "wires": [
            [
                "eafce7e91cfe5d93"
            ]
        ]
    },
    {
        "id": "536c82f7d60f1afc",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "6c55d7ebc9043bb8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Home Theater (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1060,
        "y": 580,
        "wires": []
    },
    {
        "id": "b85e910dcc57683d",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/stairways/consumption/light",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 140,
        "wires": [
            [
                "f0d0df1554ffa53b"
            ]
        ]
    },
    {
        "id": "6d78f09345a93c8b",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "1f2b193cd8e98344",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light (W): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1020,
        "y": 140,
        "wires": []
    },
    {
        "id": "f19e81bda2f0e8aa",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Bedroom-Consumptions",
        "info": "",
        "x": 770,
        "y": 720,
        "wires": []
    },
    {
        "id": "f2d86aa188420988",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bedroom/consumption/air_conditioning",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 840,
        "wires": [
            [
                "cdc0f953a6a3acc0"
            ]
        ]
    },
    {
        "id": "814c49bf55f84810",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "446ed46087bb1d1d",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Air Conditioning (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 840,
        "wires": []
    },
    {
        "id": "89255e4db9bb271a",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bedroom/consumption/smartTV",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 900,
        "wires": [
            [
                "0076b541a27edf2a"
            ]
        ]
    },
    {
        "id": "f8f563130932ed79",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "446ed46087bb1d1d",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Smart TV (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1040,
        "y": 900,
        "wires": []
    },
    {
        "id": "44c29e60eef4efb9",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Bathroom-Consumptions",
        "info": "",
        "x": 770,
        "y": 1020,
        "wires": []
    },
    {
        "id": "52844f3f95f948a0",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bathroom/consumption/laundry_machine",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 1140,
        "wires": [
            [
                "f96b53b5fe79bc49"
            ]
        ]
    },
    {
        "id": "1130a77c2e5a8c29",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "1357d66c0cde404a",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Laundry Machine (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 1140,
        "wires": []
    },
    {
        "id": "068d64183b2c5e16",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bathroom/consumption/water",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 1200,
        "wires": [
            [
                "ccd7dcd950aaced2"
            ]
        ]
    },
    {
        "id": "2525e7283ebcad9b",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "1357d66c0cde404a",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Water (L/min): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1040,
        "y": 1200,
        "wires": []
    },
    {
        "id": "1c8da34adc7d3791",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Kitchen-Consumptions",
        "info": "",
        "x": 760,
        "y": 1320,
        "wires": []
    },
    {
        "id": "79ca7724cd6e512f",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/kitchen/consumption/stove",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 1440,
        "wires": [
            [
                "2986f71abf5fd0ce"
            ]
        ]
    },
    {
        "id": "ef661336d61bef2f",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "35d16b4ded9940a4",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Stove (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1030,
        "y": 1440,
        "wires": []
    },
    {
        "id": "73f484bd451cd48c",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/kitchen/consumption/oven",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 1500,
        "wires": [
            [
                "651c795925d0ed61"
            ]
        ]
    },
    {
        "id": "57cd0ae66e1fa9a7",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "35d16b4ded9940a4",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Oven (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1030,
        "y": 1500,
        "wires": []
    },
    {
        "id": "4ed5198e75da10f8",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/kitchen/consumption/water",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 1560,
        "wires": [
            [
                "97b3bf96e1339d78"
            ]
        ]
    },
    {
        "id": "e43edb5029e4b5b6",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "35d16b4ded9940a4",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Water (L/min): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1040,
        "y": 1560,
        "wires": []
    },
    {
        "id": "d2d8eb0e1d819f87",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Stairways-Consumptions",
        "info": "",
        "x": 770,
        "y": 1740,
        "wires": []
    },
    {
        "id": "971e13dffeea6b91",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/stairways/consumption/alarm_system",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 1860,
        "wires": [
            [
                "6626b2854014f9c2"
            ]
        ]
    },
    {
        "id": "f648067a7e972a7f",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "ceadd350aa1a6b5c",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Alarm System (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1060,
        "y": 1860,
        "wires": []
    },
    {
        "id": "39abbf07ab8078d9",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/stairways/consumption/temperature_system",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 1920,
        "wires": [
            [
                "5e5270e984906f66"
            ]
        ]
    },
    {
        "id": "5421f5c638f914af",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "ceadd350aa1a6b5c",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature System (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1080,
        "y": 1920,
        "wires": []
    },
    {
        "id": "17cb7aa22996cf9f",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Hallway-Consumptions",
        "info": "",
        "x": 760,
        "y": 2040,
        "wires": []
    },
    {
        "id": "302814d60eb5fe4d",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Livingroom-Consumptions",
        "info": "",
        "x": 770,
        "y": 2360,
        "wires": []
    },
    {
        "id": "66ddec1011f7ad1d",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/livingroom/consumption/air_conditioning",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 2480,
        "wires": [
            [
                "9cc1d0e062cc1d4a"
            ]
        ]
    },
    {
        "id": "33b19903752488bc",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "461ea8191f77224a",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Air Conditioning (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 2480,
        "wires": []
    },
    {
        "id": "b61698669761cf91",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/livingroom/consumption/home_theater",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 2540,
        "wires": [
            [
                "5a678a4c6e470b25"
            ]
        ]
    },
    {
        "id": "9400945763e9a96f",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "461ea8191f77224a",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Home Theater (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1060,
        "y": 2540,
        "wires": []
    },
    {
        "id": "58a6dc8d77f73592",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bedroom/consumption/light",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 2720,
        "wires": [
            [
                "530879fb50694c55"
            ]
        ]
    },
    {
        "id": "f288038b4dc20fc6",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "8451d1b9b67f42e8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light (W): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1020,
        "y": 2720,
        "wires": []
    },
    {
        "id": "f30a717065359d51",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Bedroom-Consumptions",
        "info": "",
        "x": 770,
        "y": 2660,
        "wires": []
    },
    {
        "id": "540fd1d58c83e3dd",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bedroom/consumption/air_conditioning",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 2780,
        "wires": [
            [
                "3b95e3425e38af16"
            ]
        ]
    },
    {
        "id": "a6c5f494c27707d1",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "8451d1b9b67f42e8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Air Conditioning (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 2780,
        "wires": []
    },
    {
        "id": "d9f358da311bbdf7",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bedroom/consumption/smartTV",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 2840,
        "wires": [
            [
                "6a131273eebe63e2"
            ]
        ]
    },
    {
        "id": "c8cd8fee0426f6a3",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "8451d1b9b67f42e8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Smart TV (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1050,
        "y": 2840,
        "wires": []
    },
    {
        "id": "56b1bdbb4f772f53",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Bathroom-Consumptions",
        "info": "",
        "x": 770,
        "y": 2980,
        "wires": []
    },
    {
        "id": "469a2d9a6e99e861",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bathroom/consumption/laundry_machine",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 3100,
        "wires": [
            [
                "bfd4b22b16098cb6"
            ]
        ]
    },
    {
        "id": "9d9d3c2a7fa3f5bc",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "0e858b590a5dd6bc",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Laundry Machine (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 3100,
        "wires": []
    },
    {
        "id": "c41dc2d13b515916",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bathroom/consumption/water",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 3160,
        "wires": [
            [
                "32b41f7adb0ac4ff"
            ]
        ]
    },
    {
        "id": "7887cc42264506a9",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "0e858b590a5dd6bc",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Water (L/min): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1040,
        "y": 3160,
        "wires": []
    },
    {
        "id": "4dc10c7b0bbe5130",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bathroom/consumption/light",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 3040,
        "wires": [
            [
                "163d49fec8744126"
            ]
        ]
    },
    {
        "id": "2748f58502396af7",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "0e858b590a5dd6bc",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light (W): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1020,
        "y": 3040,
        "wires": []
    },
    {
        "id": "719b0d6102641140",
        "type": "comment",
        "z": "16afc9a5b3891ca7",
        "name": "Kitchen-Consumptions",
        "info": "",
        "x": 760,
        "y": 3300,
        "wires": []
    },
    {
        "id": "561a0c221d0ad487",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/kitchen/consumption/stove",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 3420,
        "wires": [
            [
                "5c7d7c6363d300c3"
            ]
        ]
    },
    {
        "id": "685ed97964557410",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "11e6037da70e14a7",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Stove (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1030,
        "y": 3420,
        "wires": []
    },
    {
        "id": "d43e0ab6b4c002af",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/kitchen/consumption/oven",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 3480,
        "wires": [
            [
                "30bb908a1986c939"
            ]
        ]
    },
    {
        "id": "654ab6f16c1892b3",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "11e6037da70e14a7",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Oven (KwH): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1030,
        "y": 3480,
        "wires": []
    },
    {
        "id": "a672399fe05e655a",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/kitchen/consumption/water",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 3540,
        "wires": [
            [
                "7dee35b587eebdd0"
            ]
        ]
    },
    {
        "id": "e1f37094d35c6388",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "11e6037da70e14a7",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Water (L/min): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1040,
        "y": 3540,
        "wires": []
    },
    {
        "id": "15e4086be5a20cac",
        "type": "mqtt in",
        "z": "16afc9a5b3891ca7",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/kitchen/consumption/light",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 740,
        "y": 3360,
        "wires": [
            [
                "2af8b4120220af6a"
            ]
        ]
    },
    {
        "id": "733094aaf29d4507",
        "type": "ui_text",
        "z": "16afc9a5b3891ca7",
        "group": "11e6037da70e14a7",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Light (W): ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1020,
        "y": 3360,
        "wires": []
    },
    {
        "id": "6a131273eebe63e2",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 2840,
        "wires": [
            [
                "c8cd8fee0426f6a3"
            ]
        ]
    },
    {
        "id": "3b95e3425e38af16",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 2780,
        "wires": [
            [
                "a6c5f494c27707d1"
            ]
        ]
    },
    {
        "id": "530879fb50694c55",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 2720,
        "wires": [
            [
                "f288038b4dc20fc6"
            ]
        ]
    },
    {
        "id": "163d49fec8744126",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 3040,
        "wires": [
            [
                "2748f58502396af7"
            ]
        ]
    },
    {
        "id": "bfd4b22b16098cb6",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 3100,
        "wires": [
            [
                "9d9d3c2a7fa3f5bc"
            ]
        ]
    },
    {
        "id": "32b41f7adb0ac4ff",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 3160,
        "wires": [
            [
                "7887cc42264506a9"
            ]
        ]
    },
    {
        "id": "e94ed7d8bb2e3579",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 3040,
        "wires": [
            [
                "aaac956b87bb410a"
            ]
        ]
    },
    {
        "id": "79254135f7c611e6",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 3100,
        "wires": [
            [
                "f408cda630b4ed36"
            ]
        ]
    },
    {
        "id": "1c91393c30538917",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 3160,
        "wires": [
            [
                "a3a98ebf6d74ac8a"
            ]
        ]
    },
    {
        "id": "88db4265bfb2fae8",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 3360,
        "wires": [
            [
                "fe753233b6fd1b21"
            ]
        ]
    },
    {
        "id": "d2bee7626c226068",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 3420,
        "wires": [
            [
                "778547b7bce5d55b"
            ]
        ]
    },
    {
        "id": "3b2aa79725460d2e",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 3480,
        "wires": [
            [
                "3261ae352e9453b9"
            ]
        ]
    },
    {
        "id": "2af8b4120220af6a",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 3360,
        "wires": [
            [
                "733094aaf29d4507"
            ]
        ]
    },
    {
        "id": "5c7d7c6363d300c3",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 3420,
        "wires": [
            [
                "685ed97964557410"
            ]
        ]
    },
    {
        "id": "30bb908a1986c939",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 3480,
        "wires": [
            [
                "654ab6f16c1892b3"
            ]
        ]
    },
    {
        "id": "7dee35b587eebdd0",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 3540,
        "wires": [
            [
                "e1f37094d35c6388"
            ]
        ]
    },
    {
        "id": "66aaeafc5f0a799e",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 2720,
        "wires": [
            [
                "b2636d7e69466c24"
            ]
        ]
    },
    {
        "id": "3d9086f73d22f00e",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 2780,
        "wires": [
            [
                "ee41829957c44b61"
            ]
        ]
    },
    {
        "id": "87c7a80267d4d2cd",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 2840,
        "wires": [
            [
                "395b4567b04e49d5"
            ]
        ]
    },
    {
        "id": "2dbe00fe20635c68",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 2420,
        "wires": [
            [
                "72f23326096695c5"
            ]
        ]
    },
    {
        "id": "6a64e25068d07cc0",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 2480,
        "wires": [
            [
                "b7f84443743b3caf"
            ]
        ]
    },
    {
        "id": "c7733638d81e3f27",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 2540,
        "wires": [
            [
                "7784f4b76a5ad869"
            ]
        ]
    },
    {
        "id": "7ccbc1ce50ade2b4",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 2420,
        "wires": [
            [
                "e50208d447a8d102"
            ]
        ]
    },
    {
        "id": "9cc1d0e062cc1d4a",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 2480,
        "wires": [
            [
                "33b19903752488bc"
            ]
        ]
    },
    {
        "id": "5a678a4c6e470b25",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 2540,
        "wires": [
            [
                "9400945763e9a96f"
            ]
        ]
    },
    {
        "id": "f2c640c8e93cc791",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 2220,
        "wires": [
            [
                "68ae2122a3a95ca5"
            ]
        ]
    },
    {
        "id": "c457b985344f3ba3",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 2160,
        "wires": [
            [
                "8764fb9036c9accd"
            ]
        ]
    },
    {
        "id": "83fe9551d633c374",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 2100,
        "wires": [
            [
                "e2fc36dee510423c"
            ]
        ]
    },
    {
        "id": "41272cd7dcb62609",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 2100,
        "wires": [
            [
                "98895eeb3f84e33a"
            ]
        ]
    },
    {
        "id": "5e5270e984906f66",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 1920,
        "wires": [
            [
                "5421f5c638f914af"
            ]
        ]
    },
    {
        "id": "6626b2854014f9c2",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 1860,
        "wires": [
            [
                "f648067a7e972a7f"
            ]
        ]
    },
    {
        "id": "3dd30a8f723c1620",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 1800,
        "wires": [
            [
                "3e5ea7c58effd07f"
            ]
        ]
    },
    {
        "id": "68c551fe7dc6900b",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 1800,
        "wires": [
            [
                "fd4c4ee1bdcfa4ae"
            ]
        ]
    },
    {
        "id": "97b3bf96e1339d78",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 1560,
        "wires": [
            [
                "e43edb5029e4b5b6"
            ]
        ]
    },
    {
        "id": "651c795925d0ed61",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 1500,
        "wires": [
            [
                "57cd0ae66e1fa9a7"
            ]
        ]
    },
    {
        "id": "2986f71abf5fd0ce",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 1440,
        "wires": [
            [
                "ef661336d61bef2f"
            ]
        ]
    },
    {
        "id": "4b805ddb893d729b",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 1380,
        "wires": [
            [
                "bec4de289b58cf86"
            ]
        ]
    },
    {
        "id": "ccd7dcd950aaced2",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 1200,
        "wires": [
            [
                "2525e7283ebcad9b"
            ]
        ]
    },
    {
        "id": "f96b53b5fe79bc49",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 1140,
        "wires": [
            [
                "1130a77c2e5a8c29"
            ]
        ]
    },
    {
        "id": "77acdd2a823760d3",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 1080,
        "wires": [
            [
                "eb3dfe63f5fb4b3e"
            ]
        ]
    },
    {
        "id": "3bd9d3e3b9683767",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 1080,
        "wires": [
            [
                "3eda8bad29fe31cf"
            ]
        ]
    },
    {
        "id": "0133662a89437c81",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 1140,
        "wires": [
            [
                "bedc9b0347d065a1"
            ]
        ]
    },
    {
        "id": "b0b6adcaf274cf3d",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 1200,
        "wires": [
            [
                "e042d98435dc48e9"
            ]
        ]
    },
    {
        "id": "52f020027c4542dd",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 1380,
        "wires": [
            [
                "7603880646edb9b1"
            ]
        ]
    },
    {
        "id": "ce22da250b10d036",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 1440,
        "wires": [
            [
                "aecaf95aa7fddaf9"
            ]
        ]
    },
    {
        "id": "9f2dcb96f0079469",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 1500,
        "wires": [
            [
                "1476413f55fd2b16"
            ]
        ]
    },
    {
        "id": "0076b541a27edf2a",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 900,
        "wires": [
            [
                "f8f563130932ed79"
            ]
        ]
    },
    {
        "id": "cdc0f953a6a3acc0",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 840,
        "wires": [
            [
                "814c49bf55f84810"
            ]
        ]
    },
    {
        "id": "ae6b4bc0eacec804",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 780,
        "wires": [
            [
                "7d5efd34ae7676c1"
            ]
        ]
    },
    {
        "id": "eafce7e91cfe5d93",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 580,
        "wires": [
            [
                "536c82f7d60f1afc"
            ]
        ]
    },
    {
        "id": "2ee0c8a14514cce6",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 520,
        "wires": [
            [
                "10c04fa3e59a8d89"
            ]
        ]
    },
    {
        "id": "1396fb47aa607705",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 460,
        "wires": [
            [
                "60c63151477563a8"
            ]
        ]
    },
    {
        "id": "1b3ef66c810ec6e7",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 460,
        "wires": [
            [
                "a29981527c937580"
            ]
        ]
    },
    {
        "id": "3613741424b1110a",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 520,
        "wires": [
            [
                "9188e6ea1fe0fbdb"
            ]
        ]
    },
    {
        "id": "b33759d7079fd2b4",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 580,
        "wires": [
            [
                "b1737121acf3e862"
            ]
        ]
    },
    {
        "id": "14a0010e211cf78f",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 780,
        "wires": [
            [
                "f297035ce5c6d8c5"
            ]
        ]
    },
    {
        "id": "874f7309d52bc0d7",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 840,
        "wires": [
            [
                "bc2c741c97fe01f7"
            ]
        ]
    },
    {
        "id": "9c618c29ba8feabc",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 900,
        "wires": [
            [
                "d09290ecd70824e4"
            ]
        ]
    },
    {
        "id": "c7748e372c43a24c",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 250,
        "y": 140,
        "wires": [
            [
                "d3f7d04089d14ef3"
            ]
        ]
    },
    {
        "id": "f0d0df1554ffa53b",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 140,
        "wires": [
            [
                "6d78f09345a93c8b"
            ]
        ]
    },
    {
        "id": "6b7df889534768f9",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 200,
        "wires": [
            [
                "23c2cd4a6dcb4f11"
            ]
        ]
    },
    {
        "id": "12f6b67246131804",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "16afc9a5b3891ca7",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 890,
        "y": 260,
        "wires": [
            [
                "210efeea8615e4ce"
            ]
        ]
    },
    {
        "id": "c45b8fe75cdcfa3b",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bathroom/consumption/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 160,
        "wires": [
            [
                "84e4ae0382106b22"
            ]
        ]
    },
    {
        "id": "2b208034372b707e",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "1357d66c0cde404a",
        "order": 9,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#669c35",
        "x": 430,
        "y": 160,
        "wires": []
    },
    {
        "id": "82531f39719daa72",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "SmartHomeA-Dashboard-Day",
        "info": "",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "428dec376a3fbeab",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Bathroom",
        "info": "",
        "x": 100,
        "y": 100,
        "wires": []
    },
    {
        "id": "1820b7b2e1b81131",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Kitchen",
        "info": "",
        "x": 90,
        "y": 300,
        "wires": []
    },
    {
        "id": "a43ed959a290babe",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/kitchen/consumption/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 360,
        "wires": [
            [
                "6aa5088b8c23aa6f"
            ]
        ]
    },
    {
        "id": "0e9710ca2d9196a6",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "35d16b4ded9940a4",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#669c35",
        "x": 430,
        "y": 360,
        "wires": []
    },
    {
        "id": "279924500094dced",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bathroom/consumption/water/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 220,
        "wires": [
            [
                "02558eee47ae4d88"
            ]
        ]
    },
    {
        "id": "316e3b483f7a5c4a",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "1357d66c0cde404a",
        "order": 10,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Water Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": 16,
        "color": "#0056d6",
        "x": 450,
        "y": 220,
        "wires": []
    },
    {
        "id": "e75fdde76c65c375",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/kitchen/consumption/water/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 420,
        "wires": [
            [
                "43be6a22f73ee77a"
            ]
        ]
    },
    {
        "id": "ab3d9be9c532a05f",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "35d16b4ded9940a4",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Water Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#0056d6",
        "x": 450,
        "y": 420,
        "wires": []
    },
    {
        "id": "8079579c26cfcc76",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Stairways",
        "info": "",
        "x": 100,
        "y": 500,
        "wires": []
    },
    {
        "id": "a12166ad7cd5e337",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/stairways/consumption/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 560,
        "wires": [
            [
                "5e33e02e00f85d4a"
            ]
        ]
    },
    {
        "id": "2c741547c776418a",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "1f2b193cd8e98344",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#669c35",
        "x": 430,
        "y": 560,
        "wires": []
    },
    {
        "id": "0c168326658964c6",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Livingroom",
        "info": "",
        "x": 100,
        "y": 640,
        "wires": []
    },
    {
        "id": "397432e2a9755566",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/livingroom/consumption/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 700,
        "wires": [
            [
                "fb5340f5308fca51"
            ]
        ]
    },
    {
        "id": "552d64bab6cc5d86",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "6c55d7ebc9043bb8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#669c35",
        "x": 430,
        "y": 700,
        "wires": []
    },
    {
        "id": "e507121c142db8f2",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Bedroom",
        "info": "",
        "x": 100,
        "y": 760,
        "wires": []
    },
    {
        "id": "7554de625a4ea8fe",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/A/bedroom/consumption/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 820,
        "wires": [
            [
                "51b5b6ca2af6615f"
            ]
        ]
    },
    {
        "id": "7d8eb4dcfbc57304",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "446ed46087bb1d1d",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#669c35",
        "x": 430,
        "y": 820,
        "wires": []
    },
    {
        "id": "ef485d5f3ffbc0cb",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bathroom/consumption/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 160,
        "wires": [
            [
                "47da92fb8b946fe0"
            ]
        ]
    },
    {
        "id": "7b9de8502efe8f96",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "0e858b590a5dd6bc",
        "order": 5,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#669c35",
        "x": 1170,
        "y": 160,
        "wires": []
    },
    {
        "id": "d5fdd808dbc2913f",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "SmartHomeB-Dashboard-Day",
        "info": "",
        "x": 900,
        "y": 40,
        "wires": []
    },
    {
        "id": "c5423dbffbcaece7",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Bathroom",
        "info": "",
        "x": 840,
        "y": 100,
        "wires": []
    },
    {
        "id": "3a312d6bad1a7285",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Kitchen",
        "info": "",
        "x": 830,
        "y": 300,
        "wires": []
    },
    {
        "id": "b1704b19f637606a",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/kitchen/consumption/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 360,
        "wires": [
            [
                "544218fb4ad12df1"
            ]
        ]
    },
    {
        "id": "15c8a2f02874d5ab",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "11e6037da70e14a7",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#669c35",
        "x": 1170,
        "y": 360,
        "wires": []
    },
    {
        "id": "2d92a4fadb2cdd53",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bathroom/consumption/water/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 220,
        "wires": [
            [
                "1b80f8947de74556"
            ]
        ]
    },
    {
        "id": "fe1603ab400ef6cb",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "0e858b590a5dd6bc",
        "order": 6,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Water Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": 16,
        "color": "#0056d6",
        "x": 1190,
        "y": 220,
        "wires": []
    },
    {
        "id": "8ac67e4cdbaeeabb",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/kitchen/consumption/water/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 420,
        "wires": [
            [
                "bb28b114644e278f"
            ]
        ]
    },
    {
        "id": "dc308563eb1f60e1",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "11e6037da70e14a7",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Water Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#0056d6",
        "x": 1190,
        "y": 420,
        "wires": []
    },
    {
        "id": "95418b2bbcda9ef4",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Stairways",
        "info": "",
        "x": 840,
        "y": 500,
        "wires": []
    },
    {
        "id": "1463cc03d2ff3124",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/stairways/consumption/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 560,
        "wires": [
            [
                "791505be2e8231fb"
            ]
        ]
    },
    {
        "id": "23e5a67ce8e75c9a",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "ceadd350aa1a6b5c",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#669c35",
        "x": 1170,
        "y": 560,
        "wires": []
    },
    {
        "id": "ae45d3387f2bb924",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Livingroom",
        "info": "",
        "x": 840,
        "y": 640,
        "wires": []
    },
    {
        "id": "b71bcc625f51d051",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/livingroom/consumption/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 700,
        "wires": [
            [
                "d204ecd370cd8a41"
            ]
        ]
    },
    {
        "id": "86a169fd5a75764b",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "461ea8191f77224a",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#669c35",
        "x": 1170,
        "y": 700,
        "wires": []
    },
    {
        "id": "d3ae38771f011224",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Bedroom",
        "info": "",
        "x": 840,
        "y": 760,
        "wires": []
    },
    {
        "id": "8c1e8ddb6c997f12",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/bedroom/consumption/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 820,
        "wires": [
            [
                "b494b8d07255b205"
            ]
        ]
    },
    {
        "id": "50698cd5890f714f",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "8451d1b9b67f42e8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#669c35",
        "x": 1170,
        "y": 820,
        "wires": []
    },
    {
        "id": "a139cfdb3923e7e0",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Hallway",
        "info": "",
        "x": 830,
        "y": 900,
        "wires": []
    },
    {
        "id": "b420cffaf5f8cbda",
        "type": "mqtt in",
        "z": "064d98e4210d441f",
        "name": "MQTTSubscriber",
        "topic": "smart_home/B/hallway/consumption/history/day",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15a23a76210a3108",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 860,
        "y": 960,
        "wires": [
            [
                "cc78d3388834d55e"
            ]
        ]
    },
    {
        "id": "43fc4becf79909f3",
        "type": "ui_text",
        "z": "064d98e4210d441f",
        "group": "233893e6bac0fe16",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Day Consumption",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#669c35",
        "x": 1170,
        "y": 960,
        "wires": []
    },
    {
        "id": "8aab8613765d31bc",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "SmartHomeA-Dashboard-Month",
        "info": "",
        "x": 230,
        "y": 1120,
        "wires": []
    },
    {
        "id": "0e08a1ca641b8bef",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Bathroom",
        "info": "",
        "x": 160,
        "y": 1180,
        "wires": []
    },
    {
        "id": "9027b6e2c35cd6ce",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "PrepareQuery",
        "func": "const query = {\n    \"Room\": \"Bathroom\"\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1240,
        "wires": [
            [
                "9ad75c37c0264110"
            ]
        ]
    },
    {
        "id": "9ad75c37c0264110",
        "type": "mongodb4",
        "z": "064d98e4210d441f",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindMonthCons",
        "x": 520,
        "y": 1240,
        "wires": [
            [
                "d962e692052b4a12",
                "c9125a045aba2023"
            ]
        ]
    },
    {
        "id": "d962e692052b4a12",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.EnergyConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Energy Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1240,
        "wires": [
            [
                "ed7e39d6deb7f3c1"
            ]
        ]
    },
    {
        "id": "ed7e39d6deb7f3c1",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "e2d8566ae76138a2",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Energy Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 900,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "c9125a045aba2023",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.WaterConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Water Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1300,
        "wires": [
            [
                "15a57dfe33bd3fdd"
            ]
        ]
    },
    {
        "id": "15a57dfe33bd3fdd",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "e2d8566ae76138a2",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Water Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 900,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "e5adb3a42c043981",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Kitchen",
        "info": "",
        "x": 150,
        "y": 1400,
        "wires": []
    },
    {
        "id": "64aac525897f93d7",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "PrepareQuery",
        "func": "const query = {\n    \"Room\": \"Kitchen\"\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1460,
        "wires": [
            [
                "974c99c07fc0612a"
            ]
        ]
    },
    {
        "id": "974c99c07fc0612a",
        "type": "mongodb4",
        "z": "064d98e4210d441f",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindMonthCons",
        "x": 500,
        "y": 1460,
        "wires": [
            [
                "055a5834541fd4db",
                "d17f9c1e9f35eacd"
            ]
        ]
    },
    {
        "id": "055a5834541fd4db",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.EnergyConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Energy Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1460,
        "wires": [
            [
                "b7d8fd8c0feb2042"
            ]
        ]
    },
    {
        "id": "b7d8fd8c0feb2042",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "cec57d203691c372",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Energy Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "d17f9c1e9f35eacd",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.WaterConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Water Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1520,
        "wires": [
            [
                "8d4947795c068655"
            ]
        ]
    },
    {
        "id": "8d4947795c068655",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "cec57d203691c372",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Water Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "73021185ddb7d54a",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Stairways",
        "info": "",
        "x": 160,
        "y": 1600,
        "wires": []
    },
    {
        "id": "2967f02791e3d44b",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "PrepareQuery",
        "func": "const query = {\n    \"Room\": \"Stairways\"\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1660,
        "wires": [
            [
                "43b7712db85d779e"
            ]
        ]
    },
    {
        "id": "43b7712db85d779e",
        "type": "mongodb4",
        "z": "064d98e4210d441f",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindMonthCons",
        "x": 500,
        "y": 1660,
        "wires": [
            [
                "f6b0d10a2aa966b4"
            ]
        ]
    },
    {
        "id": "f6b0d10a2aa966b4",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.EnergyConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Energy Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1660,
        "wires": [
            [
                "40082226da9e1208"
            ]
        ]
    },
    {
        "id": "40082226da9e1208",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "30c66edc1c32d01e",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Energy Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "193d25e12cfd1bce",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Livingroom",
        "info": "",
        "x": 160,
        "y": 1740,
        "wires": []
    },
    {
        "id": "0a5ae64f42fa5cda",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "PrepareQuery",
        "func": "const query = {\n    \"Room\": \"Livingroom\"\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1800,
        "wires": [
            [
                "c47bcadc53c6dd43"
            ]
        ]
    },
    {
        "id": "c47bcadc53c6dd43",
        "type": "mongodb4",
        "z": "064d98e4210d441f",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindMonthCons",
        "x": 500,
        "y": 1800,
        "wires": [
            [
                "48b8ef22e8da8630"
            ]
        ]
    },
    {
        "id": "48b8ef22e8da8630",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.EnergyConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Energy Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1800,
        "wires": [
            [
                "3d63528ede337aeb"
            ]
        ]
    },
    {
        "id": "3d63528ede337aeb",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "4076fe71ca426db9",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Energy Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "efae0e60febf0c6d",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Bedroom",
        "info": "",
        "x": 160,
        "y": 1880,
        "wires": []
    },
    {
        "id": "604ca2d132736052",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "PrepareQuery",
        "func": "const query = {\n    \"Room\": \"Bedroom\"\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1940,
        "wires": [
            [
                "e5e0bb99ece83c46"
            ]
        ]
    },
    {
        "id": "e5e0bb99ece83c46",
        "type": "mongodb4",
        "z": "064d98e4210d441f",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsA",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindMonthCons",
        "x": 500,
        "y": 1940,
        "wires": [
            [
                "d504cfe52b1760fb"
            ]
        ]
    },
    {
        "id": "d504cfe52b1760fb",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.EnergyConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Energy Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1940,
        "wires": [
            [
                "836e2f05a141b965"
            ]
        ]
    },
    {
        "id": "836e2f05a141b965",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "d2100cf234423876",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Energy Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "349e804ab5f240e1",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "SmartHomeB-Dashboard-Month",
        "info": "",
        "x": 1310,
        "y": 1120,
        "wires": []
    },
    {
        "id": "95a548449cd7a4d5",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Bathroom",
        "info": "",
        "x": 1240,
        "y": 1180,
        "wires": []
    },
    {
        "id": "bf6fe82f0fc4bc69",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "PrepareQuery",
        "func": "const query = {\n    \"Room\": \"Bathroom\"\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1240,
        "wires": [
            [
                "b4338ae2025c3dfe"
            ]
        ]
    },
    {
        "id": "b4338ae2025c3dfe",
        "type": "mongodb4",
        "z": "064d98e4210d441f",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindMonthCons",
        "x": 1580,
        "y": 1240,
        "wires": [
            [
                "f6c37201274a180d",
                "bba8a4d5444d1872"
            ]
        ]
    },
    {
        "id": "f6c37201274a180d",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.EnergyConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Energy Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1240,
        "wires": [
            [
                "e5556f6b2c8185fd"
            ]
        ]
    },
    {
        "id": "e5556f6b2c8185fd",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "5d5b8d305ad6d842",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Energy Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1960,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "bba8a4d5444d1872",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.WaterConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Water Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1300,
        "wires": [
            [
                "6027a45b47e2df59"
            ]
        ]
    },
    {
        "id": "6027a45b47e2df59",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "5d5b8d305ad6d842",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Water Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1960,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "b99c97dd0bb14756",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Kitchen",
        "info": "",
        "x": 1230,
        "y": 1400,
        "wires": []
    },
    {
        "id": "75a8996408f9f54a",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "PrepareQuery",
        "func": "const query = {\n    \"Room\": \"Kitchen\"\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1460,
        "wires": [
            [
                "d9b6f161298c5b72"
            ]
        ]
    },
    {
        "id": "d9b6f161298c5b72",
        "type": "mongodb4",
        "z": "064d98e4210d441f",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindMonthCons",
        "x": 1580,
        "y": 1460,
        "wires": [
            [
                "254ceca61df948b4",
                "07aeefb93d262dac"
            ]
        ]
    },
    {
        "id": "254ceca61df948b4",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.EnergyConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Energy Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1460,
        "wires": [
            [
                "1c594b9608ba688a"
            ]
        ]
    },
    {
        "id": "1c594b9608ba688a",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "1fe21f09c22f860e",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Energy Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1960,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "07aeefb93d262dac",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.WaterConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Water Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1520,
        "wires": [
            [
                "97bb38b5403e3c78"
            ]
        ]
    },
    {
        "id": "97bb38b5403e3c78",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "1fe21f09c22f860e",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Water Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1960,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "3751080ee6719522",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Stairways",
        "info": "",
        "x": 1240,
        "y": 1620,
        "wires": []
    },
    {
        "id": "56de1f6ac1fa3808",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "PrepareQuery",
        "func": "const query = {\n    \"Room\": \"Stairways\"\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1680,
        "wires": [
            [
                "127e85dde1a7a161"
            ]
        ]
    },
    {
        "id": "127e85dde1a7a161",
        "type": "mongodb4",
        "z": "064d98e4210d441f",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindMonthCons",
        "x": 1580,
        "y": 1680,
        "wires": [
            [
                "4e596fd59030ddea"
            ]
        ]
    },
    {
        "id": "4e596fd59030ddea",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.EnergyConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Energy Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1680,
        "wires": [
            [
                "95418891fcfc861f"
            ]
        ]
    },
    {
        "id": "95418891fcfc861f",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "07c0bee22839a08a",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Energy Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1960,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "f5019c2f13b21732",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Livingroom",
        "info": "",
        "x": 1240,
        "y": 1760,
        "wires": []
    },
    {
        "id": "065895fca6be5453",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "PrepareQuery",
        "func": "const query = {\n    \"Room\": \"Livingroom\"\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1820,
        "wires": [
            [
                "8bd2b8ea2add76ac"
            ]
        ]
    },
    {
        "id": "8bd2b8ea2add76ac",
        "type": "mongodb4",
        "z": "064d98e4210d441f",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindMonthCons",
        "x": 1580,
        "y": 1820,
        "wires": [
            [
                "bd80e485c1b06679"
            ]
        ]
    },
    {
        "id": "bd80e485c1b06679",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.EnergyConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Energy Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1820,
        "wires": [
            [
                "410ceec0ea61be8d"
            ]
        ]
    },
    {
        "id": "410ceec0ea61be8d",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "f07648551db59537",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Energy Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1960,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "36b984cde2c5da70",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Bedroom",
        "info": "",
        "x": 1240,
        "y": 1900,
        "wires": []
    },
    {
        "id": "c892d8df53c100a8",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "PrepareQuery",
        "func": "const query = {\n    \"Room\": \"Bedroom\"\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1960,
        "wires": [
            [
                "b9c6c1c0bfcf7cd9"
            ]
        ]
    },
    {
        "id": "b9c6c1c0bfcf7cd9",
        "type": "mongodb4",
        "z": "064d98e4210d441f",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindMonthCons",
        "x": 1580,
        "y": 1960,
        "wires": [
            [
                "c6b1f85e773d9614"
            ]
        ]
    },
    {
        "id": "c6b1f85e773d9614",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.EnergyConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Energy Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1960,
        "wires": [
            [
                "fbdf66500afb1e16"
            ]
        ]
    },
    {
        "id": "fbdf66500afb1e16",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "dabc92ecc390ce9f",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Energy Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1960,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "4e792a763fa4a8d1",
        "type": "comment",
        "z": "064d98e4210d441f",
        "name": "Hallway",
        "info": "",
        "x": 1230,
        "y": 2040,
        "wires": []
    },
    {
        "id": "3d609cdef4affb20",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "PrepareQuery",
        "func": "const query = {\n    \"Room\": \"Hallway\"\n};\n\n// payload for mongodb4 node\nmsg.payload = [query];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 2100,
        "wires": [
            [
                "22feec446ac3bdda"
            ]
        ]
    },
    {
        "id": "22feec446ac3bdda",
        "type": "mongodb4",
        "z": "064d98e4210d441f",
        "clientNode": "60fbdd21e3048103",
        "mode": "collection",
        "collection": "MonthConsB",
        "operation": "find",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "FindMonthCons",
        "x": 1580,
        "y": 2100,
        "wires": [
            [
                "0a54c0cd75ef1f2d"
            ]
        ]
    },
    {
        "id": "0a54c0cd75ef1f2d",
        "type": "function",
        "z": "064d98e4210d441f",
        "name": "DataFormat",
        "func": "//mongo db documenti\nlet data = msg.payload;\n\n// Ordina i dati per mese\ndata.sort((a, b) => a.Month.localeCompare(b.Month));\n\n// Prepara i dati per il grafico a barre\nlet chartData = data.map(item => item.Consumption.EnergyConsumption);\n\n// Estrai le etichette dei mesi per l'asse X\nlet labels = data.map(item => item.Month);\n\n// Formatta il payload per ui_chart (bar chart)\nmsg.payload = [{\n    series: [\"Energy Consumption\"],\n    data: chartData,\n    labels: labels\n}];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 2100,
        "wires": [
            [
                "69741f0d1fa9e989"
            ]
        ]
    },
    {
        "id": "69741f0d1fa9e989",
        "type": "ui_chart",
        "z": "064d98e4210d441f",
        "name": "",
        "group": "06f4d4a886b979c3",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Energy Consumption",
        "chartType": "bar",
        "legend": "true",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff9300",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1960,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "84e4ae0382106b22",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 270,
        "y": 160,
        "wires": [
            [
                "2b208034372b707e"
            ]
        ]
    },
    {
        "id": "02558eee47ae4d88",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 270,
        "y": 220,
        "wires": [
            [
                "316e3b483f7a5c4a"
            ]
        ]
    },
    {
        "id": "6aa5088b8c23aa6f",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 270,
        "y": 360,
        "wires": [
            [
                "0e9710ca2d9196a6"
            ]
        ]
    },
    {
        "id": "43be6a22f73ee77a",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 270,
        "y": 420,
        "wires": [
            [
                "ab3d9be9c532a05f"
            ]
        ]
    },
    {
        "id": "5e33e02e00f85d4a",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 270,
        "y": 560,
        "wires": [
            [
                "2c741547c776418a"
            ]
        ]
    },
    {
        "id": "fb5340f5308fca51",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 270,
        "y": 700,
        "wires": [
            [
                "552d64bab6cc5d86"
            ]
        ]
    },
    {
        "id": "51b5b6ca2af6615f",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 270,
        "y": 820,
        "wires": [
            [
                "7d8eb4dcfbc57304"
            ]
        ]
    },
    {
        "id": "47da92fb8b946fe0",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1010,
        "y": 160,
        "wires": [
            [
                "7b9de8502efe8f96"
            ]
        ]
    },
    {
        "id": "1b80f8947de74556",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "fe1603ab400ef6cb"
            ]
        ]
    },
    {
        "id": "544218fb4ad12df1",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1010,
        "y": 360,
        "wires": [
            [
                "15c8a2f02874d5ab"
            ]
        ]
    },
    {
        "id": "bb28b114644e278f",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1010,
        "y": 420,
        "wires": [
            [
                "dc308563eb1f60e1"
            ]
        ]
    },
    {
        "id": "791505be2e8231fb",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1010,
        "y": 560,
        "wires": [
            [
                "23e5a67ce8e75c9a"
            ]
        ]
    },
    {
        "id": "d204ecd370cd8a41",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1010,
        "y": 700,
        "wires": [
            [
                "86a169fd5a75764b"
            ]
        ]
    },
    {
        "id": "b494b8d07255b205",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1010,
        "y": 820,
        "wires": [
            [
                "50698cd5890f714f"
            ]
        ]
    },
    {
        "id": "cc78d3388834d55e",
        "type": "subflow:f32af1824fc8b3a9",
        "z": "064d98e4210d441f",
        "name": "",
        "env": [
            {
                "name": "mode",
                "value": "decrypt",
                "type": "str"
            },
            {
                "name": "key",
                "type": "cred"
            }
        ],
        "x": 1010,
        "y": 960,
        "wires": [
            [
                "43fc4becf79909f3"
            ]
        ]
    },
    {
        "id": "27f347be78273316",
        "type": "inject",
        "z": "064d98e4210d441f",
        "name": "",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1240,
        "wires": [
            [
                "9027b6e2c35cd6ce"
            ]
        ]
    },
    {
        "id": "de409e118259e153",
        "type": "inject",
        "z": "064d98e4210d441f",
        "name": "",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1460,
        "wires": [
            [
                "64aac525897f93d7"
            ]
        ]
    },
    {
        "id": "8f6924d83447ee0e",
        "type": "inject",
        "z": "064d98e4210d441f",
        "name": "",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1660,
        "wires": [
            [
                "2967f02791e3d44b"
            ]
        ]
    },
    {
        "id": "acdadea7a510fa06",
        "type": "inject",
        "z": "064d98e4210d441f",
        "name": "",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1800,
        "wires": [
            [
                "0a5ae64f42fa5cda"
            ]
        ]
    },
    {
        "id": "5b862d86d0e630c0",
        "type": "inject",
        "z": "064d98e4210d441f",
        "name": "",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1940,
        "wires": [
            [
                "604ca2d132736052"
            ]
        ]
    },
    {
        "id": "2779c1f52efe506e",
        "type": "inject",
        "z": "064d98e4210d441f",
        "name": "",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1250,
        "y": 1240,
        "wires": [
            [
                "bf6fe82f0fc4bc69"
            ]
        ]
    },
    {
        "id": "ee2ddefbd5f0c053",
        "type": "inject",
        "z": "064d98e4210d441f",
        "name": "",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1230,
        "y": 1460,
        "wires": [
            [
                "75a8996408f9f54a"
            ]
        ]
    },
    {
        "id": "568280f8a2593277",
        "type": "inject",
        "z": "064d98e4210d441f",
        "name": "",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1230,
        "y": 1680,
        "wires": [
            [
                "56de1f6ac1fa3808"
            ]
        ]
    },
    {
        "id": "43a07667450c4852",
        "type": "inject",
        "z": "064d98e4210d441f",
        "name": "",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1230,
        "y": 1820,
        "wires": [
            [
                "065895fca6be5453"
            ]
        ]
    },
    {
        "id": "c057a2acbac52972",
        "type": "inject",
        "z": "064d98e4210d441f",
        "name": "",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1230,
        "y": 1960,
        "wires": [
            [
                "c892d8df53c100a8"
            ]
        ]
    },
    {
        "id": "cbfe9f3a857aae99",
        "type": "inject",
        "z": "064d98e4210d441f",
        "name": "",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1230,
        "y": 2100,
        "wires": [
            [
                "3d609cdef4affb20"
            ]
        ]
    }
]